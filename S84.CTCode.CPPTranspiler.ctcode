exdef S84.CTCode.dbnf;

interface OutputStream {
    function void WriteLine(string line);
}
class CPPTranspilerCTCodeLogic {

    function void GenerateHeader(s84.ctcode.dbnf.CTCodeFile ctcodeFile, OutputStream header, string[] base_name_tokens)
    {
        string guard_name = GenerateGuardName(base_name_tokens);
        header.WriteLine(Concat("#ifndef ", guard_name));
        header.WriteLine(Concat("#define ", guard_name));
        header.WriteLine("");

        s84.ctcode.dbnf.ExternalDefinitionList exdef_list;
        exdef_list = ctcodeFile.GetDeclarations();
        s84.ctcode.dbnf.ExternalDefinition[] exdefs;
        exdefs = exdef_list.GetVector();

        int index = 0;

        while (index < Size(exdefs)) {
            s84.ctcode.dbnf.ExternalDefinition exdef;
            exdef = Element(exdefs, index);
            s84.ctcode.dbnf.QualfiedName exdef_name;
            exdef_name = exdef.GetExdef();
            header.WriteLine(Concat("#include \"", Concat(GetExdefHeaderString(exdef_name), "\"")));
            index = index + 1;
        }

        header.WriteLine("");
        header.WriteLine("#include <cstring>");
        header.WriteLine("#include <list>");
        header.WriteLine("#include <string>");
        header.WriteLine("#include <vector>");
        header.WriteLine("");

        index = 0;

        while (index < Size(base_name_tokens)) {
            string base_name_token;
            base_name_token = Element(base_name_tokens, index);
            header.WriteLine(Concat("namespace ", ToLower(base_name_token)));
            header.WriteLine("{");
            index = index + 1;
        }

        header.WriteLine("namespace ctcode");
        header.WriteLine("{");
        WriteForwardDeclaration(ctcodeFile, header);
        WriteClassDeclarations(ctcodeFile, header);

        index = 0;

        while (index < Size(base_name_tokens)) {
            header.WriteLine("};");
            index = index + 1;
        }
        
        header.WriteLine("};");
        header.WriteLine("");
        header.WriteLine("#endif");
    }

    function void WriteForwardDeclaration(s84.ctcode.dbnf.CTCodeFile ctcodeFile, OutputStream header)
    {
        s84.ctcode.dbnf.DefinitionList definition_list = ctcodeFile.GetDefinitions();
        s84.ctcode.dbnf.Definition[] definitions = definition_list.GetVector();

        int index = 0;

        while(index < Size(definitions)) {
            s84.ctcode.dbnf.Definition definition;
            definition = Element(definitions, index);
            s84.ctcode.dbnf.InterfaceDef interfaceDefinition = definition.GetInterfaceDef();
            s84.ctcode.dbnf.ClassDef classDefinition = definition.GetClassDef();

            if (interfaceDefinition) {
                header.WriteLine(Concat("class ", Concat(GenerateClassName(interfaceDefinition.GetName()), ";")));
            }

            if (classDefinition) {
                header.WriteLine(Concat("class ", Concat(GenerateClassName(classDefinition.GetName()), ";")));
            }

            index = index + 1;
        }
    }

    function void WriteClassDeclarations(s84.ctcode.dbnf.CTCodeFile ctcodeFile, OutputStream header)
    {
        s84.ctcode.dbnf.DefinitionList definition_list = ctcodeFile.GetDefinitions();
        s84.ctcode.dbnf.Definition[] definitions = definition_list.GetVector();

        header.WriteLine("");
        header.WriteLine("template<typename T>");
        header.WriteLine("inline int Size(std::vector<T> input) { return input.size(); };");
        header.WriteLine("template<typename T>");
        header.WriteLine("inline T Element(std::vector<T> input, int element) { return input.at(element); };");
        header.WriteLine("template<typename T>");
        header.WriteLine("inline std::vector<T> Append(std::vector<T> input, T element) { input.push_back(element); return input; };");
        header.WriteLine("inline int Length(std::string input) { return (int)input.length(); };");
        header.WriteLine("inline std::string At(std::string input, int index) { return input.substr(index, 1); };");
        header.WriteLine("inline std::string Concat(std::string left, std::string right) { return left + right; };");

        int index;
        index = 0;

        while(index < Size(definitions)) {
            s84.ctcode.dbnf.Definition definition;
            definition = Element(definitions, index);

            if (definition.GetInterfaceDef()) {
                WriteInterfaceDeclaration(definition.GetInterfaceDef(), header);
            }

            if (definition.GetClassDef()) {
                WriteClassDeclaration(definition.GetClassDef(), header);
            }

            index = index + 1;
        }
    }

    function void WriteInterfaceDeclaration(s84.ctcode.dbnf.InterfaceDef interfaceDefinition, OutputStream header)
    {
        string class_name = "";
        class_name = GenerateClassName(interfaceDefinition.GetName());
        header.WriteLine("");
        header.WriteLine(Concat("class ", class_name));
        header.WriteLine("{");
        header.WriteLine("public:");
        header.WriteLine(Concat("    inline ", Concat(class_name, "() {};")));
        header.WriteLine(Concat("    inline ~", Concat(class_name, "() {};")));

        s84.ctcode.dbnf.ContentDeclarationList declaration_list;
        declaration_list = interfaceDefinition.GetDeclarations();
        s84.ctcode.dbnf.ContentDeclaration[] declarations;
        declarations = declaration_list.GetVector();

        int index;
        index = 0;

        if (Size(declarations) > 0) {
            header.WriteLine("");

            while(index < Size(declarations)) {
                s84.ctcode.dbnf.ContentDeclaration declaration;
                declaration = Element(declarations, index);

                header.WriteLine(Concat("    virtual ", Concat(GetType(declaration.GetType()), Concat(" ", Concat(GenerateCallName(declaration.GetName()), Concat("(", Concat(GenerateParameterList(declaration.GetParameters()), ") = 0;")))))));

                index = index + 1;
            }
        }

        header.WriteLine("};");
    }

    function void WriteClassDeclaration(s84.ctcode.dbnf.ClassDef classDefinition, OutputStream header)
    {
        string class_name;
        class_name = GenerateClassName(classDefinition.GetName());
        header.WriteLine("");
        header.WriteLine(Concat("class ", class_name));
        header.WriteLine("{");
        header.WriteLine("public:");
        header.WriteLine(Concat("    inline ", Concat(class_name, "() {};")));
        header.WriteLine(Concat("    inline ~", Concat(class_name, "() {};")));

        s84.ctcode.dbnf.ContentDefinitionList definition_list;
        definition_list = classDefinition.GetDefinitions();
        s84.ctcode.dbnf.ContentDefinition[] definitions;
        definitions = definition_list.GetVector();
        s84.ctcode.dbnf.ContentDefinition[] functionDefinitions;
        s84.ctcode.dbnf.ContentDefinition[] memberDefinitions;

        int index;
        index = 0;

        while(index < Size(definitions)) {
            s84.ctcode.dbnf.ContentDefinition definition;
            definition = Element(definitions, index);

            if (definition.GetFunctionBody()) {
                functionDefinitions = Append(functionDefinitions, definition);
            } else {
                memberDefinitions = Append(memberDefinitions, definition);
            }

            index = index + 1;
        }

        if(Size(functionDefinitions) > 0)
        {
            header.WriteLine("");

            index = 0;

            while (index < Size(functionDefinitions)) {
                s84.ctcode.dbnf.ContentDefinition definition;
                definition = Element(functionDefinitions, index);
                header.WriteLine(Concat("    ", Concat(GetType(definition.GetType()), Concat(" ", Concat(GenerateCallName(definition.GetName()), Concat("(", Concat(GenerateParameterList(definition.GetParameters()), ");")))))));
                index = index + 1;
            }
        }

        if(Size(memberDefinitions) > 0)
        {
            header.WriteLine("");
            header.WriteLine("private:");

            index = 0;

            while (index < Size(memberDefinitions)) {
                s84.ctcode.dbnf.ContentDefinition definition;
                definition = Element(memberDefinitions, index);
                header.WriteLine(Concat("    ", Concat(GetType(definition.GetType()), Concat(" ", Concat(GenerateVariableName(definition.GetName()), ";")))));
                index = index + 1;
            }
        }

        header.WriteLine("};");
    }

    function void GenerateImplementation(s84.ctcode.dbnf.CTCodeFile ctcodeFile, OutputStream implementation, string base_name, string[] base_name_tokens)
    {
        implementation.WriteLine(Concat("#include \"", Concat(base_name, ".hpp\"")));
        implementation.WriteLine("");

        s84.ctcode.dbnf.ExternalDefinitionList exdef_list;
        exdef_list = ctcodeFile.GetDeclarations();
        s84.ctcode.dbnf.ExternalDefinition[] exdefs;
        exdefs = exdef_list.GetVector();

        int index;
        index = 0;

        while (index < Size(exdefs)) {
            s84.ctcode.dbnf.ExternalDefinition exdef;
            exdef = Element(exdefs, index);
            s84.ctcode.dbnf.QualfiedName exdef_name;
            exdef_name = exdef.GetExdef();
            implementation.WriteLine(Concat("#include \"", Concat(GetExdefHeaderString(exdef_name), "\"")));
            index = index + 1;
        }

        implementation.WriteLine("");

        index = 0;

        while (index < Size(base_name_tokens)) {
            string base_name_token;
            base_name_token = Element(base_name_tokens, index);
            implementation.WriteLine(Concat("namespace ", ToLower(base_name_token)));
            implementation.WriteLine("{");
            index = index + 1;
        }

        implementation.WriteLine("namespace ctcode");
        implementation.WriteLine("{");

        WriteFunctionDefinitions(ctcodeFile, implementation);

        index = 0;

        while (index < Size(base_name_tokens)) {
            implementation.WriteLine("};");
            index = index + 1;
        }
        
        implementation.WriteLine("};");
    }

    function void WriteFunctionDefinitions(s84.ctcode.dbnf.CTCodeFile ctcodeFile, OutputStream implementation)
    {
        s84.ctcode.dbnf.DefinitionList definition_list;
        definition_list = ctcodeFile.GetDefinitions();
        s84.ctcode.dbnf.Definition[] definitions;
        definitions = definition_list.GetVector();
        s84.ctcode.dbnf.ClassDef[] classDefinitions;

        int index;
        index = 0;

        while (index < Size(definitions)) {
            s84.ctcode.dbnf.Definition definition;
            definition = Element(definitions, index);
            s84.ctcode.dbnf.ClassDef classDefinition;
            classDefinition = definition.GetClassDef();

            if (classDefinition) {
                classDefinitions = Append(classDefinitions, classDefinition);
            }

            index = index + 1;
        }

        index = 0;

        while (index < Size(classDefinitions)) {
            s84.ctcode.dbnf.ClassDef classDefinition;
            classDefinition = Element(classDefinitions, index);
            WriteClassDefinition(classDefinition, implementation, index == 0);
            index = index + 1;
        }
    }

    function void WriteClassDefinition(s84.ctcode.dbnf.ClassDef classDefinition, OutputStream implementation, bool first_class_definition)
    {
        string class_name;
        class_name = GenerateClassName(classDefinition.GetName());

        s84.ctcode.dbnf.ContentDefinitionList definition_list;
        definition_list = classDefinition.GetDefinitions();
        s84.ctcode.dbnf.ContentDefinition[] definitions;
        definitions = definition_list.GetVector();

        s84.ctcode.dbnf.ContentDefinition[] functionDefinitions;

        int index;
        index = 0;

        while (index < Size(definitions)) {
            s84.ctcode.dbnf.ContentDefinition definition;
            definition = Element(definitions, index);

            if (definition.GetFunctionBody()) {
                functionDefinitions = Append(functionDefinitions, definition);
            }

            index = index + 1;
        }

        if(Size(functionDefinitions) > 0)
        {
            index = 0;

            while (index < Size(functionDefinitions)) {
                s84.ctcode.dbnf.ContentDefinition definition;
                definition = Element(functionDefinitions, index);

                if (!first_class_definition || index != 0) {
                    implementation.WriteLine("");
                }

                implementation.WriteLine(Concat("    ", Concat(GetType(definition.GetType()), Concat(" ", Concat(class_name, Concat("::", Concat(GenerateCallName(definition.GetName()), Concat("(", Concat(GenerateParameterList(definition.GetParameters()), ")")))))))));
                WriteCodeBlock(1, implementation, definition.GetFunctionBody(), true);

                index = index + 1;
            }
        }
    }

    function void WriteInstruction(int indent, OutputStream implementation, s84.ctcode.dbnf.Instruction instruction, bool add_newline_after_code_block) {
        if (instruction.GetCodeBlock()) {
            WriteCodeBlock(indent, implementation, instruction.GetCodeBlock(), add_newline_after_code_block);
        }

        if (instruction.GetRtn()) {
            WriteRtn(indent, implementation, instruction.GetRtn());
        }

        if (instruction.GetDeclaration()) {
            WriteDeclaration(indent, implementation, instruction.GetDeclaration());
        }

        if (instruction.GetAssignment()) {
            WriteAssignment(indent, implementation, instruction.GetAssignment());
        }

        if (instruction.GetCall()) {
            WriteCall(indent, implementation, instruction.GetCall());
        }

        if (instruction.GetConditional()) {
            WriteConditional(indent, implementation, instruction.GetConditional(), add_newline_after_code_block);
        }

        if (instruction.GetLoop()) {
            WriteLoop(indent, implementation, instruction.GetLoop(), add_newline_after_code_block);
        }
    }

    function void WriteCodeBlock(int indent, OutputStream implementation, s84.ctcode.dbnf.CodeBlock code_block, bool add_newline_after_code_block) {
        implementation.WriteLine(Concat(indentation(indent), "{"));

        s84.ctcode.dbnf.InstructionList instruction_list;
        instruction_list = code_block.GetInstructions();
        s84.ctcode.dbnf.Instruction[] instructions;
        instructions = instruction_list.GetVector();
        int index;
        index = 0;
        int last;
        last = Size(instructions) - 1;

        while (index < Size(instructions)) {
            WriteInstruction(indent + 1, implementation, Element(instructions, index), index != last);
            index = index + 1;
        }

        implementation.WriteLine(Concat(indentation(indent), "}"));

        if (add_newline_after_code_block) {
            implementation.WriteLine("");
        }
    }

    function void WriteConditional(int indent, OutputStream implementation, s84.ctcode.dbnf.Conditional conditional, bool add_newline_after_code_block) {
        implementation.WriteLine(Concat(indentation(indent), Concat("if (", Concat(GetRValueString(conditional.GetRvalue()), ")"))));

        if (conditional.GetElseTail()) {
            s84.ctcode.dbnf.ElseTail else_tail;
            else_tail = conditional.GetElseTail();
            WriteCodeBlock(indent, implementation, conditional.GetCodeBlock(), false);
            implementation.WriteLine(Concat(indentation(indent), "else"));
            WriteCodeBlock(indent, implementation, else_tail.GetCodeBlock(), add_newline_after_code_block);
        } else {
            WriteCodeBlock(indent, implementation, conditional.GetCodeBlock(), add_newline_after_code_block);
        }
    }

    function void WriteLoop(int indent, OutputStream implementation, s84.ctcode.dbnf.Loop loop, bool add_newline_after_code_block) {
        implementation.WriteLine(Concat(indentation(indent), Concat("while (", Concat(GetRValueString(loop.GetRvalue()), ")"))));
        WriteCodeBlock(indent, implementation, loop.GetCodeBlock(), add_newline_after_code_block);
    }

    function void WriteRtn(int indent, OutputStream implementation, s84.ctcode.dbnf.Return rtn) {
        implementation.WriteLine(Concat(indentation(indent), Concat("return ", Concat(GetRValueString(rtn.GetRvalue()), ";"))));
    }

    function void WriteDeclaration(int indent, OutputStream implementation, s84.ctcode.dbnf.Declaration declaration) {
        string assignment_suffix;
        assignment_suffix = "";

        if (declaration.GetAssignment()) {
            s84.ctcode.dbnf.DeclarationAssign assignment;
            assignment = declaration.GetAssignment();
            assignment_suffix = Concat(" = ", GetRValueString(assignment.GetRvalue()));
        }

        implementation.WriteLine(Concat(indentation(indent), Concat(GetVariableDefinition(declaration.GetType(), declaration.GetName()), Concat(assignment_suffix, ";"))));
    }

    function void WriteAssignment(int indent, OutputStream implementation, s84.ctcode.dbnf.Assignment assignment) {
        implementation.WriteLine(Concat(Indentation(indent), Concat(GenerateVariableName(assignment.GetLvalue()), Concat(" = ", Concat(GetRValueString(assignment.GetRvalue()), ";")))));
    }

    function void WriteCall(int indent, OutputStream implementation, s84.ctcode.dbnf.Call call) {
        implementation.WriteLine(Concat(Indentation(indent), Concat(GetCallString(call), ";")));
    }

    function string GetExdefHeaderString(s84.ctcode.dbnf.QualfiedName exdef_name) {
        return Concat(exdef_name.UnParse(), ".hpp");
    }

    function string Indentation(int indent) {
        string result;
        result = "";

        while (indent > 0) {
            indent = indent - 1;
            result = Concat(result, "    ");
        }

        return result;
    }

    function string GetRValueSingleString(s84.ctcode.dbnf.RValueSingle rValueSingle) {
        return Concat(GetRValueSingleUnaryString(rValueSingle), GetRValueSingleCoreString(rValueSingle));
    }

    function string GetRValueSingleUnaryString(s84.ctcode.dbnf.RValueSingle rValueSingle) {
        if (rValueSingle.GetUnaryOperator()) {
            s84.ctcode.dbnf.UnaryOperator unaryOperator;
            unaryOperator = rValueSingle.GetUnaryOperator();

            if (unaryOperator.GetNegation()) {
                return "!";
            }

            return "/*WARNING UnaryOperator FALL THROUGH*/";
        } else {
            return "";
        }
    }

    function string GetCallString(s84.ctcode.dbnf.Call call) {
        string result;
        result = "";

        if (call.GetVariable()) {
            result = Concat(result, Concat(GenerateVariableName(call.GetVariable()), "->"));
        }

        result = Concat(result, Concat(GenerateCallName(call.GetFunction()), Concat("(", Concat(GenerateCallingParameterList(call.GetParameters()), ")"))));
        return result;
    }

    function string GetRValueSingleCoreString(s84.ctcode.dbnf.RValueSingle rValueSingle) {
        if (rValueSingle.GetCall()) {
            return GetCallString(rValueSingle.GetCall());
        }

        if (rValueSingle.GetDecimalLiteral()) {
            return rValueSingle.UnParse();
        }

        if (rValueSingle.GetIntegerLiteral()) {
            return rValueSingle.UnParse();
        }

        if (rValueSingle.GetBooleanLiteral()) {
            return rValueSingle.UnParse();
        }

        if (rValueSingle.GetVariable()) {
            return GenerateVariableName(rValueSingle.GetVariable());
        }

        if (rValueSingle.GetStringLiteral()) {
            return rValueSingle.UnParse();
        }

        return "/*WARNING RValueSingle FALL THROUGH*/";
    }

    function string GetOperator(s84.ctcode.dbnf.BinaryOperator op) {
        if (op.GetAddition()) {
            return "+";
        }

        if (op.GetSubtraction()) {
            return "-";
        }

        if (op.GetLessThan()) {
            return "<";
        }

        if (op.GetLessThanEq()) {
            return "<=";
        }

        if (op.GetEquality()) {
            return "==";
        }

        if (op.GetNotEquality()) {
            return "!=";
        }

        if (op.GetGreaterThanEq()) {
            return ">=";
        }

        if (op.GetGreaterThan()) {
            return ">";
        }

        if (op.GetOrOp()) {
            return "||";
        }

        if (op.GetAndOp()) {
            return "&&";
        }

        return "/*WARNING BinaryOperator FALL THROUGH*/";
    }

    function string GetRValueTail(s84.ctcode.dbnf.RValueTail rValueTail) {
        if (rValueTail) {
            s84.ctcode.dbnf.BinaryOperator op;
            op = rValueTail.GetBinaryOperator();

            return Concat(" ", Concat(GetOperator(op), Concat(" ", Concat(GetRValueSingleString(rValueTail.GetValue()), GetRValueTail(rValueTail.GetTail())))));
        }

        return "";
    }

    function string GetRValueString(s84.ctcode.dbnf.RValue rValue) {
        return Concat(GetRValueSingleString(rValue.GetValue()), GetRValueTail(rValue.GetTail()));
    }

    function string GetVariableDefinition(s84.ctcode.dbnf.ValueType type, s84.ctcode.dbnf.Name name) {
        return Concat(GetType(type), Concat(" ", GenerateVariableName(name)));
    }

    function string GetParameterString(s84.ctcode.dbnf.ParameterListDef parameter) {
        return GetVariableDefinition(parameter.GetType(), parameter.GetName());
    }

    function string GenerateParameterListTail(s84.ctcode.dbnf.ParameterListDef parameters) {
        if (parameters) {
            return Concat(", ", Concat(GetParameterString(parameters), GenerateParameterListTail(parameters.GetParameterTail())));
        }

        return "";
    }

    function string GenerateParameterList(s84.ctcode.dbnf.ParameterListDef parameters) {
        if (parameters) {
            return Concat(GetParameterString(parameters), GenerateParameterListTail(parameters.GetParameterTail()));
        } else {
            return "";
        }
    }

    function string GenerateCallingParameterList(s84.ctcode.dbnf.ParameterList parameters) {
        if (parameters) {
            return Concat(GetCallingParameterString(parameters), GenerateCallingParameterListTail(parameters.GetParameterTail()));
        } else {
            return "";
        }
    }

    function string GetCallingParameterString(s84.ctcode.dbnf.ParameterList parameter) {
        if (parameter) {
            return GetRValueString(parameter.GetRvalue());
        }
        else {
            return "";
        }
    }

    function string GenerateCallingParameterListTail(s84.ctcode.dbnf.ParameterList parameters) {
        if (parameters) {
            return Concat(", ", Concat(GetCallingParameterString(parameters), GenerateCallingParameterListTail(parameters.GetParameterTail())));
        }

        return "";
    }

    function string GetType(s84.ctcode.dbnf.ValueType value_type) {
        if (value_type.GetDimensionalType()) {
            return GetDimensionalType(value_type.GetDimensionalType());
        }

        if (value_type.GetSingletonType()) {
            return GetSingletonType(value_type.GetSingletonType());
        }

        return "/*WARNING ValueType FALL THROUGH*/";
    }

    function string GetDimensionalType(s84.ctcode.dbnf.DimensionalType dimensional_type) {
        s84.ctcode.dbnf.DimensionalNoteList dimensional_note_list;
        dimensional_note_list = dimensional_type.GetDimensionalNote();
        int dimensionalNotes;
        dimensionalNotes = Size(dimensional_note_list.GetVector());
        return Concat(GetDimensionalPrefix(dimensionalNotes), Concat(GetSingletonType(dimensional_type.GetSingletonType()), GetDimensionalSuffix(dimensionalNotes)));
    }

    function string GetDimensionalPrefix(int dimensionalNotes) {
        string dimensionalPrefix;
        dimensionalPrefix = "";

        while (dimensionalNotes > 0) {
            dimensionalPrefix = Concat(dimensionalPrefix, "std::vector<");
            dimensionalNotes = dimensionalNotes - 1;
        }

        return dimensionalPrefix;
    }

    function string GetDimensionalSuffix(int dimensionalNotes) {
        string dimensionalSuffix;
        dimensionalSuffix = "";

        while (dimensionalNotes > 0) {
            dimensionalSuffix = Concat(dimensionalSuffix, ">");
            dimensionalNotes = dimensionalNotes - 1;
        }

        return dimensionalSuffix;
    }

    function string GetSingletonType(s84.ctcode.dbnf.SingletonType singleton_type) {
        if (singleton_type.GetDefinedType()) {
            s84.ctcode.dbnf.DefinedType defined_type;
            defined_type = singleton_type.GetDefinedType();
            s84.ctcode.dbnf.QualfiedName defined_type_name;
            defined_type_name = defined_type.GetName();
            return GetDefinedType(defined_type_name);
        }

        if (singleton_type.GetPrimativeType()) {
            s84.ctcode.dbnf.PrimativeType primative_type;
            primative_type = singleton_type.GetPrimativeType();
            string primative_type_string;
            primative_type_string = primative_type.UnParse();

            if (primative_type_string == "int") {
                return "int";
            }

            if (primative_type_string == "string") {
                return "std::string";
            }

            if (primative_type_string == "bool") {
                return "bool";
            }

            if (primative_type_string == "float") {
                return "float";
            }

            if (primative_type_string == "void") {
                return "void";
            }

            return "/*WARNING PrimativeType FALL THROUGH*/";
        }

        return "/*WARNING SingletonType FALL THROUGH*/";
    }

    function string GetDefinedType(s84.ctcode.dbnf.QualfiedName qualified_name) {
        s84.ctcode.dbnf.NameTail name_tail;
        name_tail = qualified_name.GetTail();
        s84.ctcode.dbnf.Name name;
        name = qualified_name.GetName();
        string result;
        result = "";

        if (name_tail)
        {
            string name_string;
            name_string = name.UnParse();
            string lower_name_string;
            lower_name_string = ToLower(name_string);
            string name_tail_string;
            name_tail_string = GetDefinedTypeTail(name_tail);
            result = Concat(result, lower_name_string);
            result = Concat(result, name_tail_string);
        } else {
            string type_suffix;
            type_suffix = "*";
            string class_name;
            class_name = GenerateClassName(name);
            result = Concat(result, class_name);
            result = Concat(result, type_suffix);
        }

       return result;
    }

    function string GetDefinedTypeTail(s84.ctcode.dbnf.NameTail name_tail)
    {
        s84.ctcode.dbnf.NameTail name_tail_tail;
        name_tail_tail = name_tail.GetTail();
        s84.ctcode.dbnf.Name name;
        name = name_tail.GetName();
        string result;
        result = "::";

        if (name_tail_tail)
        {
            string name_string;
            name_string = name.UnParse();
            string lower_name_string;
            lower_name_string = ToLower(name_string);
            string name_tail_tail_string;
            name_tail_tail_string = GetDefinedTypeTail(name_tail_tail);
            result = Concat(result, lower_name_string);
            result = Concat(result, name_tail_tail_string);
        } else {
            string type_suffix;
            type_suffix = "*";
            string class_name;
            class_name = GenerateClassName(name);
            result = Concat(result, class_name);
            result = Concat(result, type_suffix);
        }

       return result;
    }

    function string GenerateClassName(s84.ctcode.dbnf.Name name_node)
    {
        if (name_node)
        {
            string name_node_string;
            name_node_string = name_node.UnParse();
            return SnakeCaseToCamelCase(name_node_string);
        }
        else
        {
            return "";
        }
    }

    function string GenerateVariableName(s84.ctcode.dbnf.Name name_node)
    {
        if (name_node)
        {
            string name_node_string;
            name_node_string = name_node.UnParse();
            return CamelCaseToSnakeCase(name_node_string);
        }
        else
        {
            return "";
        }
    }

    function string GenerateCallName(s84.ctcode.dbnf.Name name_node)
    {
        if (name_node)
        {
            string name_node_string;
            name_node_string = name_node.UnParse();
            return SnakeCaseToCamelCase(name_node_string);
        }
        else
        {
            return "";
        }
    }

    function string[] TokenizeBaseName(string name)
    {
        string[] base_name_tokens;
        string current_token;
        current_token = "";
        int index;
        index = 0;

        while (index < Length(name)) {
            string character;
            character = At(name, index);

            if (character == ".") {
                base_name_tokens = Append(base_name_tokens, current_token);
                current_token = "";
            } else {
                current_token = Concat(current_token, character);
            }

            index = index + 1;
        }

        return base_name_tokens;
    }

    function string GenerateGuardName(string[] base_name_tokens)
    {
        string guard_name;
        guard_name = "";
        string ctcode_guard;
        ctcode_guard = "CTCODE_H";
        string namespace_seperator;
        namespace_seperator = "_";
        int index;
        index = 0;

        while (index < Size(base_name_tokens)) {
            string namespace_token;
            namespace_token = Element(base_name_tokens, index);
            string upper_namespace_token;
            upper_namespace_token = ToUpper(namespace_token);
            guard_name = Concat(guard_name, upper_namespace_token);
            guard_name = Concat(guard_name, namespace_seperator);
            index = index + 1;
        }

        guard_name = Concat(guard_name, ctcode_guard);
        return guard_name;
    }

    function string SnakeCaseToCamelCase(string snake_case)
    {
        bool capitalize_this_letter;
        capitalize_this_letter = true;
        string camel_case;
        camel_case = "";
        int index;
        index = 0;

        while (index < Length(snake_case)) {
            string source_character;
            source_character = At(snake_case, index);

            if (source_character == "_") {
                capitalize_this_letter = true;
            } else {
                if (capitalize_this_letter == true)
                {
                    string upper_character;
                    upper_character = CharacterToUpper(source_character);
                    capitalize_this_letter = false;
                    camel_case = Concat(camel_case, upper_character);
                } else {
                    capitalize_this_letter = false;
                    camel_case = Concat(camel_case, source_character);
                }
            }

            index = index + 1;
        }

        return camel_case;
    }

    function string CamelCaseToSnakeCase(string camel_case) {
        string delimiter;
        delimiter = "_";
        bool in_abbreviation;
        in_abbreviation = true;
        string snake_case;
        snake_case = "";
        int index;
        index = 0;

        while (index < Length(camel_case)) {
            string source_character;
            source_character = At(camel_case, index);
            string lower_character;
            lower_character = CharacterToLower(source_character);

            if (IsUpper(source_character) || IsDigit(source_character)) {
                bool is_first_character;
                is_first_character = Length(snake_case) == 0;

                if (!in_abbreviation && !is_first_character) {
                    snake_case = Concat(snake_case, delimiter);
                }

                snake_case = Concat(snake_case, lower_character);
                in_abbreviation = true;
            } else {
                if (source_character == delimiter) {
                    snake_case = Concat(snake_case, delimiter);
                    in_abbreviation = true;
                } else {
                    snake_case = Concat(snake_case, lower_character);
                    in_abbreviation = false;
                }
            }

            index = index + 1;
        }

        return snake_case;
    }

    function bool IsUpper(string character) {
        bool result;
        result = false;
        result = result || character == "A";
        result = result || character == "B";
        result = result || character == "C";
        result = result || character == "D";
        result = result || character == "E";
        result = result || character == "F";
        result = result || character == "G";
        result = result || character == "H";
        result = result || character == "I";
        result = result || character == "J";
        result = result || character == "K";
        result = result || character == "L";
        result = result || character == "M";
        result = result || character == "N";
        result = result || character == "O";
        result = result || character == "P";
        result = result || character == "Q";
        result = result || character == "R";
        result = result || character == "S";
        result = result || character == "T";
        result = result || character == "U";
        result = result || character == "V";
        result = result || character == "W";
        result = result || character == "X";
        result = result || character == "Y";
        result = result || character == "Z";
        return result;
    }

    function bool IsDigit(string character) {
        bool result;
        result = false;
        result = result || character == "0";
        result = result || character == "1";
        result = result || character == "2";
        result = result || character == "3";
        result = result || character == "4";
        result = result || character == "5";
        result = result || character == "6";
        result = result || character == "7";
        result = result || character == "8";
        result = result || character == "9";
        return result;
    }

    function string ToLower(string input) {
        int index;
        index = 0;
        string result;
        result = "";

        while (index < Length(input)) {
            string character;
            character = At(input, index);
            string lowerCharacter;
            lowerCharacter = CharacterToLower(character);
            result = Concat(result, lowerCharacter);
            index = index + 1;
        }

        return result;
    }

    function string CharacterToLower(string input) {
        if (input == "A") {
            return "a";
        }

        if (input == "B") {
            return "b";
        }

        if (input == "C") {
            return "c";
        }

        if (input == "D") {
            return "d";
        }

        if (input == "E") {
            return "e";
        }

        if (input == "F") {
            return "f";
        }

        if (input == "G") {
            return "g";
        }

        if (input == "H") {
            return "h";
        }

        if (input == "I") {
            return "i";
        }

        if (input == "J") {
            return "j";
        }

        if (input == "K") {
            return "k";
        }

        if (input == "L") {
            return "l";
        }

        if (input == "M") {
            return "m";
        }

        if (input == "N") {
            return "n";
        }

        if (input == "O") {
            return "o";
        }

        if (input == "P") {
            return "p";
        }

        if (input == "Q") {
            return "q";
        }

        if (input == "R") {
            return "r";
        }

        if (input == "S") {
            return "s";
        }

        if (input == "T") {
            return "t";
        }

        if (input == "U") {
            return "u";
        }

        if (input == "V") {
            return "v";
        }

        if (input == "W") {
            return "w";
        }

        if (input == "X") {
            return "x";
        }

        if (input == "Y") {
            return "y";
        }

        if (input == "Z") {
            return "z";
        }

        return input;
    }

    function string ToUpper(string input) {
        int index;
        index = 0;
        string result;
        result = "";

        while (index < Length(input)) {
            string character;
            character = At(input, index);
            string upperCharacter;
            upperCharacter = CharacterToUpper(character);
            result = Concat(result, upperCharacter);
            index = index + 1;
        }

        return result;
    }

    function string CharacterToUpper(string input) {
        if (input == "a") {
            return "A";
        }

        if (input == "b") {
            return "B";
        }

        if (input == "c") {
            return "C";
        }

        if (input == "d") {
            return "D";
        }

        if (input == "e") {
            return "E";
        }

        if (input == "f") {
            return "F";
        }

        if (input == "g") {
            return "G";
        }

        if (input == "h") {
            return "H";
        }

        if (input == "i") {
            return "I";
        }

        if (input == "j") {
            return "J";
        }

        if (input == "k") {
            return "K";
        }

        if (input == "l") {
            return "L";
        }

        if (input == "m") {
            return "M";
        }

        if (input == "n") {
            return "N";
        }

        if (input == "o") {
            return "O";
        }

        if (input == "p") {
            return "P";
        }

        if (input == "q") {
            return "Q";
        }

        if (input == "r") {
            return "R";
        }

        if (input == "s") {
            return "S";
        }

        if (input == "t") {
            return "T";
        }

        if (input == "u") {
            return "U";
        }

        if (input == "v") {
            return "V";
        }

        if (input == "w") {
            return "W";
        }

        if (input == "x") {
            return "X";
        }

        if (input == "y") {
            return "Y";
        }

        if (input == "z") {
            return "Z";
        }

        return input;
    }
}