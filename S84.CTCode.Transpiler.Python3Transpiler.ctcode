exdef S84.CTCode.dbnf.ctcode;
exdef S84.CTCode.System.ctcode;
exdef S84.CTCode.Transpiler.StandardStructure.ctcode;
exdef S84.CTCode.Transpiler.StringHelper.ctcode;

class Python3Transpiler implements S84.CTCode.Transpiler.StandardStructure.ctcode.TargetSpecificFunctions {
    S84.CTCode.System.ctcode.System system;
    S84.CTCode.dbnf.ctcode.CTCodeFile c_t_code_file;
    string base_name;

    S84.CTCode.System.ctcode.OutputStream logger;

    S84.CTCode.Transpiler.StringHelper.ctcode.StringHelper string_helper;

    function void Initialize() { myself.string_helper = new S84.CTCode.Transpiler.StringHelper.ctcode.StringHelper;}
    function void SetSystem(S84.CTCode.System.ctcode.System system) { myself.system = system; }
    function void SetCTCodeFile(S84.CTCode.dbnf.ctcode.CTCodeFile c_t_code_file) { myself.c_t_code_file = c_t_code_file; }
    function void SetBaseName(string base_name) { myself.base_name = base_name; }
    function void SetLogger(S84.CTCode.System.ctcode.OutputStream logger) { myself.logger = logger; }

    string[] imports;
    string current_interface;
    string[] interface_definitions;
    string current_class;
    string[] class_definitions;
    string[] class_init;
    string[] class_functions;

    function int GetBaseIndentation() { return 1; }

    function string GetCallName(string name)
    {
        return myself.string_helper.SnakeCaseToCamelCase(name);
    }

    function string GetVariableName(string name)
    {
        string value = myself.string_helper.CamelCaseToSnakeCase(name);

        if (value == "myself") {
            return "self";
        }

        return value;
    }

    function string GetVariableChain(string[] name_parts) {
        string delimiter = ".";
        string first_name = Element(name_parts, 0);
        string result = myself.GetVariableName(first_name);
        int name_parts_index = 1;

        while (name_parts_index < size(name_parts)) {
            string name = Element(name_parts, name_parts_index);
            result = Concat(Concat(result, delimiter), myself.GetVariableName(name));
            name_parts_index = name_parts_index + 1;
        }

        return result;
    }

    function string ConvertCall(string[] name_chain, string[] parameters) {
        string result = Element(name_chain, 0);
        int name_chain_index = 1;

        while (name_chain_index < Size(name_chain)) {
            string name_part = Element(name_chain, name_chain_index);
            result = Concat(Concat(result, "."), name_part);
            name_chain_index = name_chain_index + 1;
        }

        result = Concat(result, "(");

        if (Size(parameters) > 0) {
            result = Concat(result, Element(parameters, 0));
            int parameters_index = 1;

            while (parameters_index < Size(parameters)) {
                string parameter = Element(parameters, parameters_index);
                result = Concat(result, ",");
                result = Concat(result, parameter);
                parameters_index = parameters_index + 1;
            }
        }

        result = Concat(result, ")");
        return result;
    }

    function string ConvertAllocate(string type) {
        return Concat(type, "()");
    }

    function string ConvertByte(string high, string low) {
        return Concat(Concat("0x", high), low);
    }

    function string ConvertDecimal(string decimal) {
        return decimal;
    }

    function string ConvertNumber(string number) {
        return number;
    }

    function string ConvertBoolean(string boolean) {
        if (boolean == "true") {
            return "True";
        }

        if (boolean == "false") {
            return "False";
        }

        return "";
    }

    function string ConvertVariable(string variable) {
        return variable;
    }

    function string ConvertString(string literal) {
        return Concat(Concat("\"", literal), "\"");
    }

    function string UnaryOperator(string op, string r_value) {
        if (op == "!") {
            return Concat("not ", r_value);
        }

        return r_value;
    }

    function string BinaryOperator(string op, string r_value_l, string r_value_r) {
        if (op == "+") {
            return Concat(Concat(r_value_l, "+"), r_value_r);
        }

        if (op == "-") {
            return Concat(Concat(r_value_l, "-"), r_value_r);
        }

        if (op == "<=") {
            return Concat(Concat(r_value_l, "<="), r_value_r);
        }

        if (op == ">=") {
            return Concat(Concat(r_value_l, ">="), r_value_r);
        }

        if (op == "==") {
            return Concat(Concat(r_value_l, "=="), r_value_r);
        }

        if (op == "!=") {
            return Concat(Concat(r_value_l, "!="), r_value_r);
        }

        if (op == "<") {
            return Concat(Concat(r_value_l, "<"), r_value_r);
        }

        if (op == ">") {
            return Concat(Concat(r_value_l, ">"), r_value_r);
        }

        if (op == "||") {
            return Concat(Concat(r_value_l, " or "), r_value_r);
        }

        if (op == "&&") {
            return Concat(Concat(r_value_l, " and "), r_value_r);
        }

        return "";
    }

    function string GetTypeName(string name)
    {
        return myself.string_helper.SnakeCaseToCamelCase(name);
    }

    function string GetDimensionalType(string singleton_type, int dimensions) {
        string result = singleton_type;

        while (dimensions > 0) {
            result = Concat(Concat("list[", result), "]");
            dimensions = dimensions - 1;
        }

        return result;
    }

    function string GetMapType(string singleton_type) {
        return Concat(Concat("dict[str, ", singleton_type), "]");
    }

    function string GetPrimativeType(string c_t_type) {
        if (c_t_type == "int") {
            return "int";
        }

        if (c_t_type == "string") {
            return "str";
        }

        if (c_t_type == "bool") {
            return "bool";
        }

        if (c_t_type == "float") {
            return "float";
        }

        if (c_t_type == "void") {
            return "None";
        }

        return "";
    }

    function string GetDefinedType(string c_t_type) {
        return c_t_type;
    }

    function string GetQualifiedTypeName(string[] name_parts) {
        string package_delimiter = "_";
        string package_name_delimiter = ".";
        int name_parts_index = Size(name_parts) - 1;
        int last_package_index = Size(name_parts) - 2;
        string type_part = Element(name_parts, name_parts_index);
        string result = myself.GetTypeName(type_part);

        if (name_parts_index > 0) {
            result = Concat(package_name_delimiter, result);

            while (name_parts_index > 0) {
                name_parts_index = name_parts_index - 1;
                string name_part = Element(name_parts, name_parts_index);

                if (name_parts_index != last_package_index) {
                    result = Concat(package_delimiter, result);
                }

                result = Concat(name_part, result);
            }
        }

        return result;
    }

    function void BeginProcessingCTCodeFile() {
        ClearList(myself.imports);
        myself.current_interface = "";
        ClearList(myself.interface_definitions);
        myself.current_class = "";
        ClearList(myself.class_definitions);
        ClearList(myself.class_init);
        ClearList(myself.class_functions);
    }

    function void ProcessExdef(string exdef) {
        Append(myself.imports, Concat("import ", myself.string_helper.StripDot(exdef)));
    }

    function void ProcessUnmanagedType(string unmanaged_type) {
        int noop = 0;
    }

    function void BeginProcessingInterface(string interface_name) {
        myself.current_interface = interface_name;
        Append(myself.interface_definitions, Concat(Concat("class ", interface_name), ":"));
    }

    function void ProcessInterfaceFunctionDeclaration(string return_type, string function_name, S84.CTCode.Transpiler.StandardStructure.ctcode.ParameterDeclaration[] parameters) {
        Append(myself.interface_definitions, Concat(Concat(Concat(Concat(Concat(Concat(myself.string_helper.Indentation(1), "def "), function_name), myself.MakeParametersString(myself.current_interface, parameters)), " -> '"), return_type), "': pass"));
    }

    function void FinishProcessingInterface(string interface_name) {
        Append(myself.interface_definitions, "");
        myself.current_interface = "";
    }

    function void BeginProcessingClass(string class_name, string implementing) {
        myself.current_class = class_name;

        if (implementing == "") {
            Append(myself.class_definitions, Concat(Concat("class ", class_name), ":"));
        } else {
            Append(myself.class_definitions, Concat(Concat(Concat(Concat("class ", class_name), "("), implementing), "):"));
        }

        ClearList(myself.class_init);
        ClearList(myself.class_functions);

        Append(myself.class_init, Concat(Concat(Concat(myself.string_helper.Indentation(1), "def __init__(self: '"), class_name), "'):"));
    }

    function void BeginProcessingClassFunctionDefinition(string return_type, string function_name, S84.CTCode.Transpiler.StandardStructure.ctcode.ParameterDeclaration[] parameters) {
        Append(myself.class_functions, Concat(Concat(Concat(Concat(Concat(Concat(myself.string_helper.Indentation(1), "def "), function_name), myself.MakeParametersString(myself.current_class, parameters)), " -> '"), return_type), "':"));
    }

    function void BeginProcessCodeBlock(int indent) {
        int noop = 0;
    }

    function void FinishProcessCodeBlock(int indent) {
        int noop = 0;
    }

    function void BeginProcessConditional(int indent, string r_value) {
        Append(myself.class_functions, Concat(Concat(Concat(myself.string_helper.Indentation(indent), "if "), r_value), ":"));
    }

    function void ProcessElse(int indent) {
        Append(myself.class_functions, Concat(myself.string_helper.Indentation(indent), "else:"));
    }

    function void FinishProcessConditional(int indent, string r_value) {
        int noop = 0;
    }

    function void BeginProcessLoop(int indent, string r_value) {
        Append(myself.class_functions, Concat(Concat(Concat(myself.string_helper.Indentation(indent), "while "), r_value), ":"));
    }

    function void FinishProcessLoop(int indent, string r_value) {
        int noop = 0;
    }

    function void ProcessRtn(int indent, string r_value) {
        Append(myself.class_functions, Concat(Concat(myself.string_helper.Indentation(indent), "return "), r_value));
    }

    function void ProcessDeclaration(int indent, string type, string l_value, string r_value) {
        if (r_value == "") {
            r_value = myself.GetDefault(type);
        }

        Append(myself.class_functions, Concat(Concat(Concat(Concat(Concat(myself.string_helper.Indentation(indent), l_value), ": '"), type), "' = "), r_value));
    }

    function void ProcessAssignment(int indent, string l_value, string r_value) {
        Append(myself.class_functions, Concat(Concat(Concat(myself.string_helper.Indentation(indent), l_value), " = "), r_value));
    }

    function void ProcessCall(int indent, string call) {
        Append(myself.class_functions, Concat(myself.string_helper.Indentation(indent), call));
    }

    function void FinishProcessingClassFunctionDefinition(string return_type, string function_name, S84.CTCode.Transpiler.StandardStructure.ctcode.ParameterDeclaration[] parameters) {
        Append(myself.class_functions, "");
    }

    function void ProcessClassMemberDeclaration(string member_type, string member_name) {
        Append(myself.class_init, Concat(Concat(Concat(Concat(Concat(Concat(myself.string_helper.Indentation(2), "self."), member_name), ": "), member_type), " = "), myself.GetDefault(member_type)));
    }

    function void FinishProcessingClass(string class_name, string implementing) {
        if (Size(myself.class_init) == 1) {
            Append(myself.class_init, Concat(myself.string_helper.Indentation(2), "pass"));
        }

        int class_init_index = 0;

        while (class_init_index < Size(myself.class_init)) {
            string line = Element(myself.class_init, class_init_index);
            Append(myself.class_definitions, line);
            class_init_index = class_init_index + 1;
        }
        
        Append(myself.class_definitions, "");

        int class_functions_index = 0;

        while (class_functions_index < Size(myself.class_functions)) {
            string line = Element(myself.class_functions, class_functions_index);
            Append(myself.class_definitions, line);
            class_functions_index = class_functions_index + 1;
        }

        myself.current_class = "";
    }

    function void WriteCommonFunctions(S84.CTCode.System.ctcode.OutputStream destination_file) {
        destination_file.WriteLine("def ClearList(input: list) -> None: input.clear()");
        destination_file.WriteLine("def Size(input: list) -> int: return len(input)");
        destination_file.WriteLine("def Element(input: list, element: int ) -> any: return input[element]");
        destination_file.WriteLine("def Append(input: list, element: any) -> None: input.append(element)");
        destination_file.WriteLine("def ClearMap(input: dict) -> None: input.clear()");
        destination_file.WriteLine("def SetKV(input: dict, key: str, element: any) -> None: input[key] = element");
        destination_file.WriteLine("def Keys(input: dict) -> list[str]:");
        destination_file.WriteLine("    result: list[str] = []");
        destination_file.WriteLine("    for key in input.keys():");
        destination_file.WriteLine("        result.append(key)");
        destination_file.WriteLine("    return result");
        destination_file.WriteLine("def HasKV(input: dict, key: str) -> bool: return key in input");
        destination_file.WriteLine("def GetKV(input: dict, key: str) -> any: return input[key]");
        destination_file.WriteLine("def Length(input: str) -> int: return len(input)");
        destination_file.WriteLine("def At(input: str, index: int) -> str: return input[index:index+1]");
        destination_file.WriteLine("def IntAt(input: str, index: int) -> int: return ord(input[index:index+1])");
        destination_file.WriteLine("def Concat(left: str, right: str) -> str: return left + right");
    }

    function void FinishProcessingCTCodeFile() {
        string destination_file_name = Concat(myself.string_helper.StripDot(myself.base_name), ".py");
        S84.CTCode.System.ctcode.OutputStream destination_file = myself.system.OpenFileWriter(destination_file_name);

        if (Size(myself.imports) > 0) {
            myself.string_helper.WriteLines(destination_file, myself.imports);
            destination_file.WriteLine("");
        }

        myself.WriteCommonFunctions(destination_file);
        destination_file.WriteLine("");
        myself.string_helper.WriteLines(destination_file, myself.interface_definitions);
        myself.string_helper.WriteLines(destination_file, myself.class_definitions);
    }

    function string GetDefault(string python_type) {
        if (python_type == "int") {
            return "0";
        }

        if (python_type == "str") {
            return "\"\"";
        }

        if (python_type == "bool") {
            return "False";
        }

        if (python_type == "float") {
            return "0.0";
        }

        if (python_type == "None") {
            return "None";
        }

        if (myself.string_helper.BeginsWith("dict[str", python_type)) {
            return "{}";
        }

        if (myself.string_helper.BeginsWith("list[", python_type)) {
            return "[]";
        }

        return "None";
    }

    function string MakeParametersString(string self_type, S84.CTCode.Transpiler.StandardStructure.ctcode.ParameterDeclaration[] parameters) {
        string result = Concat(Concat("(self: '", self_type), "'");
        int parameters_index = 0;

        while (parameters_index < Size(parameters)) {
            S84.CTCode.Transpiler.StandardStructure.ctcode.ParameterDeclaration parameter = Element(parameters, parameters_index);
            result = Concat(result, ",");
            result = Concat(Concat(Concat(Concat(result, parameter.GetName()), ": '"), parameter.GetType()), "'");
            parameters_index = parameters_index + 1;
        }

        result = Concat(result, ")");
        return result;
    }
}