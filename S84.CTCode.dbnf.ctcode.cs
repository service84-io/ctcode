namespace S84.CTCode.dbnf.ctcode;

public class StringParser
{
    public StringParser()
    {
    }

    public bool? ParseSingleSave(LengthString? index,string? value,StringResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LargeString? index_data = index?.GetData();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        String? instance = new String();
        int? value_length = Length(value);
        if (AsBoolean(value_length>index?.GetLength()))
        {
            result?.SetResult(false);
            return false;
        }
        int? offset_index = 0;
        while (AsBoolean(offset_index<value_length))
        {
            if (AsBoolean(index_data?.GetAt(index?.GetStart()+offset_index)!=At(value,offset_index)))
            {
                result?.SetResult(false);
                return false;
            }
            offset_index = offset_index+1;
        }
        index?.SetStart(index?.GetStart()+value_length);
        index?.SetLength(index?.GetLength()-value_length);
        consumed_string?.SetLength(index?.GetStart()-index_start);
        instance?.SetLengthString(consumed_string);
        result?.SetValue(instance);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseSingle(LengthString? index,string? value)
    {
        StringResult? result = new StringResult();
        return this?.ParseSingleSave(index,value,result);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class StringResult
{
    private String? value;
    private bool? result;

    public StringResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(String? new_value)
    {
        this.value = new_value;
    }

    public String? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class StringListResult
{
    private List<String?>? value;
    private bool? result;

    public StringListResult()
    {
        this.value = new List<String?>();
        this.result = false;
    }

    public void SetValue(List<String?>? new_value)
    {
        this.value = new_value;
    }

    public List<String?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class String
{
    private LengthString? length_string;

    public String()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CharacterParser
{
    public CharacterParser()
    {
    }

    public bool? ParseSingle(LengthString? index,int? value)
    {
        if (AsBoolean(0==index?.GetLength()))
        {
            return false;
        }
        LargeString? index_data = index?.GetData();
        int? current_character = index_data?.GetIntAt(index?.GetStart());
        if (AsBoolean(current_character==value))
        {
            index?.SetStart(index?.GetStart()+1);
            index?.SetLength(index?.GetLength()-1);
            return true;
        }
        return false;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CharacterResult
{
    private Character? value;
    private bool? result;

    public CharacterResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Character? new_value)
    {
        this.value = new_value;
    }

    public Character? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CharacterListResult
{
    private List<Character?>? value;
    private bool? result;

    public CharacterListResult()
    {
        this.value = new List<Character?>();
        this.result = false;
    }

    public void SetValue(List<Character?>? new_value)
    {
        this.value = new_value;
    }

    public List<Character?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Character
{
    private LengthString? length_string;

    public Character()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CharacterRangeParser
{
    public CharacterRangeParser()
    {
    }

    public bool? ParseSingle(LengthString? index,int? low_value,int? high_value)
    {
        if (AsBoolean(0==index?.GetLength()))
        {
            return false;
        }
        LargeString? index_data = index?.GetData();
        int? current_character = index_data?.GetIntAt(index?.GetStart());
        if (AsBoolean(AsBoolean(low_value<=current_character)&&AsBoolean(current_character<=high_value)))
        {
            index?.SetStart(index?.GetStart()+1);
            index?.SetLength(index?.GetLength()-1);
            return true;
        }
        return false;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CharacterRangeResult
{
    private CharacterRange? value;
    private bool? result;

    public CharacterRangeResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(CharacterRange? new_value)
    {
        this.value = new_value;
    }

    public CharacterRange? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CharacterRangeListResult
{
    private List<CharacterRange?>? value;
    private bool? result;

    public CharacterRangeListResult()
    {
        this.value = new List<CharacterRange?>();
        this.result = false;
    }

    public void SetValue(List<CharacterRange?>? new_value)
    {
        this.value = new_value;
    }

    public List<CharacterRange?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CharacterRange
{
    private LengthString? length_string;

    public CharacterRange()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ParserNetwork
{
    private CTCodeFileParser? c_t_code_file_parser_field;
    private ExternalDefinitionParser? external_definition_parser_field;
    private UnmanagedTypeParser? unmanaged_type_parser_field;
    private DefinitionParser? definition_parser_field;
    private InterfaceDefParser? interface_def_parser_field;
    private ClassDefParser? class_def_parser_field;
    private ImplementationSpecParser? implementation_spec_parser_field;
    private ContentDeclarationParser? content_declaration_parser_field;
    private ContentDefinitionParser? content_definition_parser_field;
    private PrimativeTypeParser? primative_type_parser_field;
    private DefinedTypeParser? defined_type_parser_field;
    private SingletonTypeParser? singleton_type_parser_field;
    private DimensionalNoteParser? dimensional_note_parser_field;
    private DimensionalTypeParser? dimensional_type_parser_field;
    private MapNoteParser? map_note_parser_field;
    private MapTypeParser? map_type_parser_field;
    private ValueTypeParser? value_type_parser_field;
    private ParameterListDefParser? parameter_list_def_parser_field;
    private ParameterListParser? parameter_list_parser_field;
    private CodeBlockParser? code_block_parser_field;
    private DeclarationAssignParser? declaration_assign_parser_field;
    private DeclarationParser? declaration_parser_field;
    private AssignmentParser? assignment_parser_field;
    private ReturnParser? return_parser_field;
    private ElseTailParser? else_tail_parser_field;
    private ConditionalParser? conditional_parser_field;
    private LoopParser? loop_parser_field;
    private CallParser? call_parser_field;
    private AllocateParser? allocate_parser_field;
    private InstructionParser? instruction_parser_field;
    private RValueSingleParser? r_value_single_parser_field;
    private RValueTailParser? r_value_tail_parser_field;
    private RValueParser? r_value_parser_field;
    private BinaryOperatorParser? binary_operator_parser_field;
    private UnaryOperatorParser? unary_operator_parser_field;
    private CommentParser? comment_parser_field;
    private NonStarCharacterParser? non_star_character_parser_field;
    private NonSlashCharacterParser? non_slash_character_parser_field;
    private CommentContentParser? comment_content_parser_field;
    private QualfiedNameParser? qualfied_name_parser_field;
    private NameTailParser? name_tail_parser_field;
    private NameParser? name_parser_field;
    private NameCharacterParser? name_character_parser_field;
    private BooleanParser? boolean_parser_field;
    private ByteParser? byte_parser_field;
    private ByteDigitParser? byte_digit_parser_field;
    private NegativeParser? negative_parser_field;
    private DecimalParser? decimal_parser_field;
    private NumberParser? number_parser_field;
    private DigitParser? digit_parser_field;
    private LiteralParser? literal_parser_field;
    private LiteralCharacterParser? literal_character_parser_field;
    private WhitespaceParser? whitespace_parser_field;
    private StringParser? string_parser_field;
    private CharacterParser? character_parser_field;
    private CharacterRangeParser? character_range_parser_field;

    public ParserNetwork()
    {
        this.c_t_code_file_parser_field = null;
        this.external_definition_parser_field = null;
        this.unmanaged_type_parser_field = null;
        this.definition_parser_field = null;
        this.interface_def_parser_field = null;
        this.class_def_parser_field = null;
        this.implementation_spec_parser_field = null;
        this.content_declaration_parser_field = null;
        this.content_definition_parser_field = null;
        this.primative_type_parser_field = null;
        this.defined_type_parser_field = null;
        this.singleton_type_parser_field = null;
        this.dimensional_note_parser_field = null;
        this.dimensional_type_parser_field = null;
        this.map_note_parser_field = null;
        this.map_type_parser_field = null;
        this.value_type_parser_field = null;
        this.parameter_list_def_parser_field = null;
        this.parameter_list_parser_field = null;
        this.code_block_parser_field = null;
        this.declaration_assign_parser_field = null;
        this.declaration_parser_field = null;
        this.assignment_parser_field = null;
        this.return_parser_field = null;
        this.else_tail_parser_field = null;
        this.conditional_parser_field = null;
        this.loop_parser_field = null;
        this.call_parser_field = null;
        this.allocate_parser_field = null;
        this.instruction_parser_field = null;
        this.r_value_single_parser_field = null;
        this.r_value_tail_parser_field = null;
        this.r_value_parser_field = null;
        this.binary_operator_parser_field = null;
        this.unary_operator_parser_field = null;
        this.comment_parser_field = null;
        this.non_star_character_parser_field = null;
        this.non_slash_character_parser_field = null;
        this.comment_content_parser_field = null;
        this.qualfied_name_parser_field = null;
        this.name_tail_parser_field = null;
        this.name_parser_field = null;
        this.name_character_parser_field = null;
        this.boolean_parser_field = null;
        this.byte_parser_field = null;
        this.byte_digit_parser_field = null;
        this.negative_parser_field = null;
        this.decimal_parser_field = null;
        this.number_parser_field = null;
        this.digit_parser_field = null;
        this.literal_parser_field = null;
        this.literal_character_parser_field = null;
        this.whitespace_parser_field = null;
        this.string_parser_field = null;
        this.character_parser_field = null;
        this.character_range_parser_field = null;
    }

    public CTCodeFileParser? GetCTCodeFileParser()
    {
        return this?.c_t_code_file_parser_field;
    }

    public ExternalDefinitionParser? GetExternalDefinitionParser()
    {
        return this?.external_definition_parser_field;
    }

    public UnmanagedTypeParser? GetUnmanagedTypeParser()
    {
        return this?.unmanaged_type_parser_field;
    }

    public DefinitionParser? GetDefinitionParser()
    {
        return this?.definition_parser_field;
    }

    public InterfaceDefParser? GetInterfaceDefParser()
    {
        return this?.interface_def_parser_field;
    }

    public ClassDefParser? GetClassDefParser()
    {
        return this?.class_def_parser_field;
    }

    public ImplementationSpecParser? GetImplementationSpecParser()
    {
        return this?.implementation_spec_parser_field;
    }

    public ContentDeclarationParser? GetContentDeclarationParser()
    {
        return this?.content_declaration_parser_field;
    }

    public ContentDefinitionParser? GetContentDefinitionParser()
    {
        return this?.content_definition_parser_field;
    }

    public PrimativeTypeParser? GetPrimativeTypeParser()
    {
        return this?.primative_type_parser_field;
    }

    public DefinedTypeParser? GetDefinedTypeParser()
    {
        return this?.defined_type_parser_field;
    }

    public SingletonTypeParser? GetSingletonTypeParser()
    {
        return this?.singleton_type_parser_field;
    }

    public DimensionalNoteParser? GetDimensionalNoteParser()
    {
        return this?.dimensional_note_parser_field;
    }

    public DimensionalTypeParser? GetDimensionalTypeParser()
    {
        return this?.dimensional_type_parser_field;
    }

    public MapNoteParser? GetMapNoteParser()
    {
        return this?.map_note_parser_field;
    }

    public MapTypeParser? GetMapTypeParser()
    {
        return this?.map_type_parser_field;
    }

    public ValueTypeParser? GetValueTypeParser()
    {
        return this?.value_type_parser_field;
    }

    public ParameterListDefParser? GetParameterListDefParser()
    {
        return this?.parameter_list_def_parser_field;
    }

    public ParameterListParser? GetParameterListParser()
    {
        return this?.parameter_list_parser_field;
    }

    public CodeBlockParser? GetCodeBlockParser()
    {
        return this?.code_block_parser_field;
    }

    public DeclarationAssignParser? GetDeclarationAssignParser()
    {
        return this?.declaration_assign_parser_field;
    }

    public DeclarationParser? GetDeclarationParser()
    {
        return this?.declaration_parser_field;
    }

    public AssignmentParser? GetAssignmentParser()
    {
        return this?.assignment_parser_field;
    }

    public ReturnParser? GetReturnParser()
    {
        return this?.return_parser_field;
    }

    public ElseTailParser? GetElseTailParser()
    {
        return this?.else_tail_parser_field;
    }

    public ConditionalParser? GetConditionalParser()
    {
        return this?.conditional_parser_field;
    }

    public LoopParser? GetLoopParser()
    {
        return this?.loop_parser_field;
    }

    public CallParser? GetCallParser()
    {
        return this?.call_parser_field;
    }

    public AllocateParser? GetAllocateParser()
    {
        return this?.allocate_parser_field;
    }

    public InstructionParser? GetInstructionParser()
    {
        return this?.instruction_parser_field;
    }

    public RValueSingleParser? GetRValueSingleParser()
    {
        return this?.r_value_single_parser_field;
    }

    public RValueTailParser? GetRValueTailParser()
    {
        return this?.r_value_tail_parser_field;
    }

    public RValueParser? GetRValueParser()
    {
        return this?.r_value_parser_field;
    }

    public BinaryOperatorParser? GetBinaryOperatorParser()
    {
        return this?.binary_operator_parser_field;
    }

    public UnaryOperatorParser? GetUnaryOperatorParser()
    {
        return this?.unary_operator_parser_field;
    }

    public CommentParser? GetCommentParser()
    {
        return this?.comment_parser_field;
    }

    public NonStarCharacterParser? GetNonStarCharacterParser()
    {
        return this?.non_star_character_parser_field;
    }

    public NonSlashCharacterParser? GetNonSlashCharacterParser()
    {
        return this?.non_slash_character_parser_field;
    }

    public CommentContentParser? GetCommentContentParser()
    {
        return this?.comment_content_parser_field;
    }

    public QualfiedNameParser? GetQualfiedNameParser()
    {
        return this?.qualfied_name_parser_field;
    }

    public NameTailParser? GetNameTailParser()
    {
        return this?.name_tail_parser_field;
    }

    public NameParser? GetNameParser()
    {
        return this?.name_parser_field;
    }

    public NameCharacterParser? GetNameCharacterParser()
    {
        return this?.name_character_parser_field;
    }

    public BooleanParser? GetBooleanParser()
    {
        return this?.boolean_parser_field;
    }

    public ByteParser? GetByteParser()
    {
        return this?.byte_parser_field;
    }

    public ByteDigitParser? GetByteDigitParser()
    {
        return this?.byte_digit_parser_field;
    }

    public NegativeParser? GetNegativeParser()
    {
        return this?.negative_parser_field;
    }

    public DecimalParser? GetDecimalParser()
    {
        return this?.decimal_parser_field;
    }

    public NumberParser? GetNumberParser()
    {
        return this?.number_parser_field;
    }

    public DigitParser? GetDigitParser()
    {
        return this?.digit_parser_field;
    }

    public LiteralParser? GetLiteralParser()
    {
        return this?.literal_parser_field;
    }

    public LiteralCharacterParser? GetLiteralCharacterParser()
    {
        return this?.literal_character_parser_field;
    }

    public WhitespaceParser? GetWhitespaceParser()
    {
        return this?.whitespace_parser_field;
    }

    public StringParser? GetStringParser()
    {
        return this?.string_parser_field;
    }

    public CharacterParser? GetCharacterParser()
    {
        return this?.character_parser_field;
    }

    public CharacterRangeParser? GetCharacterRangeParser()
    {
        return this?.character_range_parser_field;
    }

    public void Initialize()
    {
        this.c_t_code_file_parser_field = new CTCodeFileParser();
        this?.c_t_code_file_parser_field?.SetParserNetwork(this);
        this.external_definition_parser_field = new ExternalDefinitionParser();
        this?.external_definition_parser_field?.SetParserNetwork(this);
        this.unmanaged_type_parser_field = new UnmanagedTypeParser();
        this?.unmanaged_type_parser_field?.SetParserNetwork(this);
        this.definition_parser_field = new DefinitionParser();
        this?.definition_parser_field?.SetParserNetwork(this);
        this.interface_def_parser_field = new InterfaceDefParser();
        this?.interface_def_parser_field?.SetParserNetwork(this);
        this.class_def_parser_field = new ClassDefParser();
        this?.class_def_parser_field?.SetParserNetwork(this);
        this.implementation_spec_parser_field = new ImplementationSpecParser();
        this?.implementation_spec_parser_field?.SetParserNetwork(this);
        this.content_declaration_parser_field = new ContentDeclarationParser();
        this?.content_declaration_parser_field?.SetParserNetwork(this);
        this.content_definition_parser_field = new ContentDefinitionParser();
        this?.content_definition_parser_field?.SetParserNetwork(this);
        this.primative_type_parser_field = new PrimativeTypeParser();
        this?.primative_type_parser_field?.SetParserNetwork(this);
        this.defined_type_parser_field = new DefinedTypeParser();
        this?.defined_type_parser_field?.SetParserNetwork(this);
        this.singleton_type_parser_field = new SingletonTypeParser();
        this?.singleton_type_parser_field?.SetParserNetwork(this);
        this.dimensional_note_parser_field = new DimensionalNoteParser();
        this?.dimensional_note_parser_field?.SetParserNetwork(this);
        this.dimensional_type_parser_field = new DimensionalTypeParser();
        this?.dimensional_type_parser_field?.SetParserNetwork(this);
        this.map_note_parser_field = new MapNoteParser();
        this?.map_note_parser_field?.SetParserNetwork(this);
        this.map_type_parser_field = new MapTypeParser();
        this?.map_type_parser_field?.SetParserNetwork(this);
        this.value_type_parser_field = new ValueTypeParser();
        this?.value_type_parser_field?.SetParserNetwork(this);
        this.parameter_list_def_parser_field = new ParameterListDefParser();
        this?.parameter_list_def_parser_field?.SetParserNetwork(this);
        this.parameter_list_parser_field = new ParameterListParser();
        this?.parameter_list_parser_field?.SetParserNetwork(this);
        this.code_block_parser_field = new CodeBlockParser();
        this?.code_block_parser_field?.SetParserNetwork(this);
        this.declaration_assign_parser_field = new DeclarationAssignParser();
        this?.declaration_assign_parser_field?.SetParserNetwork(this);
        this.declaration_parser_field = new DeclarationParser();
        this?.declaration_parser_field?.SetParserNetwork(this);
        this.assignment_parser_field = new AssignmentParser();
        this?.assignment_parser_field?.SetParserNetwork(this);
        this.return_parser_field = new ReturnParser();
        this?.return_parser_field?.SetParserNetwork(this);
        this.else_tail_parser_field = new ElseTailParser();
        this?.else_tail_parser_field?.SetParserNetwork(this);
        this.conditional_parser_field = new ConditionalParser();
        this?.conditional_parser_field?.SetParserNetwork(this);
        this.loop_parser_field = new LoopParser();
        this?.loop_parser_field?.SetParserNetwork(this);
        this.call_parser_field = new CallParser();
        this?.call_parser_field?.SetParserNetwork(this);
        this.allocate_parser_field = new AllocateParser();
        this?.allocate_parser_field?.SetParserNetwork(this);
        this.instruction_parser_field = new InstructionParser();
        this?.instruction_parser_field?.SetParserNetwork(this);
        this.r_value_single_parser_field = new RValueSingleParser();
        this?.r_value_single_parser_field?.SetParserNetwork(this);
        this.r_value_tail_parser_field = new RValueTailParser();
        this?.r_value_tail_parser_field?.SetParserNetwork(this);
        this.r_value_parser_field = new RValueParser();
        this?.r_value_parser_field?.SetParserNetwork(this);
        this.binary_operator_parser_field = new BinaryOperatorParser();
        this?.binary_operator_parser_field?.SetParserNetwork(this);
        this.unary_operator_parser_field = new UnaryOperatorParser();
        this?.unary_operator_parser_field?.SetParserNetwork(this);
        this.comment_parser_field = new CommentParser();
        this?.comment_parser_field?.SetParserNetwork(this);
        this.non_star_character_parser_field = new NonStarCharacterParser();
        this?.non_star_character_parser_field?.SetParserNetwork(this);
        this.non_slash_character_parser_field = new NonSlashCharacterParser();
        this?.non_slash_character_parser_field?.SetParserNetwork(this);
        this.comment_content_parser_field = new CommentContentParser();
        this?.comment_content_parser_field?.SetParserNetwork(this);
        this.qualfied_name_parser_field = new QualfiedNameParser();
        this?.qualfied_name_parser_field?.SetParserNetwork(this);
        this.name_tail_parser_field = new NameTailParser();
        this?.name_tail_parser_field?.SetParserNetwork(this);
        this.name_parser_field = new NameParser();
        this?.name_parser_field?.SetParserNetwork(this);
        this.name_character_parser_field = new NameCharacterParser();
        this?.name_character_parser_field?.SetParserNetwork(this);
        this.boolean_parser_field = new BooleanParser();
        this?.boolean_parser_field?.SetParserNetwork(this);
        this.byte_parser_field = new ByteParser();
        this?.byte_parser_field?.SetParserNetwork(this);
        this.byte_digit_parser_field = new ByteDigitParser();
        this?.byte_digit_parser_field?.SetParserNetwork(this);
        this.negative_parser_field = new NegativeParser();
        this?.negative_parser_field?.SetParserNetwork(this);
        this.decimal_parser_field = new DecimalParser();
        this?.decimal_parser_field?.SetParserNetwork(this);
        this.number_parser_field = new NumberParser();
        this?.number_parser_field?.SetParserNetwork(this);
        this.digit_parser_field = new DigitParser();
        this?.digit_parser_field?.SetParserNetwork(this);
        this.literal_parser_field = new LiteralParser();
        this?.literal_parser_field?.SetParserNetwork(this);
        this.literal_character_parser_field = new LiteralCharacterParser();
        this?.literal_character_parser_field?.SetParserNetwork(this);
        this.whitespace_parser_field = new WhitespaceParser();
        this?.whitespace_parser_field?.SetParserNetwork(this);
        this.string_parser_field = new StringParser();
        this.character_parser_field = new CharacterParser();
        this.character_range_parser_field = new CharacterRangeParser();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DBNFOmniType
{
    private CTCodeFile? c_t_code_file_field;
    private ExternalDefinition? external_definition_field;
    private UnmanagedType? unmanaged_type_field;
    private Definition? definition_field;
    private InterfaceDef? interface_def_field;
    private ClassDef? class_def_field;
    private ImplementationSpec? implementation_spec_field;
    private ContentDeclaration? content_declaration_field;
    private ContentDefinition? content_definition_field;
    private PrimativeType? primative_type_field;
    private DefinedType? defined_type_field;
    private SingletonType? singleton_type_field;
    private DimensionalNote? dimensional_note_field;
    private DimensionalType? dimensional_type_field;
    private MapNote? map_note_field;
    private MapType? map_type_field;
    private ValueType? value_type_field;
    private ParameterListDef? parameter_list_def_field;
    private ParameterList? parameter_list_field;
    private CodeBlock? code_block_field;
    private DeclarationAssign? declaration_assign_field;
    private Declaration? declaration_field;
    private Assignment? assignment_field;
    private Return? return_field;
    private ElseTail? else_tail_field;
    private Conditional? conditional_field;
    private Loop? loop_field;
    private Call? call_field;
    private Allocate? allocate_field;
    private Instruction? instruction_field;
    private RValueSingle? r_value_single_field;
    private RValueTail? r_value_tail_field;
    private RValue? r_value_field;
    private BinaryOperator? binary_operator_field;
    private UnaryOperator? unary_operator_field;
    private Comment? comment_field;
    private NonStarCharacter? non_star_character_field;
    private NonSlashCharacter? non_slash_character_field;
    private CommentContent? comment_content_field;
    private QualfiedName? qualfied_name_field;
    private NameTail? name_tail_field;
    private Name? name_field;
    private NameCharacter? name_character_field;
    private Boolean? boolean_field;
    private Byte? byte_field;
    private ByteDigit? byte_digit_field;
    private Negative? negative_field;
    private Decimal? decimal_field;
    private Number? number_field;
    private Digit? digit_field;
    private Literal? literal_field;
    private LiteralCharacter? literal_character_field;
    private Whitespace? whitespace_field;

    public DBNFOmniType()
    {
        this.c_t_code_file_field = null;
        this.external_definition_field = null;
        this.unmanaged_type_field = null;
        this.definition_field = null;
        this.interface_def_field = null;
        this.class_def_field = null;
        this.implementation_spec_field = null;
        this.content_declaration_field = null;
        this.content_definition_field = null;
        this.primative_type_field = null;
        this.defined_type_field = null;
        this.singleton_type_field = null;
        this.dimensional_note_field = null;
        this.dimensional_type_field = null;
        this.map_note_field = null;
        this.map_type_field = null;
        this.value_type_field = null;
        this.parameter_list_def_field = null;
        this.parameter_list_field = null;
        this.code_block_field = null;
        this.declaration_assign_field = null;
        this.declaration_field = null;
        this.assignment_field = null;
        this.return_field = null;
        this.else_tail_field = null;
        this.conditional_field = null;
        this.loop_field = null;
        this.call_field = null;
        this.allocate_field = null;
        this.instruction_field = null;
        this.r_value_single_field = null;
        this.r_value_tail_field = null;
        this.r_value_field = null;
        this.binary_operator_field = null;
        this.unary_operator_field = null;
        this.comment_field = null;
        this.non_star_character_field = null;
        this.non_slash_character_field = null;
        this.comment_content_field = null;
        this.qualfied_name_field = null;
        this.name_tail_field = null;
        this.name_field = null;
        this.name_character_field = null;
        this.boolean_field = null;
        this.byte_field = null;
        this.byte_digit_field = null;
        this.negative_field = null;
        this.decimal_field = null;
        this.number_field = null;
        this.digit_field = null;
        this.literal_field = null;
        this.literal_character_field = null;
        this.whitespace_field = null;
    }

    public void SetCTCodeFile(CTCodeFile? input_value)
    {
        this.c_t_code_file_field = input_value;
    }

    public CTCodeFile? GetCTCodeFile()
    {
        return this?.c_t_code_file_field;
    }

    public void SetExternalDefinition(ExternalDefinition? input_value)
    {
        this.external_definition_field = input_value;
    }

    public ExternalDefinition? GetExternalDefinition()
    {
        return this?.external_definition_field;
    }

    public void SetUnmanagedType(UnmanagedType? input_value)
    {
        this.unmanaged_type_field = input_value;
    }

    public UnmanagedType? GetUnmanagedType()
    {
        return this?.unmanaged_type_field;
    }

    public void SetDefinition(Definition? input_value)
    {
        this.definition_field = input_value;
    }

    public Definition? GetDefinition()
    {
        return this?.definition_field;
    }

    public void SetInterfaceDef(InterfaceDef? input_value)
    {
        this.interface_def_field = input_value;
    }

    public InterfaceDef? GetInterfaceDef()
    {
        return this?.interface_def_field;
    }

    public void SetClassDef(ClassDef? input_value)
    {
        this.class_def_field = input_value;
    }

    public ClassDef? GetClassDef()
    {
        return this?.class_def_field;
    }

    public void SetImplementationSpec(ImplementationSpec? input_value)
    {
        this.implementation_spec_field = input_value;
    }

    public ImplementationSpec? GetImplementationSpec()
    {
        return this?.implementation_spec_field;
    }

    public void SetContentDeclaration(ContentDeclaration? input_value)
    {
        this.content_declaration_field = input_value;
    }

    public ContentDeclaration? GetContentDeclaration()
    {
        return this?.content_declaration_field;
    }

    public void SetContentDefinition(ContentDefinition? input_value)
    {
        this.content_definition_field = input_value;
    }

    public ContentDefinition? GetContentDefinition()
    {
        return this?.content_definition_field;
    }

    public void SetPrimativeType(PrimativeType? input_value)
    {
        this.primative_type_field = input_value;
    }

    public PrimativeType? GetPrimativeType()
    {
        return this?.primative_type_field;
    }

    public void SetDefinedType(DefinedType? input_value)
    {
        this.defined_type_field = input_value;
    }

    public DefinedType? GetDefinedType()
    {
        return this?.defined_type_field;
    }

    public void SetSingletonType(SingletonType? input_value)
    {
        this.singleton_type_field = input_value;
    }

    public SingletonType? GetSingletonType()
    {
        return this?.singleton_type_field;
    }

    public void SetDimensionalNote(DimensionalNote? input_value)
    {
        this.dimensional_note_field = input_value;
    }

    public DimensionalNote? GetDimensionalNote()
    {
        return this?.dimensional_note_field;
    }

    public void SetDimensionalType(DimensionalType? input_value)
    {
        this.dimensional_type_field = input_value;
    }

    public DimensionalType? GetDimensionalType()
    {
        return this?.dimensional_type_field;
    }

    public void SetMapNote(MapNote? input_value)
    {
        this.map_note_field = input_value;
    }

    public MapNote? GetMapNote()
    {
        return this?.map_note_field;
    }

    public void SetMapType(MapType? input_value)
    {
        this.map_type_field = input_value;
    }

    public MapType? GetMapType()
    {
        return this?.map_type_field;
    }

    public void SetValueType(ValueType? input_value)
    {
        this.value_type_field = input_value;
    }

    public ValueType? GetValueType()
    {
        return this?.value_type_field;
    }

    public void SetParameterListDef(ParameterListDef? input_value)
    {
        this.parameter_list_def_field = input_value;
    }

    public ParameterListDef? GetParameterListDef()
    {
        return this?.parameter_list_def_field;
    }

    public void SetParameterList(ParameterList? input_value)
    {
        this.parameter_list_field = input_value;
    }

    public ParameterList? GetParameterList()
    {
        return this?.parameter_list_field;
    }

    public void SetCodeBlock(CodeBlock? input_value)
    {
        this.code_block_field = input_value;
    }

    public CodeBlock? GetCodeBlock()
    {
        return this?.code_block_field;
    }

    public void SetDeclarationAssign(DeclarationAssign? input_value)
    {
        this.declaration_assign_field = input_value;
    }

    public DeclarationAssign? GetDeclarationAssign()
    {
        return this?.declaration_assign_field;
    }

    public void SetDeclaration(Declaration? input_value)
    {
        this.declaration_field = input_value;
    }

    public Declaration? GetDeclaration()
    {
        return this?.declaration_field;
    }

    public void SetAssignment(Assignment? input_value)
    {
        this.assignment_field = input_value;
    }

    public Assignment? GetAssignment()
    {
        return this?.assignment_field;
    }

    public void SetReturn(Return? input_value)
    {
        this.return_field = input_value;
    }

    public Return? GetReturn()
    {
        return this?.return_field;
    }

    public void SetElseTail(ElseTail? input_value)
    {
        this.else_tail_field = input_value;
    }

    public ElseTail? GetElseTail()
    {
        return this?.else_tail_field;
    }

    public void SetConditional(Conditional? input_value)
    {
        this.conditional_field = input_value;
    }

    public Conditional? GetConditional()
    {
        return this?.conditional_field;
    }

    public void SetLoop(Loop? input_value)
    {
        this.loop_field = input_value;
    }

    public Loop? GetLoop()
    {
        return this?.loop_field;
    }

    public void SetCall(Call? input_value)
    {
        this.call_field = input_value;
    }

    public Call? GetCall()
    {
        return this?.call_field;
    }

    public void SetAllocate(Allocate? input_value)
    {
        this.allocate_field = input_value;
    }

    public Allocate? GetAllocate()
    {
        return this?.allocate_field;
    }

    public void SetInstruction(Instruction? input_value)
    {
        this.instruction_field = input_value;
    }

    public Instruction? GetInstruction()
    {
        return this?.instruction_field;
    }

    public void SetRValueSingle(RValueSingle? input_value)
    {
        this.r_value_single_field = input_value;
    }

    public RValueSingle? GetRValueSingle()
    {
        return this?.r_value_single_field;
    }

    public void SetRValueTail(RValueTail? input_value)
    {
        this.r_value_tail_field = input_value;
    }

    public RValueTail? GetRValueTail()
    {
        return this?.r_value_tail_field;
    }

    public void SetRValue(RValue? input_value)
    {
        this.r_value_field = input_value;
    }

    public RValue? GetRValue()
    {
        return this?.r_value_field;
    }

    public void SetBinaryOperator(BinaryOperator? input_value)
    {
        this.binary_operator_field = input_value;
    }

    public BinaryOperator? GetBinaryOperator()
    {
        return this?.binary_operator_field;
    }

    public void SetUnaryOperator(UnaryOperator? input_value)
    {
        this.unary_operator_field = input_value;
    }

    public UnaryOperator? GetUnaryOperator()
    {
        return this?.unary_operator_field;
    }

    public void SetComment(Comment? input_value)
    {
        this.comment_field = input_value;
    }

    public Comment? GetComment()
    {
        return this?.comment_field;
    }

    public void SetNonStarCharacter(NonStarCharacter? input_value)
    {
        this.non_star_character_field = input_value;
    }

    public NonStarCharacter? GetNonStarCharacter()
    {
        return this?.non_star_character_field;
    }

    public void SetNonSlashCharacter(NonSlashCharacter? input_value)
    {
        this.non_slash_character_field = input_value;
    }

    public NonSlashCharacter? GetNonSlashCharacter()
    {
        return this?.non_slash_character_field;
    }

    public void SetCommentContent(CommentContent? input_value)
    {
        this.comment_content_field = input_value;
    }

    public CommentContent? GetCommentContent()
    {
        return this?.comment_content_field;
    }

    public void SetQualfiedName(QualfiedName? input_value)
    {
        this.qualfied_name_field = input_value;
    }

    public QualfiedName? GetQualfiedName()
    {
        return this?.qualfied_name_field;
    }

    public void SetNameTail(NameTail? input_value)
    {
        this.name_tail_field = input_value;
    }

    public NameTail? GetNameTail()
    {
        return this?.name_tail_field;
    }

    public void SetName(Name? input_value)
    {
        this.name_field = input_value;
    }

    public Name? GetName()
    {
        return this?.name_field;
    }

    public void SetNameCharacter(NameCharacter? input_value)
    {
        this.name_character_field = input_value;
    }

    public NameCharacter? GetNameCharacter()
    {
        return this?.name_character_field;
    }

    public void SetBoolean(Boolean? input_value)
    {
        this.boolean_field = input_value;
    }

    public Boolean? GetBoolean()
    {
        return this?.boolean_field;
    }

    public void SetByte(Byte? input_value)
    {
        this.byte_field = input_value;
    }

    public Byte? GetByte()
    {
        return this?.byte_field;
    }

    public void SetByteDigit(ByteDigit? input_value)
    {
        this.byte_digit_field = input_value;
    }

    public ByteDigit? GetByteDigit()
    {
        return this?.byte_digit_field;
    }

    public void SetNegative(Negative? input_value)
    {
        this.negative_field = input_value;
    }

    public Negative? GetNegative()
    {
        return this?.negative_field;
    }

    public void SetDecimal(Decimal? input_value)
    {
        this.decimal_field = input_value;
    }

    public Decimal? GetDecimal()
    {
        return this?.decimal_field;
    }

    public void SetNumber(Number? input_value)
    {
        this.number_field = input_value;
    }

    public Number? GetNumber()
    {
        return this?.number_field;
    }

    public void SetDigit(Digit? input_value)
    {
        this.digit_field = input_value;
    }

    public Digit? GetDigit()
    {
        return this?.digit_field;
    }

    public void SetLiteral(Literal? input_value)
    {
        this.literal_field = input_value;
    }

    public Literal? GetLiteral()
    {
        return this?.literal_field;
    }

    public void SetLiteralCharacter(LiteralCharacter? input_value)
    {
        this.literal_character_field = input_value;
    }

    public LiteralCharacter? GetLiteralCharacter()
    {
        return this?.literal_character_field;
    }

    public void SetWhitespace(Whitespace? input_value)
    {
        this.whitespace_field = input_value;
    }

    public Whitespace? GetWhitespace()
    {
        return this?.whitespace_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DBNFOmniTypeResult
{
    private DBNFOmniType? value;
    private bool? result;

    public DBNFOmniTypeResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(DBNFOmniType? new_value)
    {
        this.value = new_value;
    }

    public DBNFOmniType? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    public void SetCTCodeFile(CTCodeFile? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetCTCodeFile(input_value);
    }

    public void SetExternalDefinition(ExternalDefinition? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetExternalDefinition(input_value);
    }

    public void SetUnmanagedType(UnmanagedType? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetUnmanagedType(input_value);
    }

    public void SetDefinition(Definition? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetDefinition(input_value);
    }

    public void SetInterfaceDef(InterfaceDef? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetInterfaceDef(input_value);
    }

    public void SetClassDef(ClassDef? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetClassDef(input_value);
    }

    public void SetImplementationSpec(ImplementationSpec? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetImplementationSpec(input_value);
    }

    public void SetContentDeclaration(ContentDeclaration? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetContentDeclaration(input_value);
    }

    public void SetContentDefinition(ContentDefinition? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetContentDefinition(input_value);
    }

    public void SetPrimativeType(PrimativeType? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetPrimativeType(input_value);
    }

    public void SetDefinedType(DefinedType? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetDefinedType(input_value);
    }

    public void SetSingletonType(SingletonType? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetSingletonType(input_value);
    }

    public void SetDimensionalNote(DimensionalNote? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetDimensionalNote(input_value);
    }

    public void SetDimensionalType(DimensionalType? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetDimensionalType(input_value);
    }

    public void SetMapNote(MapNote? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetMapNote(input_value);
    }

    public void SetMapType(MapType? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetMapType(input_value);
    }

    public void SetValueType(ValueType? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetValueType(input_value);
    }

    public void SetParameterListDef(ParameterListDef? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetParameterListDef(input_value);
    }

    public void SetParameterList(ParameterList? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetParameterList(input_value);
    }

    public void SetCodeBlock(CodeBlock? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetCodeBlock(input_value);
    }

    public void SetDeclarationAssign(DeclarationAssign? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetDeclarationAssign(input_value);
    }

    public void SetDeclaration(Declaration? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetDeclaration(input_value);
    }

    public void SetAssignment(Assignment? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetAssignment(input_value);
    }

    public void SetReturn(Return? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetReturn(input_value);
    }

    public void SetElseTail(ElseTail? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetElseTail(input_value);
    }

    public void SetConditional(Conditional? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetConditional(input_value);
    }

    public void SetLoop(Loop? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetLoop(input_value);
    }

    public void SetCall(Call? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetCall(input_value);
    }

    public void SetAllocate(Allocate? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetAllocate(input_value);
    }

    public void SetInstruction(Instruction? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetInstruction(input_value);
    }

    public void SetRValueSingle(RValueSingle? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetRValueSingle(input_value);
    }

    public void SetRValueTail(RValueTail? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetRValueTail(input_value);
    }

    public void SetRValue(RValue? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetRValue(input_value);
    }

    public void SetBinaryOperator(BinaryOperator? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetBinaryOperator(input_value);
    }

    public void SetUnaryOperator(UnaryOperator? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetUnaryOperator(input_value);
    }

    public void SetComment(Comment? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetComment(input_value);
    }

    public void SetNonStarCharacter(NonStarCharacter? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetNonStarCharacter(input_value);
    }

    public void SetNonSlashCharacter(NonSlashCharacter? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetNonSlashCharacter(input_value);
    }

    public void SetCommentContent(CommentContent? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetCommentContent(input_value);
    }

    public void SetQualfiedName(QualfiedName? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetQualfiedName(input_value);
    }

    public void SetNameTail(NameTail? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetNameTail(input_value);
    }

    public void SetName(Name? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetName(input_value);
    }

    public void SetNameCharacter(NameCharacter? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetNameCharacter(input_value);
    }

    public void SetBoolean(Boolean? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetBoolean(input_value);
    }

    public void SetByte(Byte? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetByte(input_value);
    }

    public void SetByteDigit(ByteDigit? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetByteDigit(input_value);
    }

    public void SetNegative(Negative? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetNegative(input_value);
    }

    public void SetDecimal(Decimal? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetDecimal(input_value);
    }

    public void SetNumber(Number? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetNumber(input_value);
    }

    public void SetDigit(Digit? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetDigit(input_value);
    }

    public void SetLiteral(Literal? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetLiteral(input_value);
    }

    public void SetLiteralCharacter(LiteralCharacter? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetLiteralCharacter(input_value);
    }

    public void SetWhitespace(Whitespace? input_value)
    {
        this.value = new DBNFOmniType();
        this?.value?.SetWhitespace(input_value);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DBNFOmniTypeListResult
{
    private List<DBNFOmniType?>? value;
    private bool? result;

    public DBNFOmniTypeListResult()
    {
        this.value = new List<DBNFOmniType?>();
        this.result = false;
    }

    public void SetValue(List<DBNFOmniType?>? new_value)
    {
        this.value = new_value;
    }

    public List<DBNFOmniType?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    public void SetCTCodeFile(List<CTCodeFile?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetCTCodeFile(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetExternalDefinition(List<ExternalDefinition?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetExternalDefinition(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetUnmanagedType(List<UnmanagedType?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetUnmanagedType(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetDefinition(List<Definition?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetDefinition(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetInterfaceDef(List<InterfaceDef?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetInterfaceDef(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetClassDef(List<ClassDef?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetClassDef(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetImplementationSpec(List<ImplementationSpec?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetImplementationSpec(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetContentDeclaration(List<ContentDeclaration?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetContentDeclaration(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetContentDefinition(List<ContentDefinition?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetContentDefinition(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetPrimativeType(List<PrimativeType?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetPrimativeType(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetDefinedType(List<DefinedType?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetDefinedType(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetSingletonType(List<SingletonType?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetSingletonType(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetDimensionalNote(List<DimensionalNote?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetDimensionalNote(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetDimensionalType(List<DimensionalType?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetDimensionalType(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetMapNote(List<MapNote?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetMapNote(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetMapType(List<MapType?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetMapType(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetValueType(List<ValueType?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetValueType(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetParameterListDef(List<ParameterListDef?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetParameterListDef(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetParameterList(List<ParameterList?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetParameterList(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetCodeBlock(List<CodeBlock?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetCodeBlock(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetDeclarationAssign(List<DeclarationAssign?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetDeclarationAssign(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetDeclaration(List<Declaration?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetDeclaration(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetAssignment(List<Assignment?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetAssignment(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetReturn(List<Return?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetReturn(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetElseTail(List<ElseTail?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetElseTail(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetConditional(List<Conditional?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetConditional(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetLoop(List<Loop?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetLoop(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetCall(List<Call?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetCall(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetAllocate(List<Allocate?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetAllocate(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetInstruction(List<Instruction?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetInstruction(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetRValueSingle(List<RValueSingle?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetRValueSingle(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetRValueTail(List<RValueTail?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetRValueTail(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetRValue(List<RValue?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetRValue(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetBinaryOperator(List<BinaryOperator?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetBinaryOperator(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetUnaryOperator(List<UnaryOperator?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetUnaryOperator(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetComment(List<Comment?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetComment(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetNonStarCharacter(List<NonStarCharacter?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetNonStarCharacter(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetNonSlashCharacter(List<NonSlashCharacter?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetNonSlashCharacter(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetCommentContent(List<CommentContent?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetCommentContent(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetQualfiedName(List<QualfiedName?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetQualfiedName(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetNameTail(List<NameTail?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetNameTail(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetName(List<Name?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetName(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetNameCharacter(List<NameCharacter?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetNameCharacter(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetBoolean(List<Boolean?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetBoolean(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetByte(List<Byte?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetByte(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetByteDigit(List<ByteDigit?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetByteDigit(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetNegative(List<Negative?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetNegative(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetDecimal(List<Decimal?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetDecimal(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetNumber(List<Number?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetNumber(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetDigit(List<Digit?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetDigit(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetLiteral(List<Literal?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetLiteral(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetLiteralCharacter(List<LiteralCharacter?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetLiteralCharacter(Element(input_value,index));
            index = index+1;
        }
    }

    public void SetWhitespace(List<Whitespace?>? input_value)
    {
        int? index = 0;
        while (AsBoolean(index<Size(input_value)))
        {
            DBNFOmniType? value = new DBNFOmniType();
            value?.SetWhitespace(Element(input_value,index));
            index = index+1;
        }
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LargeString
{
    private string? data;

    public LargeString()
    {
        this.data = "";
    }

    public void SetData(string? new_data)
    {
        this.data = new_data;
    }

    public string? GetData()
    {
        return this?.data;
    }

    public int? GetIntAt(int? offset)
    {
        return IntAt(this?.data,offset);
    }

    public string? GetAt(int? offset)
    {
        return At(this?.data,offset);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LengthString
{
    private LargeString? data;
    private int? start;
    private int? length;

    public LengthString()
    {
        this.data = null;
        this.start = 0;
        this.length = 0;
    }

    public void SetData(LargeString? new_data)
    {
        this.data = new_data;
    }

    public LargeString? GetData()
    {
        return this?.data;
    }

    public void SetStart(int? new_start)
    {
        this.start = new_start;
    }

    public int? GetStart()
    {
        return this?.start;
    }

    public void SetLength(int? new_length)
    {
        this.length = new_length;
    }

    public int? GetLength()
    {
        return this?.length;
    }

    public string? GetString()
    {
        string? deep_data = this?.data?.GetData();
        string? result = "";
        int? index = this?.start;
        int? end = this?.start+this?.length;
        while (AsBoolean(index<end))
        {
            result = Concat(result,At(deep_data,index));
            index = index+1;
        }
        return result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CTCodeFileParser
{
    private ParserNetwork? parser_network;

    public CTCodeFileParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,CTCodeFileResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        CTCodeFile? instance = new CTCodeFile();
        ExternalDefinitionListResult? declarations_field = new ExternalDefinitionListResult();
        DefinitionListResult? definitions_field = new DefinitionListResult();
        UnmanagedTypeListResult? unmanaged_types_field = new UnmanagedTypeListResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(external_definition_parser_instance?.ParseManySave(index,declarations_field,0,-1)))&&AsBoolean(unmanaged_type_parser_instance?.ParseManySave(index,unmanaged_types_field,0,-1)))&&AsBoolean(definition_parser_instance?.ParseManySave(index,definitions_field,0,-1))))
        {
            instance?.SetDeclarations(declarations_field?.GetValue());
            instance?.SetDefinitions(definitions_field?.GetValue());
            instance?.SetUnmanagedTypes(unmanaged_types_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            declarations_field = new ExternalDefinitionListResult();
            definitions_field = new DefinitionListResult();
            unmanaged_types_field = new UnmanagedTypeListResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        CTCodeFileResult? result = new CTCodeFileResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,CTCodeFileResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        CTCodeFileResult? result = new CTCodeFileResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,CTCodeFileListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<CTCodeFile?>? results = new List<CTCodeFile?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            CTCodeFileResult? result = new CTCodeFileResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        CTCodeFileListResult? result = new CTCodeFileListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CTCodeFileResult
{
    private CTCodeFile? value;
    private bool? result;

    public CTCodeFileResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(CTCodeFile? new_value)
    {
        this.value = new_value;
    }

    public CTCodeFile? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CTCodeFileListResult
{
    private List<CTCodeFile?>? value;
    private bool? result;

    public CTCodeFileListResult()
    {
        this.value = new List<CTCodeFile?>();
        this.result = false;
    }

    public void SetValue(List<CTCodeFile?>? new_value)
    {
        this.value = new_value;
    }

    public List<CTCodeFile?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CTCodeFile
{
    private LengthString? length_string;
    private List<ExternalDefinition?>? declarations_field;
    private List<Definition?>? definitions_field;
    private List<UnmanagedType?>? unmanaged_types_field;

    public CTCodeFile()
    {
        this.length_string = null;
        this.declarations_field = new List<ExternalDefinition?>();
        this.definitions_field = new List<Definition?>();
        this.unmanaged_types_field = new List<UnmanagedType?>();
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetDeclarations(List<ExternalDefinition?>? input_value)
    {
        this.declarations_field = input_value;
    }

    public List<ExternalDefinition?>? GetDeclarations()
    {
        return this?.declarations_field;
    }

    public void SetDefinitions(List<Definition?>? input_value)
    {
        this.definitions_field = input_value;
    }

    public List<Definition?>? GetDefinitions()
    {
        return this?.definitions_field;
    }

    public void SetUnmanagedTypes(List<UnmanagedType?>? input_value)
    {
        this.unmanaged_types_field = input_value;
    }

    public List<UnmanagedType?>? GetUnmanagedTypes()
    {
        return this?.unmanaged_types_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ExternalDefinitionParser
{
    private ParserNetwork? parser_network;

    public ExternalDefinitionParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ExternalDefinitionResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        ExternalDefinition? instance = new ExternalDefinition();
        QualfiedNameResult? exdef_field = new QualfiedNameResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"exdef")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(qualfied_name_parser_instance?.ParseSingleSave(index,exdef_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,";")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetExdef(exdef_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            exdef_field = new QualfiedNameResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ExternalDefinitionResult? result = new ExternalDefinitionResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ExternalDefinitionResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ExternalDefinitionResult? result = new ExternalDefinitionResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ExternalDefinitionListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<ExternalDefinition?>? results = new List<ExternalDefinition?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ExternalDefinitionResult? result = new ExternalDefinitionResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ExternalDefinitionListResult? result = new ExternalDefinitionListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ExternalDefinitionResult
{
    private ExternalDefinition? value;
    private bool? result;

    public ExternalDefinitionResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(ExternalDefinition? new_value)
    {
        this.value = new_value;
    }

    public ExternalDefinition? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ExternalDefinitionListResult
{
    private List<ExternalDefinition?>? value;
    private bool? result;

    public ExternalDefinitionListResult()
    {
        this.value = new List<ExternalDefinition?>();
        this.result = false;
    }

    public void SetValue(List<ExternalDefinition?>? new_value)
    {
        this.value = new_value;
    }

    public List<ExternalDefinition?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ExternalDefinition
{
    private LengthString? length_string;
    private QualfiedName? exdef_field;

    public ExternalDefinition()
    {
        this.length_string = null;
        this.exdef_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetExdef(QualfiedName? input_value)
    {
        this.exdef_field = input_value;
    }

    public QualfiedName? GetExdef()
    {
        return this?.exdef_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class UnmanagedTypeParser
{
    private ParserNetwork? parser_network;

    public UnmanagedTypeParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,UnmanagedTypeResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        UnmanagedType? instance = new UnmanagedType();
        QualfiedNameResult? unmanaged_type_field = new QualfiedNameResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"unmanaged")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(qualfied_name_parser_instance?.ParseSingleSave(index,unmanaged_type_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,";")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetUnmanagedType(unmanaged_type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            unmanaged_type_field = new QualfiedNameResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        UnmanagedTypeResult? result = new UnmanagedTypeResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,UnmanagedTypeResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        UnmanagedTypeResult? result = new UnmanagedTypeResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,UnmanagedTypeListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<UnmanagedType?>? results = new List<UnmanagedType?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            UnmanagedTypeResult? result = new UnmanagedTypeResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        UnmanagedTypeListResult? result = new UnmanagedTypeListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class UnmanagedTypeResult
{
    private UnmanagedType? value;
    private bool? result;

    public UnmanagedTypeResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(UnmanagedType? new_value)
    {
        this.value = new_value;
    }

    public UnmanagedType? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class UnmanagedTypeListResult
{
    private List<UnmanagedType?>? value;
    private bool? result;

    public UnmanagedTypeListResult()
    {
        this.value = new List<UnmanagedType?>();
        this.result = false;
    }

    public void SetValue(List<UnmanagedType?>? new_value)
    {
        this.value = new_value;
    }

    public List<UnmanagedType?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class UnmanagedType
{
    private LengthString? length_string;
    private QualfiedName? unmanaged_type_field;

    public UnmanagedType()
    {
        this.length_string = null;
        this.unmanaged_type_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetUnmanagedType(QualfiedName? input_value)
    {
        this.unmanaged_type_field = input_value;
    }

    public QualfiedName? GetUnmanagedType()
    {
        return this?.unmanaged_type_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DefinitionParser
{
    private ParserNetwork? parser_network;

    public DefinitionParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,DefinitionResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Definition? instance = new Definition();
        ClassDefResult? class_def_field = new ClassDefResult();
        InterfaceDefResult? interface_def_field = new InterfaceDefResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(interface_def_parser_instance?.ParseSingleSave(index,interface_def_field))))
        {
            instance?.SetClassDef(class_def_field?.GetValue());
            instance?.SetInterfaceDef(interface_def_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            class_def_field = new ClassDefResult();
            interface_def_field = new InterfaceDefResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(class_def_parser_instance?.ParseSingleSave(index,class_def_field))))
        {
            instance?.SetClassDef(class_def_field?.GetValue());
            instance?.SetInterfaceDef(interface_def_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            class_def_field = new ClassDefResult();
            interface_def_field = new InterfaceDefResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        DefinitionResult? result = new DefinitionResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,DefinitionResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        DefinitionResult? result = new DefinitionResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,DefinitionListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Definition?>? results = new List<Definition?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            DefinitionResult? result = new DefinitionResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        DefinitionListResult? result = new DefinitionListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DefinitionResult
{
    private Definition? value;
    private bool? result;

    public DefinitionResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Definition? new_value)
    {
        this.value = new_value;
    }

    public Definition? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DefinitionListResult
{
    private List<Definition?>? value;
    private bool? result;

    public DefinitionListResult()
    {
        this.value = new List<Definition?>();
        this.result = false;
    }

    public void SetValue(List<Definition?>? new_value)
    {
        this.value = new_value;
    }

    public List<Definition?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Definition
{
    private LengthString? length_string;
    private ClassDef? class_def_field;
    private InterfaceDef? interface_def_field;

    public Definition()
    {
        this.length_string = null;
        this.class_def_field = null;
        this.interface_def_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetClassDef(ClassDef? input_value)
    {
        this.class_def_field = input_value;
    }

    public ClassDef? GetClassDef()
    {
        return this?.class_def_field;
    }

    public void SetInterfaceDef(InterfaceDef? input_value)
    {
        this.interface_def_field = input_value;
    }

    public InterfaceDef? GetInterfaceDef()
    {
        return this?.interface_def_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class InterfaceDefParser
{
    private ParserNetwork? parser_network;

    public InterfaceDefParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,InterfaceDefResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        InterfaceDef? instance = new InterfaceDef();
        CommentResult? comment_field = new CommentResult();
        ContentDeclarationListResult? declarations_field = new ContentDeclarationListResult();
        NameResult? name_field = new NameResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"interface")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(name_parser_instance?.ParseSingleSave(index,name_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"{")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(content_declaration_parser_instance?.ParseManySave(index,declarations_field,0,-1)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"}")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetDeclarations(declarations_field?.GetValue());
            instance?.SetName(name_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            comment_field = new CommentResult();
            declarations_field = new ContentDeclarationListResult();
            name_field = new NameResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        InterfaceDefResult? result = new InterfaceDefResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,InterfaceDefResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        InterfaceDefResult? result = new InterfaceDefResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,InterfaceDefListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<InterfaceDef?>? results = new List<InterfaceDef?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            InterfaceDefResult? result = new InterfaceDefResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        InterfaceDefListResult? result = new InterfaceDefListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class InterfaceDefResult
{
    private InterfaceDef? value;
    private bool? result;

    public InterfaceDefResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(InterfaceDef? new_value)
    {
        this.value = new_value;
    }

    public InterfaceDef? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class InterfaceDefListResult
{
    private List<InterfaceDef?>? value;
    private bool? result;

    public InterfaceDefListResult()
    {
        this.value = new List<InterfaceDef?>();
        this.result = false;
    }

    public void SetValue(List<InterfaceDef?>? new_value)
    {
        this.value = new_value;
    }

    public List<InterfaceDef?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class InterfaceDef
{
    private LengthString? length_string;
    private Comment? comment_field;
    private List<ContentDeclaration?>? declarations_field;
    private Name? name_field;

    public InterfaceDef()
    {
        this.length_string = null;
        this.comment_field = null;
        this.declarations_field = new List<ContentDeclaration?>();
        this.name_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetComment(Comment? input_value)
    {
        this.comment_field = input_value;
    }

    public Comment? GetComment()
    {
        return this?.comment_field;
    }

    public void SetDeclarations(List<ContentDeclaration?>? input_value)
    {
        this.declarations_field = input_value;
    }

    public List<ContentDeclaration?>? GetDeclarations()
    {
        return this?.declarations_field;
    }

    public void SetName(Name? input_value)
    {
        this.name_field = input_value;
    }

    public Name? GetName()
    {
        return this?.name_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ClassDefParser
{
    private ParserNetwork? parser_network;

    public ClassDefParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ClassDefResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        ClassDef? instance = new ClassDef();
        CommentResult? comment_field = new CommentResult();
        ContentDefinitionListResult? definitions_field = new ContentDefinitionListResult();
        ImplementationSpecResult? implementing_field = new ImplementationSpecResult();
        NameResult? name_field = new NameResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"class")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(name_parser_instance?.ParseSingleSave(index,name_field)))&&AsBoolean(implementation_spec_parser_instance?.ParseOptionalSave(index,implementing_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"{")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(content_definition_parser_instance?.ParseManySave(index,definitions_field,0,-1)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"}")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetDefinitions(definitions_field?.GetValue());
            instance?.SetImplementing(implementing_field?.GetValue());
            instance?.SetName(name_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            comment_field = new CommentResult();
            definitions_field = new ContentDefinitionListResult();
            implementing_field = new ImplementationSpecResult();
            name_field = new NameResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ClassDefResult? result = new ClassDefResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ClassDefResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ClassDefResult? result = new ClassDefResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ClassDefListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<ClassDef?>? results = new List<ClassDef?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ClassDefResult? result = new ClassDefResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ClassDefListResult? result = new ClassDefListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ClassDefResult
{
    private ClassDef? value;
    private bool? result;

    public ClassDefResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(ClassDef? new_value)
    {
        this.value = new_value;
    }

    public ClassDef? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ClassDefListResult
{
    private List<ClassDef?>? value;
    private bool? result;

    public ClassDefListResult()
    {
        this.value = new List<ClassDef?>();
        this.result = false;
    }

    public void SetValue(List<ClassDef?>? new_value)
    {
        this.value = new_value;
    }

    public List<ClassDef?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ClassDef
{
    private LengthString? length_string;
    private Comment? comment_field;
    private List<ContentDefinition?>? definitions_field;
    private ImplementationSpec? implementing_field;
    private Name? name_field;

    public ClassDef()
    {
        this.length_string = null;
        this.comment_field = null;
        this.definitions_field = new List<ContentDefinition?>();
        this.implementing_field = null;
        this.name_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetComment(Comment? input_value)
    {
        this.comment_field = input_value;
    }

    public Comment? GetComment()
    {
        return this?.comment_field;
    }

    public void SetDefinitions(List<ContentDefinition?>? input_value)
    {
        this.definitions_field = input_value;
    }

    public List<ContentDefinition?>? GetDefinitions()
    {
        return this?.definitions_field;
    }

    public void SetImplementing(ImplementationSpec? input_value)
    {
        this.implementing_field = input_value;
    }

    public ImplementationSpec? GetImplementing()
    {
        return this?.implementing_field;
    }

    public void SetName(Name? input_value)
    {
        this.name_field = input_value;
    }

    public Name? GetName()
    {
        return this?.name_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ImplementationSpecParser
{
    private ParserNetwork? parser_network;

    public ImplementationSpecParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ImplementationSpecResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        ImplementationSpec? instance = new ImplementationSpec();
        QualfiedNameResult? interface_field = new QualfiedNameResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"implements")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(qualfied_name_parser_instance?.ParseSingleSave(index,interface_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetInterface(interface_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            interface_field = new QualfiedNameResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ImplementationSpecResult? result = new ImplementationSpecResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ImplementationSpecResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ImplementationSpecResult? result = new ImplementationSpecResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ImplementationSpecListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<ImplementationSpec?>? results = new List<ImplementationSpec?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ImplementationSpecResult? result = new ImplementationSpecResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ImplementationSpecListResult? result = new ImplementationSpecListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ImplementationSpecResult
{
    private ImplementationSpec? value;
    private bool? result;

    public ImplementationSpecResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(ImplementationSpec? new_value)
    {
        this.value = new_value;
    }

    public ImplementationSpec? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ImplementationSpecListResult
{
    private List<ImplementationSpec?>? value;
    private bool? result;

    public ImplementationSpecListResult()
    {
        this.value = new List<ImplementationSpec?>();
        this.result = false;
    }

    public void SetValue(List<ImplementationSpec?>? new_value)
    {
        this.value = new_value;
    }

    public List<ImplementationSpec?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ImplementationSpec
{
    private LengthString? length_string;
    private QualfiedName? interface_field;

    public ImplementationSpec()
    {
        this.length_string = null;
        this.interface_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetInterface(QualfiedName? input_value)
    {
        this.interface_field = input_value;
    }

    public QualfiedName? GetInterface()
    {
        return this?.interface_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ContentDeclarationParser
{
    private ParserNetwork? parser_network;

    public ContentDeclarationParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ContentDeclarationResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        ContentDeclaration? instance = new ContentDeclaration();
        CommentResult? comment_field = new CommentResult();
        NameResult? name_field = new NameResult();
        ParameterListDefResult? parameters_field = new ParameterListDefResult();
        ValueTypeResult? type_field = new ValueTypeResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"function")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(value_type_parser_instance?.ParseSingleSave(index,type_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(name_parser_instance?.ParseSingleSave(index,name_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"(")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(parameter_list_def_parser_instance?.ParseOptionalSave(index,parameters_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,")")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,";")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetName(name_field?.GetValue());
            instance?.SetParameters(parameters_field?.GetValue());
            instance?.SetType(type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            comment_field = new CommentResult();
            name_field = new NameResult();
            parameters_field = new ParameterListDefResult();
            type_field = new ValueTypeResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ContentDeclarationResult? result = new ContentDeclarationResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ContentDeclarationResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ContentDeclarationResult? result = new ContentDeclarationResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ContentDeclarationListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<ContentDeclaration?>? results = new List<ContentDeclaration?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ContentDeclarationResult? result = new ContentDeclarationResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ContentDeclarationListResult? result = new ContentDeclarationListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ContentDeclarationResult
{
    private ContentDeclaration? value;
    private bool? result;

    public ContentDeclarationResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(ContentDeclaration? new_value)
    {
        this.value = new_value;
    }

    public ContentDeclaration? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ContentDeclarationListResult
{
    private List<ContentDeclaration?>? value;
    private bool? result;

    public ContentDeclarationListResult()
    {
        this.value = new List<ContentDeclaration?>();
        this.result = false;
    }

    public void SetValue(List<ContentDeclaration?>? new_value)
    {
        this.value = new_value;
    }

    public List<ContentDeclaration?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ContentDeclaration
{
    private LengthString? length_string;
    private Comment? comment_field;
    private Name? name_field;
    private ParameterListDef? parameters_field;
    private ValueType? type_field;

    public ContentDeclaration()
    {
        this.length_string = null;
        this.comment_field = null;
        this.name_field = null;
        this.parameters_field = null;
        this.type_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetComment(Comment? input_value)
    {
        this.comment_field = input_value;
    }

    public Comment? GetComment()
    {
        return this?.comment_field;
    }

    public void SetName(Name? input_value)
    {
        this.name_field = input_value;
    }

    public Name? GetName()
    {
        return this?.name_field;
    }

    public void SetParameters(ParameterListDef? input_value)
    {
        this.parameters_field = input_value;
    }

    public ParameterListDef? GetParameters()
    {
        return this?.parameters_field;
    }

    public void SetType(ValueType? input_value)
    {
        this.type_field = input_value;
    }

    public ValueType? ReservedPrefixGetType()
    {
        return this?.type_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ContentDefinitionParser
{
    private ParserNetwork? parser_network;

    public ContentDefinitionParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ContentDefinitionResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        ContentDefinition? instance = new ContentDefinition();
        CommentResult? comment_field = new CommentResult();
        CodeBlockResult? function_body_field = new CodeBlockResult();
        NameResult? name_field = new NameResult();
        ParameterListDefResult? parameters_field = new ParameterListDefResult();
        ValueTypeResult? type_field = new ValueTypeResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"function")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(value_type_parser_instance?.ParseSingleSave(index,type_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(name_parser_instance?.ParseSingleSave(index,name_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"(")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(parameter_list_def_parser_instance?.ParseOptionalSave(index,parameters_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,")")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(code_block_parser_instance?.ParseSingleSave(index,function_body_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetFunctionBody(function_body_field?.GetValue());
            instance?.SetName(name_field?.GetValue());
            instance?.SetParameters(parameters_field?.GetValue());
            instance?.SetType(type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            comment_field = new CommentResult();
            function_body_field = new CodeBlockResult();
            name_field = new NameResult();
            parameters_field = new ParameterListDefResult();
            type_field = new ValueTypeResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(value_type_parser_instance?.ParseSingleSave(index,type_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(name_parser_instance?.ParseSingleSave(index,name_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,";")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetFunctionBody(function_body_field?.GetValue());
            instance?.SetName(name_field?.GetValue());
            instance?.SetParameters(parameters_field?.GetValue());
            instance?.SetType(type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            comment_field = new CommentResult();
            function_body_field = new CodeBlockResult();
            name_field = new NameResult();
            parameters_field = new ParameterListDefResult();
            type_field = new ValueTypeResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ContentDefinitionResult? result = new ContentDefinitionResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ContentDefinitionResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ContentDefinitionResult? result = new ContentDefinitionResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ContentDefinitionListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<ContentDefinition?>? results = new List<ContentDefinition?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ContentDefinitionResult? result = new ContentDefinitionResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ContentDefinitionListResult? result = new ContentDefinitionListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ContentDefinitionResult
{
    private ContentDefinition? value;
    private bool? result;

    public ContentDefinitionResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(ContentDefinition? new_value)
    {
        this.value = new_value;
    }

    public ContentDefinition? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ContentDefinitionListResult
{
    private List<ContentDefinition?>? value;
    private bool? result;

    public ContentDefinitionListResult()
    {
        this.value = new List<ContentDefinition?>();
        this.result = false;
    }

    public void SetValue(List<ContentDefinition?>? new_value)
    {
        this.value = new_value;
    }

    public List<ContentDefinition?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ContentDefinition
{
    private LengthString? length_string;
    private Comment? comment_field;
    private CodeBlock? function_body_field;
    private Name? name_field;
    private ParameterListDef? parameters_field;
    private ValueType? type_field;

    public ContentDefinition()
    {
        this.length_string = null;
        this.comment_field = null;
        this.function_body_field = null;
        this.name_field = null;
        this.parameters_field = null;
        this.type_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetComment(Comment? input_value)
    {
        this.comment_field = input_value;
    }

    public Comment? GetComment()
    {
        return this?.comment_field;
    }

    public void SetFunctionBody(CodeBlock? input_value)
    {
        this.function_body_field = input_value;
    }

    public CodeBlock? GetFunctionBody()
    {
        return this?.function_body_field;
    }

    public void SetName(Name? input_value)
    {
        this.name_field = input_value;
    }

    public Name? GetName()
    {
        return this?.name_field;
    }

    public void SetParameters(ParameterListDef? input_value)
    {
        this.parameters_field = input_value;
    }

    public ParameterListDef? GetParameters()
    {
        return this?.parameters_field;
    }

    public void SetType(ValueType? input_value)
    {
        this.type_field = input_value;
    }

    public ValueType? ReservedPrefixGetType()
    {
        return this?.type_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class PrimativeTypeParser
{
    private ParserNetwork? parser_network;

    public PrimativeTypeParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,PrimativeTypeResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        PrimativeType? instance = new PrimativeType();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"int"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"string"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"bool"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"float"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"void"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        PrimativeTypeResult? result = new PrimativeTypeResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,PrimativeTypeResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        PrimativeTypeResult? result = new PrimativeTypeResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,PrimativeTypeListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<PrimativeType?>? results = new List<PrimativeType?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            PrimativeTypeResult? result = new PrimativeTypeResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        PrimativeTypeListResult? result = new PrimativeTypeListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class PrimativeTypeResult
{
    private PrimativeType? value;
    private bool? result;

    public PrimativeTypeResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(PrimativeType? new_value)
    {
        this.value = new_value;
    }

    public PrimativeType? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class PrimativeTypeListResult
{
    private List<PrimativeType?>? value;
    private bool? result;

    public PrimativeTypeListResult()
    {
        this.value = new List<PrimativeType?>();
        this.result = false;
    }

    public void SetValue(List<PrimativeType?>? new_value)
    {
        this.value = new_value;
    }

    public List<PrimativeType?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class PrimativeType
{
    private LengthString? length_string;

    public PrimativeType()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DefinedTypeParser
{
    private ParserNetwork? parser_network;

    public DefinedTypeParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,DefinedTypeResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        DefinedType? instance = new DefinedType();
        QualfiedNameResult? name_field = new QualfiedNameResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(qualfied_name_parser_instance?.ParseSingleSave(index,name_field))))
        {
            instance?.SetName(name_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            name_field = new QualfiedNameResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        DefinedTypeResult? result = new DefinedTypeResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,DefinedTypeResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        DefinedTypeResult? result = new DefinedTypeResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,DefinedTypeListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<DefinedType?>? results = new List<DefinedType?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            DefinedTypeResult? result = new DefinedTypeResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        DefinedTypeListResult? result = new DefinedTypeListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DefinedTypeResult
{
    private DefinedType? value;
    private bool? result;

    public DefinedTypeResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(DefinedType? new_value)
    {
        this.value = new_value;
    }

    public DefinedType? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DefinedTypeListResult
{
    private List<DefinedType?>? value;
    private bool? result;

    public DefinedTypeListResult()
    {
        this.value = new List<DefinedType?>();
        this.result = false;
    }

    public void SetValue(List<DefinedType?>? new_value)
    {
        this.value = new_value;
    }

    public List<DefinedType?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DefinedType
{
    private LengthString? length_string;
    private QualfiedName? name_field;

    public DefinedType()
    {
        this.length_string = null;
        this.name_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetName(QualfiedName? input_value)
    {
        this.name_field = input_value;
    }

    public QualfiedName? GetName()
    {
        return this?.name_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class SingletonTypeParser
{
    private ParserNetwork? parser_network;

    public SingletonTypeParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,SingletonTypeResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        SingletonType? instance = new SingletonType();
        DefinedTypeResult? defined_type_field = new DefinedTypeResult();
        PrimativeTypeResult? primative_type_field = new PrimativeTypeResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(primative_type_parser_instance?.ParseSingleSave(index,primative_type_field))))
        {
            instance?.SetDefinedType(defined_type_field?.GetValue());
            instance?.SetPrimativeType(primative_type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            defined_type_field = new DefinedTypeResult();
            primative_type_field = new PrimativeTypeResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(defined_type_parser_instance?.ParseSingleSave(index,defined_type_field))))
        {
            instance?.SetDefinedType(defined_type_field?.GetValue());
            instance?.SetPrimativeType(primative_type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            defined_type_field = new DefinedTypeResult();
            primative_type_field = new PrimativeTypeResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        SingletonTypeResult? result = new SingletonTypeResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,SingletonTypeResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        SingletonTypeResult? result = new SingletonTypeResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,SingletonTypeListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<SingletonType?>? results = new List<SingletonType?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            SingletonTypeResult? result = new SingletonTypeResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        SingletonTypeListResult? result = new SingletonTypeListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class SingletonTypeResult
{
    private SingletonType? value;
    private bool? result;

    public SingletonTypeResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(SingletonType? new_value)
    {
        this.value = new_value;
    }

    public SingletonType? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class SingletonTypeListResult
{
    private List<SingletonType?>? value;
    private bool? result;

    public SingletonTypeListResult()
    {
        this.value = new List<SingletonType?>();
        this.result = false;
    }

    public void SetValue(List<SingletonType?>? new_value)
    {
        this.value = new_value;
    }

    public List<SingletonType?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class SingletonType
{
    private LengthString? length_string;
    private DefinedType? defined_type_field;
    private PrimativeType? primative_type_field;

    public SingletonType()
    {
        this.length_string = null;
        this.defined_type_field = null;
        this.primative_type_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetDefinedType(DefinedType? input_value)
    {
        this.defined_type_field = input_value;
    }

    public DefinedType? GetDefinedType()
    {
        return this?.defined_type_field;
    }

    public void SetPrimativeType(PrimativeType? input_value)
    {
        this.primative_type_field = input_value;
    }

    public PrimativeType? GetPrimativeType()
    {
        return this?.primative_type_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DimensionalNoteParser
{
    private ParserNetwork? parser_network;

    public DimensionalNoteParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,DimensionalNoteResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        DimensionalNote? instance = new DimensionalNote();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"[")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"]"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        DimensionalNoteResult? result = new DimensionalNoteResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,DimensionalNoteResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        DimensionalNoteResult? result = new DimensionalNoteResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,DimensionalNoteListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<DimensionalNote?>? results = new List<DimensionalNote?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            DimensionalNoteResult? result = new DimensionalNoteResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        DimensionalNoteListResult? result = new DimensionalNoteListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DimensionalNoteResult
{
    private DimensionalNote? value;
    private bool? result;

    public DimensionalNoteResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(DimensionalNote? new_value)
    {
        this.value = new_value;
    }

    public DimensionalNote? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DimensionalNoteListResult
{
    private List<DimensionalNote?>? value;
    private bool? result;

    public DimensionalNoteListResult()
    {
        this.value = new List<DimensionalNote?>();
        this.result = false;
    }

    public void SetValue(List<DimensionalNote?>? new_value)
    {
        this.value = new_value;
    }

    public List<DimensionalNote?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DimensionalNote
{
    private LengthString? length_string;

    public DimensionalNote()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DimensionalTypeParser
{
    private ParserNetwork? parser_network;

    public DimensionalTypeParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,DimensionalTypeResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        DimensionalType? instance = new DimensionalType();
        DimensionalNoteListResult? dimensional_note_field = new DimensionalNoteListResult();
        SingletonTypeResult? singleton_type_field = new SingletonTypeResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(singleton_type_parser_instance?.ParseSingleSave(index,singleton_type_field)))&&AsBoolean(dimensional_note_parser_instance?.ParseManySave(index,dimensional_note_field,1,-1))))
        {
            instance?.SetDimensionalNote(dimensional_note_field?.GetValue());
            instance?.SetSingletonType(singleton_type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            dimensional_note_field = new DimensionalNoteListResult();
            singleton_type_field = new SingletonTypeResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        DimensionalTypeResult? result = new DimensionalTypeResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,DimensionalTypeResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        DimensionalTypeResult? result = new DimensionalTypeResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,DimensionalTypeListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<DimensionalType?>? results = new List<DimensionalType?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            DimensionalTypeResult? result = new DimensionalTypeResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        DimensionalTypeListResult? result = new DimensionalTypeListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DimensionalTypeResult
{
    private DimensionalType? value;
    private bool? result;

    public DimensionalTypeResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(DimensionalType? new_value)
    {
        this.value = new_value;
    }

    public DimensionalType? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DimensionalTypeListResult
{
    private List<DimensionalType?>? value;
    private bool? result;

    public DimensionalTypeListResult()
    {
        this.value = new List<DimensionalType?>();
        this.result = false;
    }

    public void SetValue(List<DimensionalType?>? new_value)
    {
        this.value = new_value;
    }

    public List<DimensionalType?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DimensionalType
{
    private LengthString? length_string;
    private List<DimensionalNote?>? dimensional_note_field;
    private SingletonType? singleton_type_field;

    public DimensionalType()
    {
        this.length_string = null;
        this.dimensional_note_field = new List<DimensionalNote?>();
        this.singleton_type_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetDimensionalNote(List<DimensionalNote?>? input_value)
    {
        this.dimensional_note_field = input_value;
    }

    public List<DimensionalNote?>? GetDimensionalNote()
    {
        return this?.dimensional_note_field;
    }

    public void SetSingletonType(SingletonType? input_value)
    {
        this.singleton_type_field = input_value;
    }

    public SingletonType? GetSingletonType()
    {
        return this?.singleton_type_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class MapNoteParser
{
    private ParserNetwork? parser_network;

    public MapNoteParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,MapNoteResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        MapNote? instance = new MapNote();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"{")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"}"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        MapNoteResult? result = new MapNoteResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,MapNoteResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        MapNoteResult? result = new MapNoteResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,MapNoteListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<MapNote?>? results = new List<MapNote?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            MapNoteResult? result = new MapNoteResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        MapNoteListResult? result = new MapNoteListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class MapNoteResult
{
    private MapNote? value;
    private bool? result;

    public MapNoteResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(MapNote? new_value)
    {
        this.value = new_value;
    }

    public MapNote? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class MapNoteListResult
{
    private List<MapNote?>? value;
    private bool? result;

    public MapNoteListResult()
    {
        this.value = new List<MapNote?>();
        this.result = false;
    }

    public void SetValue(List<MapNote?>? new_value)
    {
        this.value = new_value;
    }

    public List<MapNote?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class MapNote
{
    private LengthString? length_string;

    public MapNote()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class MapTypeParser
{
    private ParserNetwork? parser_network;

    public MapTypeParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,MapTypeResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        MapType? instance = new MapType();
        MapNoteResult? map_note_field = new MapNoteResult();
        SingletonTypeResult? singleton_type_field = new SingletonTypeResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(singleton_type_parser_instance?.ParseSingleSave(index,singleton_type_field)))&&AsBoolean(map_note_parser_instance?.ParseSingleSave(index,map_note_field))))
        {
            instance?.SetMapNote(map_note_field?.GetValue());
            instance?.SetSingletonType(singleton_type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            map_note_field = new MapNoteResult();
            singleton_type_field = new SingletonTypeResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        MapTypeResult? result = new MapTypeResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,MapTypeResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        MapTypeResult? result = new MapTypeResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,MapTypeListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<MapType?>? results = new List<MapType?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            MapTypeResult? result = new MapTypeResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        MapTypeListResult? result = new MapTypeListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class MapTypeResult
{
    private MapType? value;
    private bool? result;

    public MapTypeResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(MapType? new_value)
    {
        this.value = new_value;
    }

    public MapType? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class MapTypeListResult
{
    private List<MapType?>? value;
    private bool? result;

    public MapTypeListResult()
    {
        this.value = new List<MapType?>();
        this.result = false;
    }

    public void SetValue(List<MapType?>? new_value)
    {
        this.value = new_value;
    }

    public List<MapType?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class MapType
{
    private LengthString? length_string;
    private MapNote? map_note_field;
    private SingletonType? singleton_type_field;

    public MapType()
    {
        this.length_string = null;
        this.map_note_field = null;
        this.singleton_type_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetMapNote(MapNote? input_value)
    {
        this.map_note_field = input_value;
    }

    public MapNote? GetMapNote()
    {
        return this?.map_note_field;
    }

    public void SetSingletonType(SingletonType? input_value)
    {
        this.singleton_type_field = input_value;
    }

    public SingletonType? GetSingletonType()
    {
        return this?.singleton_type_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ValueTypeParser
{
    private ParserNetwork? parser_network;

    public ValueTypeParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ValueTypeResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        ValueType? instance = new ValueType();
        DimensionalTypeResult? dimensional_type_field = new DimensionalTypeResult();
        MapTypeResult? map_type_field = new MapTypeResult();
        SingletonTypeResult? singleton_type_field = new SingletonTypeResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(dimensional_type_parser_instance?.ParseSingleSave(index,dimensional_type_field))))
        {
            instance?.SetDimensionalType(dimensional_type_field?.GetValue());
            instance?.SetMapType(map_type_field?.GetValue());
            instance?.SetSingletonType(singleton_type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            dimensional_type_field = new DimensionalTypeResult();
            map_type_field = new MapTypeResult();
            singleton_type_field = new SingletonTypeResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(map_type_parser_instance?.ParseSingleSave(index,map_type_field))))
        {
            instance?.SetDimensionalType(dimensional_type_field?.GetValue());
            instance?.SetMapType(map_type_field?.GetValue());
            instance?.SetSingletonType(singleton_type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            dimensional_type_field = new DimensionalTypeResult();
            map_type_field = new MapTypeResult();
            singleton_type_field = new SingletonTypeResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(singleton_type_parser_instance?.ParseSingleSave(index,singleton_type_field))))
        {
            instance?.SetDimensionalType(dimensional_type_field?.GetValue());
            instance?.SetMapType(map_type_field?.GetValue());
            instance?.SetSingletonType(singleton_type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            dimensional_type_field = new DimensionalTypeResult();
            map_type_field = new MapTypeResult();
            singleton_type_field = new SingletonTypeResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ValueTypeResult? result = new ValueTypeResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ValueTypeResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ValueTypeResult? result = new ValueTypeResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ValueTypeListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<ValueType?>? results = new List<ValueType?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ValueTypeResult? result = new ValueTypeResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ValueTypeListResult? result = new ValueTypeListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ValueTypeResult
{
    private ValueType? value;
    private bool? result;

    public ValueTypeResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(ValueType? new_value)
    {
        this.value = new_value;
    }

    public ValueType? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ValueTypeListResult
{
    private List<ValueType?>? value;
    private bool? result;

    public ValueTypeListResult()
    {
        this.value = new List<ValueType?>();
        this.result = false;
    }

    public void SetValue(List<ValueType?>? new_value)
    {
        this.value = new_value;
    }

    public List<ValueType?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ValueType
{
    private LengthString? length_string;
    private DimensionalType? dimensional_type_field;
    private MapType? map_type_field;
    private SingletonType? singleton_type_field;

    public ValueType()
    {
        this.length_string = null;
        this.dimensional_type_field = null;
        this.map_type_field = null;
        this.singleton_type_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetDimensionalType(DimensionalType? input_value)
    {
        this.dimensional_type_field = input_value;
    }

    public DimensionalType? GetDimensionalType()
    {
        return this?.dimensional_type_field;
    }

    public void SetMapType(MapType? input_value)
    {
        this.map_type_field = input_value;
    }

    public MapType? GetMapType()
    {
        return this?.map_type_field;
    }

    public void SetSingletonType(SingletonType? input_value)
    {
        this.singleton_type_field = input_value;
    }

    public SingletonType? GetSingletonType()
    {
        return this?.singleton_type_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ParameterListDefParser
{
    private ParserNetwork? parser_network;

    public ParameterListDefParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ParameterListDefResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        ParameterListDef? instance = new ParameterListDef();
        NameResult? name_field = new NameResult();
        ParameterListDefResult? parameter_tail_field = new ParameterListDefResult();
        ValueTypeResult? type_field = new ValueTypeResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(value_type_parser_instance?.ParseSingleSave(index,type_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(name_parser_instance?.ParseSingleSave(index,name_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,",")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(parameter_list_def_parser_instance?.ParseSingleSave(index,parameter_tail_field))))
        {
            instance?.SetName(name_field?.GetValue());
            instance?.SetParameterTail(parameter_tail_field?.GetValue());
            instance?.SetType(type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            name_field = new NameResult();
            parameter_tail_field = new ParameterListDefResult();
            type_field = new ValueTypeResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(value_type_parser_instance?.ParseSingleSave(index,type_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(name_parser_instance?.ParseSingleSave(index,name_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetName(name_field?.GetValue());
            instance?.SetParameterTail(parameter_tail_field?.GetValue());
            instance?.SetType(type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            name_field = new NameResult();
            parameter_tail_field = new ParameterListDefResult();
            type_field = new ValueTypeResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ParameterListDefResult? result = new ParameterListDefResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ParameterListDefResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ParameterListDefResult? result = new ParameterListDefResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ParameterListDefListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<ParameterListDef?>? results = new List<ParameterListDef?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ParameterListDefResult? result = new ParameterListDefResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ParameterListDefListResult? result = new ParameterListDefListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ParameterListDefResult
{
    private ParameterListDef? value;
    private bool? result;

    public ParameterListDefResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(ParameterListDef? new_value)
    {
        this.value = new_value;
    }

    public ParameterListDef? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ParameterListDefListResult
{
    private List<ParameterListDef?>? value;
    private bool? result;

    public ParameterListDefListResult()
    {
        this.value = new List<ParameterListDef?>();
        this.result = false;
    }

    public void SetValue(List<ParameterListDef?>? new_value)
    {
        this.value = new_value;
    }

    public List<ParameterListDef?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ParameterListDef
{
    private LengthString? length_string;
    private Name? name_field;
    private ParameterListDef? parameter_tail_field;
    private ValueType? type_field;

    public ParameterListDef()
    {
        this.length_string = null;
        this.name_field = null;
        this.parameter_tail_field = null;
        this.type_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetName(Name? input_value)
    {
        this.name_field = input_value;
    }

    public Name? GetName()
    {
        return this?.name_field;
    }

    public void SetParameterTail(ParameterListDef? input_value)
    {
        this.parameter_tail_field = input_value;
    }

    public ParameterListDef? GetParameterTail()
    {
        return this?.parameter_tail_field;
    }

    public void SetType(ValueType? input_value)
    {
        this.type_field = input_value;
    }

    public ValueType? ReservedPrefixGetType()
    {
        return this?.type_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ParameterListParser
{
    private ParserNetwork? parser_network;

    public ParameterListParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ParameterListResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        ParameterList? instance = new ParameterList();
        ParameterListResult? parameter_tail_field = new ParameterListResult();
        RValueResult? r_value_field = new RValueResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(r_value_parser_instance?.ParseSingleSave(index,r_value_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,",")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(parameter_list_parser_instance?.ParseSingleSave(index,parameter_tail_field))))
        {
            instance?.SetParameterTail(parameter_tail_field?.GetValue());
            instance?.SetRValue(r_value_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            parameter_tail_field = new ParameterListResult();
            r_value_field = new RValueResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(r_value_parser_instance?.ParseSingleSave(index,r_value_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetParameterTail(parameter_tail_field?.GetValue());
            instance?.SetRValue(r_value_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            parameter_tail_field = new ParameterListResult();
            r_value_field = new RValueResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ParameterListResult? result = new ParameterListResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ParameterListResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ParameterListResult? result = new ParameterListResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ParameterListListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<ParameterList?>? results = new List<ParameterList?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ParameterListResult? result = new ParameterListResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ParameterListListResult? result = new ParameterListListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ParameterListResult
{
    private ParameterList? value;
    private bool? result;

    public ParameterListResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(ParameterList? new_value)
    {
        this.value = new_value;
    }

    public ParameterList? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ParameterListListResult
{
    private List<ParameterList?>? value;
    private bool? result;

    public ParameterListListResult()
    {
        this.value = new List<ParameterList?>();
        this.result = false;
    }

    public void SetValue(List<ParameterList?>? new_value)
    {
        this.value = new_value;
    }

    public List<ParameterList?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ParameterList
{
    private LengthString? length_string;
    private ParameterList? parameter_tail_field;
    private RValue? r_value_field;

    public ParameterList()
    {
        this.length_string = null;
        this.parameter_tail_field = null;
        this.r_value_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetParameterTail(ParameterList? input_value)
    {
        this.parameter_tail_field = input_value;
    }

    public ParameterList? GetParameterTail()
    {
        return this?.parameter_tail_field;
    }

    public void SetRValue(RValue? input_value)
    {
        this.r_value_field = input_value;
    }

    public RValue? GetRValue()
    {
        return this?.r_value_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CodeBlockParser
{
    private ParserNetwork? parser_network;

    public CodeBlockParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,CodeBlockResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        CodeBlock? instance = new CodeBlock();
        InstructionListResult? instructions_field = new InstructionListResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"{")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(instruction_parser_instance?.ParseManySave(index,instructions_field,0,-1)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"}")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetInstructions(instructions_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            instructions_field = new InstructionListResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        CodeBlockResult? result = new CodeBlockResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,CodeBlockResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        CodeBlockResult? result = new CodeBlockResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,CodeBlockListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<CodeBlock?>? results = new List<CodeBlock?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            CodeBlockResult? result = new CodeBlockResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        CodeBlockListResult? result = new CodeBlockListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CodeBlockResult
{
    private CodeBlock? value;
    private bool? result;

    public CodeBlockResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(CodeBlock? new_value)
    {
        this.value = new_value;
    }

    public CodeBlock? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CodeBlockListResult
{
    private List<CodeBlock?>? value;
    private bool? result;

    public CodeBlockListResult()
    {
        this.value = new List<CodeBlock?>();
        this.result = false;
    }

    public void SetValue(List<CodeBlock?>? new_value)
    {
        this.value = new_value;
    }

    public List<CodeBlock?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CodeBlock
{
    private LengthString? length_string;
    private List<Instruction?>? instructions_field;

    public CodeBlock()
    {
        this.length_string = null;
        this.instructions_field = new List<Instruction?>();
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetInstructions(List<Instruction?>? input_value)
    {
        this.instructions_field = input_value;
    }

    public List<Instruction?>? GetInstructions()
    {
        return this?.instructions_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DeclarationAssignParser
{
    private ParserNetwork? parser_network;

    public DeclarationAssignParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,DeclarationAssignResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        DeclarationAssign? instance = new DeclarationAssign();
        RValueResult? r_value_field = new RValueResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"=")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(r_value_parser_instance?.ParseSingleSave(index,r_value_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetRValue(r_value_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            r_value_field = new RValueResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        DeclarationAssignResult? result = new DeclarationAssignResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,DeclarationAssignResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        DeclarationAssignResult? result = new DeclarationAssignResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,DeclarationAssignListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<DeclarationAssign?>? results = new List<DeclarationAssign?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            DeclarationAssignResult? result = new DeclarationAssignResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        DeclarationAssignListResult? result = new DeclarationAssignListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DeclarationAssignResult
{
    private DeclarationAssign? value;
    private bool? result;

    public DeclarationAssignResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(DeclarationAssign? new_value)
    {
        this.value = new_value;
    }

    public DeclarationAssign? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DeclarationAssignListResult
{
    private List<DeclarationAssign?>? value;
    private bool? result;

    public DeclarationAssignListResult()
    {
        this.value = new List<DeclarationAssign?>();
        this.result = false;
    }

    public void SetValue(List<DeclarationAssign?>? new_value)
    {
        this.value = new_value;
    }

    public List<DeclarationAssign?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DeclarationAssign
{
    private LengthString? length_string;
    private RValue? r_value_field;

    public DeclarationAssign()
    {
        this.length_string = null;
        this.r_value_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetRValue(RValue? input_value)
    {
        this.r_value_field = input_value;
    }

    public RValue? GetRValue()
    {
        return this?.r_value_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DeclarationParser
{
    private ParserNetwork? parser_network;

    public DeclarationParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,DeclarationResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Declaration? instance = new Declaration();
        DeclarationAssignResult? assignment_field = new DeclarationAssignResult();
        NameResult? name_field = new NameResult();
        ValueTypeResult? type_field = new ValueTypeResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(value_type_parser_instance?.ParseSingleSave(index,type_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(name_parser_instance?.ParseSingleSave(index,name_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(declaration_assign_parser_instance?.ParseOptionalSave(index,assignment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,";")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetAssignment(assignment_field?.GetValue());
            instance?.SetName(name_field?.GetValue());
            instance?.SetType(type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            assignment_field = new DeclarationAssignResult();
            name_field = new NameResult();
            type_field = new ValueTypeResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        DeclarationResult? result = new DeclarationResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,DeclarationResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        DeclarationResult? result = new DeclarationResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,DeclarationListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Declaration?>? results = new List<Declaration?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            DeclarationResult? result = new DeclarationResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        DeclarationListResult? result = new DeclarationListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DeclarationResult
{
    private Declaration? value;
    private bool? result;

    public DeclarationResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Declaration? new_value)
    {
        this.value = new_value;
    }

    public Declaration? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DeclarationListResult
{
    private List<Declaration?>? value;
    private bool? result;

    public DeclarationListResult()
    {
        this.value = new List<Declaration?>();
        this.result = false;
    }

    public void SetValue(List<Declaration?>? new_value)
    {
        this.value = new_value;
    }

    public List<Declaration?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Declaration
{
    private LengthString? length_string;
    private DeclarationAssign? assignment_field;
    private Name? name_field;
    private ValueType? type_field;

    public Declaration()
    {
        this.length_string = null;
        this.assignment_field = null;
        this.name_field = null;
        this.type_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetAssignment(DeclarationAssign? input_value)
    {
        this.assignment_field = input_value;
    }

    public DeclarationAssign? GetAssignment()
    {
        return this?.assignment_field;
    }

    public void SetName(Name? input_value)
    {
        this.name_field = input_value;
    }

    public Name? GetName()
    {
        return this?.name_field;
    }

    public void SetType(ValueType? input_value)
    {
        this.type_field = input_value;
    }

    public ValueType? ReservedPrefixGetType()
    {
        return this?.type_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class AssignmentParser
{
    private ParserNetwork? parser_network;

    public AssignmentParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,AssignmentResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Assignment? instance = new Assignment();
        QualfiedNameResult? l_value_field = new QualfiedNameResult();
        RValueResult? r_value_field = new RValueResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(qualfied_name_parser_instance?.ParseSingleSave(index,l_value_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"=")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(r_value_parser_instance?.ParseSingleSave(index,r_value_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,";")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetLValue(l_value_field?.GetValue());
            instance?.SetRValue(r_value_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            l_value_field = new QualfiedNameResult();
            r_value_field = new RValueResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        AssignmentResult? result = new AssignmentResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,AssignmentResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        AssignmentResult? result = new AssignmentResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,AssignmentListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Assignment?>? results = new List<Assignment?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            AssignmentResult? result = new AssignmentResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        AssignmentListResult? result = new AssignmentListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class AssignmentResult
{
    private Assignment? value;
    private bool? result;

    public AssignmentResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Assignment? new_value)
    {
        this.value = new_value;
    }

    public Assignment? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class AssignmentListResult
{
    private List<Assignment?>? value;
    private bool? result;

    public AssignmentListResult()
    {
        this.value = new List<Assignment?>();
        this.result = false;
    }

    public void SetValue(List<Assignment?>? new_value)
    {
        this.value = new_value;
    }

    public List<Assignment?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Assignment
{
    private LengthString? length_string;
    private QualfiedName? l_value_field;
    private RValue? r_value_field;

    public Assignment()
    {
        this.length_string = null;
        this.l_value_field = null;
        this.r_value_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetLValue(QualfiedName? input_value)
    {
        this.l_value_field = input_value;
    }

    public QualfiedName? GetLValue()
    {
        return this?.l_value_field;
    }

    public void SetRValue(RValue? input_value)
    {
        this.r_value_field = input_value;
    }

    public RValue? GetRValue()
    {
        return this?.r_value_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ReturnParser
{
    private ParserNetwork? parser_network;

    public ReturnParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ReturnResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Return? instance = new Return();
        RValueResult? r_value_field = new RValueResult();
        StringResult? rtn_field = new StringResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"return",rtn_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(r_value_parser_instance?.ParseSingleSave(index,r_value_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,";")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetRValue(r_value_field?.GetValue());
            instance?.SetRtn(rtn_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            r_value_field = new RValueResult();
            rtn_field = new StringResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ReturnResult? result = new ReturnResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ReturnResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ReturnResult? result = new ReturnResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ReturnListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Return?>? results = new List<Return?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ReturnResult? result = new ReturnResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ReturnListResult? result = new ReturnListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ReturnResult
{
    private Return? value;
    private bool? result;

    public ReturnResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Return? new_value)
    {
        this.value = new_value;
    }

    public Return? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ReturnListResult
{
    private List<Return?>? value;
    private bool? result;

    public ReturnListResult()
    {
        this.value = new List<Return?>();
        this.result = false;
    }

    public void SetValue(List<Return?>? new_value)
    {
        this.value = new_value;
    }

    public List<Return?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Return
{
    private LengthString? length_string;
    private RValue? r_value_field;
    private String? rtn_field;

    public Return()
    {
        this.length_string = null;
        this.r_value_field = null;
        this.rtn_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetRValue(RValue? input_value)
    {
        this.r_value_field = input_value;
    }

    public RValue? GetRValue()
    {
        return this?.r_value_field;
    }

    public void SetRtn(String? input_value)
    {
        this.rtn_field = input_value;
    }

    public String? GetRtn()
    {
        return this?.rtn_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ElseTailParser
{
    private ParserNetwork? parser_network;

    public ElseTailParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ElseTailResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        ElseTail? instance = new ElseTail();
        CodeBlockResult? code_block_field = new CodeBlockResult();
        StringResult? else_key_field = new StringResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"else",else_key_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(code_block_parser_instance?.ParseSingleSave(index,code_block_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetCodeBlock(code_block_field?.GetValue());
            instance?.SetElseKey(else_key_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            code_block_field = new CodeBlockResult();
            else_key_field = new StringResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ElseTailResult? result = new ElseTailResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ElseTailResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ElseTailResult? result = new ElseTailResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ElseTailListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<ElseTail?>? results = new List<ElseTail?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ElseTailResult? result = new ElseTailResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ElseTailListResult? result = new ElseTailListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ElseTailResult
{
    private ElseTail? value;
    private bool? result;

    public ElseTailResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(ElseTail? new_value)
    {
        this.value = new_value;
    }

    public ElseTail? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ElseTailListResult
{
    private List<ElseTail?>? value;
    private bool? result;

    public ElseTailListResult()
    {
        this.value = new List<ElseTail?>();
        this.result = false;
    }

    public void SetValue(List<ElseTail?>? new_value)
    {
        this.value = new_value;
    }

    public List<ElseTail?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ElseTail
{
    private LengthString? length_string;
    private CodeBlock? code_block_field;
    private String? else_key_field;

    public ElseTail()
    {
        this.length_string = null;
        this.code_block_field = null;
        this.else_key_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetCodeBlock(CodeBlock? input_value)
    {
        this.code_block_field = input_value;
    }

    public CodeBlock? GetCodeBlock()
    {
        return this?.code_block_field;
    }

    public void SetElseKey(String? input_value)
    {
        this.else_key_field = input_value;
    }

    public String? GetElseKey()
    {
        return this?.else_key_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ConditionalParser
{
    private ParserNetwork? parser_network;

    public ConditionalParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ConditionalResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Conditional? instance = new Conditional();
        CodeBlockResult? code_block_field = new CodeBlockResult();
        StringResult? conditional_key_field = new StringResult();
        ElseTailResult? else_tail_field = new ElseTailResult();
        RValueResult? r_value_field = new RValueResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"if",conditional_key_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"(")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(r_value_parser_instance?.ParseSingleSave(index,r_value_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,")")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(code_block_parser_instance?.ParseSingleSave(index,code_block_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(else_tail_parser_instance?.ParseOptionalSave(index,else_tail_field))))
        {
            instance?.SetCodeBlock(code_block_field?.GetValue());
            instance?.SetConditionalKey(conditional_key_field?.GetValue());
            instance?.SetElseTail(else_tail_field?.GetValue());
            instance?.SetRValue(r_value_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            code_block_field = new CodeBlockResult();
            conditional_key_field = new StringResult();
            else_tail_field = new ElseTailResult();
            r_value_field = new RValueResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ConditionalResult? result = new ConditionalResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ConditionalResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ConditionalResult? result = new ConditionalResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ConditionalListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Conditional?>? results = new List<Conditional?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ConditionalResult? result = new ConditionalResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ConditionalListResult? result = new ConditionalListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ConditionalResult
{
    private Conditional? value;
    private bool? result;

    public ConditionalResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Conditional? new_value)
    {
        this.value = new_value;
    }

    public Conditional? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ConditionalListResult
{
    private List<Conditional?>? value;
    private bool? result;

    public ConditionalListResult()
    {
        this.value = new List<Conditional?>();
        this.result = false;
    }

    public void SetValue(List<Conditional?>? new_value)
    {
        this.value = new_value;
    }

    public List<Conditional?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Conditional
{
    private LengthString? length_string;
    private CodeBlock? code_block_field;
    private String? conditional_key_field;
    private ElseTail? else_tail_field;
    private RValue? r_value_field;

    public Conditional()
    {
        this.length_string = null;
        this.code_block_field = null;
        this.conditional_key_field = null;
        this.else_tail_field = null;
        this.r_value_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetCodeBlock(CodeBlock? input_value)
    {
        this.code_block_field = input_value;
    }

    public CodeBlock? GetCodeBlock()
    {
        return this?.code_block_field;
    }

    public void SetConditionalKey(String? input_value)
    {
        this.conditional_key_field = input_value;
    }

    public String? GetConditionalKey()
    {
        return this?.conditional_key_field;
    }

    public void SetElseTail(ElseTail? input_value)
    {
        this.else_tail_field = input_value;
    }

    public ElseTail? GetElseTail()
    {
        return this?.else_tail_field;
    }

    public void SetRValue(RValue? input_value)
    {
        this.r_value_field = input_value;
    }

    public RValue? GetRValue()
    {
        return this?.r_value_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LoopParser
{
    private ParserNetwork? parser_network;

    public LoopParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,LoopResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Loop? instance = new Loop();
        CodeBlockResult? code_block_field = new CodeBlockResult();
        StringResult? loop_key_field = new StringResult();
        RValueResult? r_value_field = new RValueResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"while",loop_key_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"(")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(r_value_parser_instance?.ParseSingleSave(index,r_value_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,")")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(code_block_parser_instance?.ParseSingleSave(index,code_block_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetCodeBlock(code_block_field?.GetValue());
            instance?.SetLoopKey(loop_key_field?.GetValue());
            instance?.SetRValue(r_value_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            code_block_field = new CodeBlockResult();
            loop_key_field = new StringResult();
            r_value_field = new RValueResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        LoopResult? result = new LoopResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,LoopResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        LoopResult? result = new LoopResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,LoopListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Loop?>? results = new List<Loop?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            LoopResult? result = new LoopResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        LoopListResult? result = new LoopListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LoopResult
{
    private Loop? value;
    private bool? result;

    public LoopResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Loop? new_value)
    {
        this.value = new_value;
    }

    public Loop? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LoopListResult
{
    private List<Loop?>? value;
    private bool? result;

    public LoopListResult()
    {
        this.value = new List<Loop?>();
        this.result = false;
    }

    public void SetValue(List<Loop?>? new_value)
    {
        this.value = new_value;
    }

    public List<Loop?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Loop
{
    private LengthString? length_string;
    private CodeBlock? code_block_field;
    private String? loop_key_field;
    private RValue? r_value_field;

    public Loop()
    {
        this.length_string = null;
        this.code_block_field = null;
        this.loop_key_field = null;
        this.r_value_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetCodeBlock(CodeBlock? input_value)
    {
        this.code_block_field = input_value;
    }

    public CodeBlock? GetCodeBlock()
    {
        return this?.code_block_field;
    }

    public void SetLoopKey(String? input_value)
    {
        this.loop_key_field = input_value;
    }

    public String? GetLoopKey()
    {
        return this?.loop_key_field;
    }

    public void SetRValue(RValue? input_value)
    {
        this.r_value_field = input_value;
    }

    public RValue? GetRValue()
    {
        return this?.r_value_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CallParser
{
    private ParserNetwork? parser_network;

    public CallParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,CallResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Call? instance = new Call();
        QualfiedNameResult? function_chain_field = new QualfiedNameResult();
        NameResult? function_field = new NameResult();
        ParameterListResult? parameters_field = new ParameterListResult();
        NameResult? variable_field = new NameResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(name_parser_instance?.ParseSingleSave(index,variable_field)))&&AsBoolean(string_parser_instance?.ParseSingle(index,".")))&&AsBoolean(name_parser_instance?.ParseSingleSave(index,function_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"(")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(parameter_list_parser_instance?.ParseOptionalSave(index,parameters_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,")")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetFunctionChain(function_chain_field?.GetValue());
            instance?.SetFunction(function_field?.GetValue());
            instance?.SetParameters(parameters_field?.GetValue());
            instance?.SetVariable(variable_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            function_chain_field = new QualfiedNameResult();
            function_field = new NameResult();
            parameters_field = new ParameterListResult();
            variable_field = new NameResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(name_parser_instance?.ParseSingleSave(index,function_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"(")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(parameter_list_parser_instance?.ParseOptionalSave(index,parameters_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,")")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetFunctionChain(function_chain_field?.GetValue());
            instance?.SetFunction(function_field?.GetValue());
            instance?.SetParameters(parameters_field?.GetValue());
            instance?.SetVariable(variable_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            function_chain_field = new QualfiedNameResult();
            function_field = new NameResult();
            parameters_field = new ParameterListResult();
            variable_field = new NameResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(qualfied_name_parser_instance?.ParseSingleSave(index,function_chain_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"(")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(parameter_list_parser_instance?.ParseOptionalSave(index,parameters_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,")")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetFunctionChain(function_chain_field?.GetValue());
            instance?.SetFunction(function_field?.GetValue());
            instance?.SetParameters(parameters_field?.GetValue());
            instance?.SetVariable(variable_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            function_chain_field = new QualfiedNameResult();
            function_field = new NameResult();
            parameters_field = new ParameterListResult();
            variable_field = new NameResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        CallResult? result = new CallResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,CallResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        CallResult? result = new CallResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,CallListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Call?>? results = new List<Call?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            CallResult? result = new CallResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        CallListResult? result = new CallListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CallResult
{
    private Call? value;
    private bool? result;

    public CallResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Call? new_value)
    {
        this.value = new_value;
    }

    public Call? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CallListResult
{
    private List<Call?>? value;
    private bool? result;

    public CallListResult()
    {
        this.value = new List<Call?>();
        this.result = false;
    }

    public void SetValue(List<Call?>? new_value)
    {
        this.value = new_value;
    }

    public List<Call?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Call
{
    private LengthString? length_string;
    private QualfiedName? function_chain_field;
    private Name? function_field;
    private ParameterList? parameters_field;
    private Name? variable_field;

    public Call()
    {
        this.length_string = null;
        this.function_chain_field = null;
        this.function_field = null;
        this.parameters_field = null;
        this.variable_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetFunctionChain(QualfiedName? input_value)
    {
        this.function_chain_field = input_value;
    }

    public QualfiedName? GetFunctionChain()
    {
        return this?.function_chain_field;
    }

    public void SetFunction(Name? input_value)
    {
        this.function_field = input_value;
    }

    public Name? GetFunction()
    {
        return this?.function_field;
    }

    public void SetParameters(ParameterList? input_value)
    {
        this.parameters_field = input_value;
    }

    public ParameterList? GetParameters()
    {
        return this?.parameters_field;
    }

    public void SetVariable(Name? input_value)
    {
        this.variable_field = input_value;
    }

    public Name? GetVariable()
    {
        return this?.variable_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class AllocateParser
{
    private ParserNetwork? parser_network;

    public AllocateParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,AllocateResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Allocate? instance = new Allocate();
        QualfiedNameResult? managed_type_field = new QualfiedNameResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"new")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,1,-1)))&&AsBoolean(qualfied_name_parser_instance?.ParseSingleSave(index,managed_type_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetManagedType(managed_type_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            managed_type_field = new QualfiedNameResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        AllocateResult? result = new AllocateResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,AllocateResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        AllocateResult? result = new AllocateResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,AllocateListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Allocate?>? results = new List<Allocate?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            AllocateResult? result = new AllocateResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        AllocateListResult? result = new AllocateListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class AllocateResult
{
    private Allocate? value;
    private bool? result;

    public AllocateResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Allocate? new_value)
    {
        this.value = new_value;
    }

    public Allocate? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class AllocateListResult
{
    private List<Allocate?>? value;
    private bool? result;

    public AllocateListResult()
    {
        this.value = new List<Allocate?>();
        this.result = false;
    }

    public void SetValue(List<Allocate?>? new_value)
    {
        this.value = new_value;
    }

    public List<Allocate?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Allocate
{
    private LengthString? length_string;
    private QualfiedName? managed_type_field;

    public Allocate()
    {
        this.length_string = null;
        this.managed_type_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetManagedType(QualfiedName? input_value)
    {
        this.managed_type_field = input_value;
    }

    public QualfiedName? GetManagedType()
    {
        return this?.managed_type_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class InstructionParser
{
    private ParserNetwork? parser_network;

    public InstructionParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,InstructionResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Instruction? instance = new Instruction();
        AssignmentResult? assignment_field = new AssignmentResult();
        CallResult? call_field = new CallResult();
        CodeBlockResult? code_block_field = new CodeBlockResult();
        CommentResult? comment_field = new CommentResult();
        ConditionalResult? conditional_field = new ConditionalResult();
        DeclarationResult? declaration_field = new DeclarationResult();
        LoopResult? loop_field = new LoopResult();
        ReturnResult? rtn_field = new ReturnResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(code_block_parser_instance?.ParseSingleSave(index,code_block_field))))
        {
            instance?.SetAssignment(assignment_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetCodeBlock(code_block_field?.GetValue());
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetConditional(conditional_field?.GetValue());
            instance?.SetDeclaration(declaration_field?.GetValue());
            instance?.SetLoop(loop_field?.GetValue());
            instance?.SetRtn(rtn_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            assignment_field = new AssignmentResult();
            call_field = new CallResult();
            code_block_field = new CodeBlockResult();
            comment_field = new CommentResult();
            conditional_field = new ConditionalResult();
            declaration_field = new DeclarationResult();
            loop_field = new LoopResult();
            rtn_field = new ReturnResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(return_parser_instance?.ParseSingleSave(index,rtn_field))))
        {
            instance?.SetAssignment(assignment_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetCodeBlock(code_block_field?.GetValue());
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetConditional(conditional_field?.GetValue());
            instance?.SetDeclaration(declaration_field?.GetValue());
            instance?.SetLoop(loop_field?.GetValue());
            instance?.SetRtn(rtn_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            assignment_field = new AssignmentResult();
            call_field = new CallResult();
            code_block_field = new CodeBlockResult();
            comment_field = new CommentResult();
            conditional_field = new ConditionalResult();
            declaration_field = new DeclarationResult();
            loop_field = new LoopResult();
            rtn_field = new ReturnResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(declaration_parser_instance?.ParseSingleSave(index,declaration_field))))
        {
            instance?.SetAssignment(assignment_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetCodeBlock(code_block_field?.GetValue());
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetConditional(conditional_field?.GetValue());
            instance?.SetDeclaration(declaration_field?.GetValue());
            instance?.SetLoop(loop_field?.GetValue());
            instance?.SetRtn(rtn_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            assignment_field = new AssignmentResult();
            call_field = new CallResult();
            code_block_field = new CodeBlockResult();
            comment_field = new CommentResult();
            conditional_field = new ConditionalResult();
            declaration_field = new DeclarationResult();
            loop_field = new LoopResult();
            rtn_field = new ReturnResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(assignment_parser_instance?.ParseSingleSave(index,assignment_field))))
        {
            instance?.SetAssignment(assignment_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetCodeBlock(code_block_field?.GetValue());
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetConditional(conditional_field?.GetValue());
            instance?.SetDeclaration(declaration_field?.GetValue());
            instance?.SetLoop(loop_field?.GetValue());
            instance?.SetRtn(rtn_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            assignment_field = new AssignmentResult();
            call_field = new CallResult();
            code_block_field = new CodeBlockResult();
            comment_field = new CommentResult();
            conditional_field = new ConditionalResult();
            declaration_field = new DeclarationResult();
            loop_field = new LoopResult();
            rtn_field = new ReturnResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(call_parser_instance?.ParseSingleSave(index,call_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,";")))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1))))
        {
            instance?.SetAssignment(assignment_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetCodeBlock(code_block_field?.GetValue());
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetConditional(conditional_field?.GetValue());
            instance?.SetDeclaration(declaration_field?.GetValue());
            instance?.SetLoop(loop_field?.GetValue());
            instance?.SetRtn(rtn_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            assignment_field = new AssignmentResult();
            call_field = new CallResult();
            code_block_field = new CodeBlockResult();
            comment_field = new CommentResult();
            conditional_field = new ConditionalResult();
            declaration_field = new DeclarationResult();
            loop_field = new LoopResult();
            rtn_field = new ReturnResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(conditional_parser_instance?.ParseSingleSave(index,conditional_field))))
        {
            instance?.SetAssignment(assignment_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetCodeBlock(code_block_field?.GetValue());
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetConditional(conditional_field?.GetValue());
            instance?.SetDeclaration(declaration_field?.GetValue());
            instance?.SetLoop(loop_field?.GetValue());
            instance?.SetRtn(rtn_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            assignment_field = new AssignmentResult();
            call_field = new CallResult();
            code_block_field = new CodeBlockResult();
            comment_field = new CommentResult();
            conditional_field = new ConditionalResult();
            declaration_field = new DeclarationResult();
            loop_field = new LoopResult();
            rtn_field = new ReturnResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(comment_parser_instance?.ParseOptionalSave(index,comment_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(loop_parser_instance?.ParseSingleSave(index,loop_field))))
        {
            instance?.SetAssignment(assignment_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetCodeBlock(code_block_field?.GetValue());
            instance?.SetComment(comment_field?.GetValue());
            instance?.SetConditional(conditional_field?.GetValue());
            instance?.SetDeclaration(declaration_field?.GetValue());
            instance?.SetLoop(loop_field?.GetValue());
            instance?.SetRtn(rtn_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            assignment_field = new AssignmentResult();
            call_field = new CallResult();
            code_block_field = new CodeBlockResult();
            comment_field = new CommentResult();
            conditional_field = new ConditionalResult();
            declaration_field = new DeclarationResult();
            loop_field = new LoopResult();
            rtn_field = new ReturnResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        InstructionResult? result = new InstructionResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,InstructionResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        InstructionResult? result = new InstructionResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,InstructionListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Instruction?>? results = new List<Instruction?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            InstructionResult? result = new InstructionResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        InstructionListResult? result = new InstructionListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class InstructionResult
{
    private Instruction? value;
    private bool? result;

    public InstructionResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Instruction? new_value)
    {
        this.value = new_value;
    }

    public Instruction? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class InstructionListResult
{
    private List<Instruction?>? value;
    private bool? result;

    public InstructionListResult()
    {
        this.value = new List<Instruction?>();
        this.result = false;
    }

    public void SetValue(List<Instruction?>? new_value)
    {
        this.value = new_value;
    }

    public List<Instruction?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Instruction
{
    private LengthString? length_string;
    private Assignment? assignment_field;
    private Call? call_field;
    private CodeBlock? code_block_field;
    private Comment? comment_field;
    private Conditional? conditional_field;
    private Declaration? declaration_field;
    private Loop? loop_field;
    private Return? rtn_field;

    public Instruction()
    {
        this.length_string = null;
        this.assignment_field = null;
        this.call_field = null;
        this.code_block_field = null;
        this.comment_field = null;
        this.conditional_field = null;
        this.declaration_field = null;
        this.loop_field = null;
        this.rtn_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetAssignment(Assignment? input_value)
    {
        this.assignment_field = input_value;
    }

    public Assignment? GetAssignment()
    {
        return this?.assignment_field;
    }

    public void SetCall(Call? input_value)
    {
        this.call_field = input_value;
    }

    public Call? GetCall()
    {
        return this?.call_field;
    }

    public void SetCodeBlock(CodeBlock? input_value)
    {
        this.code_block_field = input_value;
    }

    public CodeBlock? GetCodeBlock()
    {
        return this?.code_block_field;
    }

    public void SetComment(Comment? input_value)
    {
        this.comment_field = input_value;
    }

    public Comment? GetComment()
    {
        return this?.comment_field;
    }

    public void SetConditional(Conditional? input_value)
    {
        this.conditional_field = input_value;
    }

    public Conditional? GetConditional()
    {
        return this?.conditional_field;
    }

    public void SetDeclaration(Declaration? input_value)
    {
        this.declaration_field = input_value;
    }

    public Declaration? GetDeclaration()
    {
        return this?.declaration_field;
    }

    public void SetLoop(Loop? input_value)
    {
        this.loop_field = input_value;
    }

    public Loop? GetLoop()
    {
        return this?.loop_field;
    }

    public void SetRtn(Return? input_value)
    {
        this.rtn_field = input_value;
    }

    public Return? GetRtn()
    {
        return this?.rtn_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValueSingleParser
{
    private ParserNetwork? parser_network;

    public RValueSingleParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,RValueSingleResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        RValueSingle? instance = new RValueSingle();
        AllocateResult? allocate_field = new AllocateResult();
        BooleanResult? boolean_literal_field = new BooleanResult();
        ByteResult? byte_literal_field = new ByteResult();
        CallResult? call_field = new CallResult();
        DecimalResult? decimal_literal_field = new DecimalResult();
        NumberResult? integer_literal_field = new NumberResult();
        LiteralResult? string_literal_field = new LiteralResult();
        UnaryOperatorResult? unary_operator_field = new UnaryOperatorResult();
        QualfiedNameResult? variable_field = new QualfiedNameResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(unary_operator_parser_instance?.ParseOptionalSave(index,unary_operator_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(call_parser_instance?.ParseSingleSave(index,call_field))))
        {
            instance?.SetAllocate(allocate_field?.GetValue());
            instance?.SetBooleanLiteral(boolean_literal_field?.GetValue());
            instance?.SetByteLiteral(byte_literal_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetDecimalLiteral(decimal_literal_field?.GetValue());
            instance?.SetIntegerLiteral(integer_literal_field?.GetValue());
            instance?.SetStringLiteral(string_literal_field?.GetValue());
            instance?.SetUnaryOperator(unary_operator_field?.GetValue());
            instance?.SetVariable(variable_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            allocate_field = new AllocateResult();
            boolean_literal_field = new BooleanResult();
            byte_literal_field = new ByteResult();
            call_field = new CallResult();
            decimal_literal_field = new DecimalResult();
            integer_literal_field = new NumberResult();
            string_literal_field = new LiteralResult();
            unary_operator_field = new UnaryOperatorResult();
            variable_field = new QualfiedNameResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(unary_operator_parser_instance?.ParseOptionalSave(index,unary_operator_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(allocate_parser_instance?.ParseSingleSave(index,allocate_field))))
        {
            instance?.SetAllocate(allocate_field?.GetValue());
            instance?.SetBooleanLiteral(boolean_literal_field?.GetValue());
            instance?.SetByteLiteral(byte_literal_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetDecimalLiteral(decimal_literal_field?.GetValue());
            instance?.SetIntegerLiteral(integer_literal_field?.GetValue());
            instance?.SetStringLiteral(string_literal_field?.GetValue());
            instance?.SetUnaryOperator(unary_operator_field?.GetValue());
            instance?.SetVariable(variable_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            allocate_field = new AllocateResult();
            boolean_literal_field = new BooleanResult();
            byte_literal_field = new ByteResult();
            call_field = new CallResult();
            decimal_literal_field = new DecimalResult();
            integer_literal_field = new NumberResult();
            string_literal_field = new LiteralResult();
            unary_operator_field = new UnaryOperatorResult();
            variable_field = new QualfiedNameResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(unary_operator_parser_instance?.ParseOptionalSave(index,unary_operator_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(byte_parser_instance?.ParseSingleSave(index,byte_literal_field))))
        {
            instance?.SetAllocate(allocate_field?.GetValue());
            instance?.SetBooleanLiteral(boolean_literal_field?.GetValue());
            instance?.SetByteLiteral(byte_literal_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetDecimalLiteral(decimal_literal_field?.GetValue());
            instance?.SetIntegerLiteral(integer_literal_field?.GetValue());
            instance?.SetStringLiteral(string_literal_field?.GetValue());
            instance?.SetUnaryOperator(unary_operator_field?.GetValue());
            instance?.SetVariable(variable_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            allocate_field = new AllocateResult();
            boolean_literal_field = new BooleanResult();
            byte_literal_field = new ByteResult();
            call_field = new CallResult();
            decimal_literal_field = new DecimalResult();
            integer_literal_field = new NumberResult();
            string_literal_field = new LiteralResult();
            unary_operator_field = new UnaryOperatorResult();
            variable_field = new QualfiedNameResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(unary_operator_parser_instance?.ParseOptionalSave(index,unary_operator_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(decimal_parser_instance?.ParseSingleSave(index,decimal_literal_field))))
        {
            instance?.SetAllocate(allocate_field?.GetValue());
            instance?.SetBooleanLiteral(boolean_literal_field?.GetValue());
            instance?.SetByteLiteral(byte_literal_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetDecimalLiteral(decimal_literal_field?.GetValue());
            instance?.SetIntegerLiteral(integer_literal_field?.GetValue());
            instance?.SetStringLiteral(string_literal_field?.GetValue());
            instance?.SetUnaryOperator(unary_operator_field?.GetValue());
            instance?.SetVariable(variable_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            allocate_field = new AllocateResult();
            boolean_literal_field = new BooleanResult();
            byte_literal_field = new ByteResult();
            call_field = new CallResult();
            decimal_literal_field = new DecimalResult();
            integer_literal_field = new NumberResult();
            string_literal_field = new LiteralResult();
            unary_operator_field = new UnaryOperatorResult();
            variable_field = new QualfiedNameResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(unary_operator_parser_instance?.ParseOptionalSave(index,unary_operator_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(number_parser_instance?.ParseSingleSave(index,integer_literal_field))))
        {
            instance?.SetAllocate(allocate_field?.GetValue());
            instance?.SetBooleanLiteral(boolean_literal_field?.GetValue());
            instance?.SetByteLiteral(byte_literal_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetDecimalLiteral(decimal_literal_field?.GetValue());
            instance?.SetIntegerLiteral(integer_literal_field?.GetValue());
            instance?.SetStringLiteral(string_literal_field?.GetValue());
            instance?.SetUnaryOperator(unary_operator_field?.GetValue());
            instance?.SetVariable(variable_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            allocate_field = new AllocateResult();
            boolean_literal_field = new BooleanResult();
            byte_literal_field = new ByteResult();
            call_field = new CallResult();
            decimal_literal_field = new DecimalResult();
            integer_literal_field = new NumberResult();
            string_literal_field = new LiteralResult();
            unary_operator_field = new UnaryOperatorResult();
            variable_field = new QualfiedNameResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(unary_operator_parser_instance?.ParseOptionalSave(index,unary_operator_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(boolean_parser_instance?.ParseSingleSave(index,boolean_literal_field))))
        {
            instance?.SetAllocate(allocate_field?.GetValue());
            instance?.SetBooleanLiteral(boolean_literal_field?.GetValue());
            instance?.SetByteLiteral(byte_literal_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetDecimalLiteral(decimal_literal_field?.GetValue());
            instance?.SetIntegerLiteral(integer_literal_field?.GetValue());
            instance?.SetStringLiteral(string_literal_field?.GetValue());
            instance?.SetUnaryOperator(unary_operator_field?.GetValue());
            instance?.SetVariable(variable_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            allocate_field = new AllocateResult();
            boolean_literal_field = new BooleanResult();
            byte_literal_field = new ByteResult();
            call_field = new CallResult();
            decimal_literal_field = new DecimalResult();
            integer_literal_field = new NumberResult();
            string_literal_field = new LiteralResult();
            unary_operator_field = new UnaryOperatorResult();
            variable_field = new QualfiedNameResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(unary_operator_parser_instance?.ParseOptionalSave(index,unary_operator_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(qualfied_name_parser_instance?.ParseSingleSave(index,variable_field))))
        {
            instance?.SetAllocate(allocate_field?.GetValue());
            instance?.SetBooleanLiteral(boolean_literal_field?.GetValue());
            instance?.SetByteLiteral(byte_literal_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetDecimalLiteral(decimal_literal_field?.GetValue());
            instance?.SetIntegerLiteral(integer_literal_field?.GetValue());
            instance?.SetStringLiteral(string_literal_field?.GetValue());
            instance?.SetUnaryOperator(unary_operator_field?.GetValue());
            instance?.SetVariable(variable_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            allocate_field = new AllocateResult();
            boolean_literal_field = new BooleanResult();
            byte_literal_field = new ByteResult();
            call_field = new CallResult();
            decimal_literal_field = new DecimalResult();
            integer_literal_field = new NumberResult();
            string_literal_field = new LiteralResult();
            unary_operator_field = new UnaryOperatorResult();
            variable_field = new QualfiedNameResult();
        }
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(unary_operator_parser_instance?.ParseOptionalSave(index,unary_operator_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"\"")))&&AsBoolean(literal_parser_instance?.ParseSingleSave(index,string_literal_field)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"\""))))
        {
            instance?.SetAllocate(allocate_field?.GetValue());
            instance?.SetBooleanLiteral(boolean_literal_field?.GetValue());
            instance?.SetByteLiteral(byte_literal_field?.GetValue());
            instance?.SetCall(call_field?.GetValue());
            instance?.SetDecimalLiteral(decimal_literal_field?.GetValue());
            instance?.SetIntegerLiteral(integer_literal_field?.GetValue());
            instance?.SetStringLiteral(string_literal_field?.GetValue());
            instance?.SetUnaryOperator(unary_operator_field?.GetValue());
            instance?.SetVariable(variable_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            allocate_field = new AllocateResult();
            boolean_literal_field = new BooleanResult();
            byte_literal_field = new ByteResult();
            call_field = new CallResult();
            decimal_literal_field = new DecimalResult();
            integer_literal_field = new NumberResult();
            string_literal_field = new LiteralResult();
            unary_operator_field = new UnaryOperatorResult();
            variable_field = new QualfiedNameResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        RValueSingleResult? result = new RValueSingleResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,RValueSingleResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        RValueSingleResult? result = new RValueSingleResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,RValueSingleListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<RValueSingle?>? results = new List<RValueSingle?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            RValueSingleResult? result = new RValueSingleResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        RValueSingleListResult? result = new RValueSingleListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValueSingleResult
{
    private RValueSingle? value;
    private bool? result;

    public RValueSingleResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(RValueSingle? new_value)
    {
        this.value = new_value;
    }

    public RValueSingle? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValueSingleListResult
{
    private List<RValueSingle?>? value;
    private bool? result;

    public RValueSingleListResult()
    {
        this.value = new List<RValueSingle?>();
        this.result = false;
    }

    public void SetValue(List<RValueSingle?>? new_value)
    {
        this.value = new_value;
    }

    public List<RValueSingle?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValueSingle
{
    private LengthString? length_string;
    private Allocate? allocate_field;
    private Boolean? boolean_literal_field;
    private Byte? byte_literal_field;
    private Call? call_field;
    private Decimal? decimal_literal_field;
    private Number? integer_literal_field;
    private Literal? string_literal_field;
    private UnaryOperator? unary_operator_field;
    private QualfiedName? variable_field;

    public RValueSingle()
    {
        this.length_string = null;
        this.allocate_field = null;
        this.boolean_literal_field = null;
        this.byte_literal_field = null;
        this.call_field = null;
        this.decimal_literal_field = null;
        this.integer_literal_field = null;
        this.string_literal_field = null;
        this.unary_operator_field = null;
        this.variable_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetAllocate(Allocate? input_value)
    {
        this.allocate_field = input_value;
    }

    public Allocate? GetAllocate()
    {
        return this?.allocate_field;
    }

    public void SetBooleanLiteral(Boolean? input_value)
    {
        this.boolean_literal_field = input_value;
    }

    public Boolean? GetBooleanLiteral()
    {
        return this?.boolean_literal_field;
    }

    public void SetByteLiteral(Byte? input_value)
    {
        this.byte_literal_field = input_value;
    }

    public Byte? GetByteLiteral()
    {
        return this?.byte_literal_field;
    }

    public void SetCall(Call? input_value)
    {
        this.call_field = input_value;
    }

    public Call? GetCall()
    {
        return this?.call_field;
    }

    public void SetDecimalLiteral(Decimal? input_value)
    {
        this.decimal_literal_field = input_value;
    }

    public Decimal? GetDecimalLiteral()
    {
        return this?.decimal_literal_field;
    }

    public void SetIntegerLiteral(Number? input_value)
    {
        this.integer_literal_field = input_value;
    }

    public Number? GetIntegerLiteral()
    {
        return this?.integer_literal_field;
    }

    public void SetStringLiteral(Literal? input_value)
    {
        this.string_literal_field = input_value;
    }

    public Literal? GetStringLiteral()
    {
        return this?.string_literal_field;
    }

    public void SetUnaryOperator(UnaryOperator? input_value)
    {
        this.unary_operator_field = input_value;
    }

    public UnaryOperator? GetUnaryOperator()
    {
        return this?.unary_operator_field;
    }

    public void SetVariable(QualfiedName? input_value)
    {
        this.variable_field = input_value;
    }

    public QualfiedName? GetVariable()
    {
        return this?.variable_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValueTailParser
{
    private ParserNetwork? parser_network;

    public RValueTailParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,RValueTailResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        RValueTail? instance = new RValueTail();
        BinaryOperatorResult? binary_operator_field = new BinaryOperatorResult();
        RValueTailResult? tail_field = new RValueTailResult();
        RValueSingleResult? value_field = new RValueSingleResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(binary_operator_parser_instance?.ParseSingleSave(index,binary_operator_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(r_value_single_parser_instance?.ParseSingleSave(index,value_field)))&&AsBoolean(whitespace_parser_instance?.ParseMany(index,0,-1)))&&AsBoolean(r_value_tail_parser_instance?.ParseOptionalSave(index,tail_field))))
        {
            instance?.SetBinaryOperator(binary_operator_field?.GetValue());
            instance?.SetTail(tail_field?.GetValue());
            instance?.SetValue(value_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            binary_operator_field = new BinaryOperatorResult();
            tail_field = new RValueTailResult();
            value_field = new RValueSingleResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        RValueTailResult? result = new RValueTailResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,RValueTailResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        RValueTailResult? result = new RValueTailResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,RValueTailListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<RValueTail?>? results = new List<RValueTail?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            RValueTailResult? result = new RValueTailResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        RValueTailListResult? result = new RValueTailListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValueTailResult
{
    private RValueTail? value;
    private bool? result;

    public RValueTailResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(RValueTail? new_value)
    {
        this.value = new_value;
    }

    public RValueTail? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValueTailListResult
{
    private List<RValueTail?>? value;
    private bool? result;

    public RValueTailListResult()
    {
        this.value = new List<RValueTail?>();
        this.result = false;
    }

    public void SetValue(List<RValueTail?>? new_value)
    {
        this.value = new_value;
    }

    public List<RValueTail?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValueTail
{
    private LengthString? length_string;
    private BinaryOperator? binary_operator_field;
    private RValueTail? tail_field;
    private RValueSingle? value_field;

    public RValueTail()
    {
        this.length_string = null;
        this.binary_operator_field = null;
        this.tail_field = null;
        this.value_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetBinaryOperator(BinaryOperator? input_value)
    {
        this.binary_operator_field = input_value;
    }

    public BinaryOperator? GetBinaryOperator()
    {
        return this?.binary_operator_field;
    }

    public void SetTail(RValueTail? input_value)
    {
        this.tail_field = input_value;
    }

    public RValueTail? GetTail()
    {
        return this?.tail_field;
    }

    public void SetValue(RValueSingle? input_value)
    {
        this.value_field = input_value;
    }

    public RValueSingle? GetValue()
    {
        return this?.value_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValueParser
{
    private ParserNetwork? parser_network;

    public RValueParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,RValueResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        RValue? instance = new RValue();
        RValueTailResult? tail_field = new RValueTailResult();
        RValueSingleResult? value_field = new RValueSingleResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(r_value_single_parser_instance?.ParseSingleSave(index,value_field)))&&AsBoolean(r_value_tail_parser_instance?.ParseOptionalSave(index,tail_field))))
        {
            instance?.SetTail(tail_field?.GetValue());
            instance?.SetValue(value_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            tail_field = new RValueTailResult();
            value_field = new RValueSingleResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        RValueResult? result = new RValueResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,RValueResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        RValueResult? result = new RValueResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,RValueListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<RValue?>? results = new List<RValue?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            RValueResult? result = new RValueResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        RValueListResult? result = new RValueListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValueResult
{
    private RValue? value;
    private bool? result;

    public RValueResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(RValue? new_value)
    {
        this.value = new_value;
    }

    public RValue? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValueListResult
{
    private List<RValue?>? value;
    private bool? result;

    public RValueListResult()
    {
        this.value = new List<RValue?>();
        this.result = false;
    }

    public void SetValue(List<RValue?>? new_value)
    {
        this.value = new_value;
    }

    public List<RValue?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class RValue
{
    private LengthString? length_string;
    private RValueTail? tail_field;
    private RValueSingle? value_field;

    public RValue()
    {
        this.length_string = null;
        this.tail_field = null;
        this.value_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetTail(RValueTail? input_value)
    {
        this.tail_field = input_value;
    }

    public RValueTail? GetTail()
    {
        return this?.tail_field;
    }

    public void SetValue(RValueSingle? input_value)
    {
        this.value_field = input_value;
    }

    public RValueSingle? GetValue()
    {
        return this?.value_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class BinaryOperatorParser
{
    private ParserNetwork? parser_network;

    public BinaryOperatorParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,BinaryOperatorResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        BinaryOperator? instance = new BinaryOperator();
        StringResult? addition_field = new StringResult();
        StringResult? and_op_field = new StringResult();
        StringResult? equality_field = new StringResult();
        StringResult? greater_than_eq_field = new StringResult();
        StringResult? greater_than_field = new StringResult();
        StringResult? less_than_eq_field = new StringResult();
        StringResult? less_than_field = new StringResult();
        StringResult? not_equality_field = new StringResult();
        StringResult? or_op_field = new StringResult();
        StringResult? subtraction_field = new StringResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"+",addition_field))))
        {
            instance?.SetAddition(addition_field?.GetValue());
            instance?.SetAndOp(and_op_field?.GetValue());
            instance?.SetEquality(equality_field?.GetValue());
            instance?.SetGreaterThanEq(greater_than_eq_field?.GetValue());
            instance?.SetGreaterThan(greater_than_field?.GetValue());
            instance?.SetLessThanEq(less_than_eq_field?.GetValue());
            instance?.SetLessThan(less_than_field?.GetValue());
            instance?.SetNotEquality(not_equality_field?.GetValue());
            instance?.SetOrOp(or_op_field?.GetValue());
            instance?.SetSubtraction(subtraction_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            addition_field = new StringResult();
            and_op_field = new StringResult();
            equality_field = new StringResult();
            greater_than_eq_field = new StringResult();
            greater_than_field = new StringResult();
            less_than_eq_field = new StringResult();
            less_than_field = new StringResult();
            not_equality_field = new StringResult();
            or_op_field = new StringResult();
            subtraction_field = new StringResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"-",subtraction_field))))
        {
            instance?.SetAddition(addition_field?.GetValue());
            instance?.SetAndOp(and_op_field?.GetValue());
            instance?.SetEquality(equality_field?.GetValue());
            instance?.SetGreaterThanEq(greater_than_eq_field?.GetValue());
            instance?.SetGreaterThan(greater_than_field?.GetValue());
            instance?.SetLessThanEq(less_than_eq_field?.GetValue());
            instance?.SetLessThan(less_than_field?.GetValue());
            instance?.SetNotEquality(not_equality_field?.GetValue());
            instance?.SetOrOp(or_op_field?.GetValue());
            instance?.SetSubtraction(subtraction_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            addition_field = new StringResult();
            and_op_field = new StringResult();
            equality_field = new StringResult();
            greater_than_eq_field = new StringResult();
            greater_than_field = new StringResult();
            less_than_eq_field = new StringResult();
            less_than_field = new StringResult();
            not_equality_field = new StringResult();
            or_op_field = new StringResult();
            subtraction_field = new StringResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"<=",less_than_eq_field))))
        {
            instance?.SetAddition(addition_field?.GetValue());
            instance?.SetAndOp(and_op_field?.GetValue());
            instance?.SetEquality(equality_field?.GetValue());
            instance?.SetGreaterThanEq(greater_than_eq_field?.GetValue());
            instance?.SetGreaterThan(greater_than_field?.GetValue());
            instance?.SetLessThanEq(less_than_eq_field?.GetValue());
            instance?.SetLessThan(less_than_field?.GetValue());
            instance?.SetNotEquality(not_equality_field?.GetValue());
            instance?.SetOrOp(or_op_field?.GetValue());
            instance?.SetSubtraction(subtraction_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            addition_field = new StringResult();
            and_op_field = new StringResult();
            equality_field = new StringResult();
            greater_than_eq_field = new StringResult();
            greater_than_field = new StringResult();
            less_than_eq_field = new StringResult();
            less_than_field = new StringResult();
            not_equality_field = new StringResult();
            or_op_field = new StringResult();
            subtraction_field = new StringResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingleSave(index,">=",greater_than_eq_field))))
        {
            instance?.SetAddition(addition_field?.GetValue());
            instance?.SetAndOp(and_op_field?.GetValue());
            instance?.SetEquality(equality_field?.GetValue());
            instance?.SetGreaterThanEq(greater_than_eq_field?.GetValue());
            instance?.SetGreaterThan(greater_than_field?.GetValue());
            instance?.SetLessThanEq(less_than_eq_field?.GetValue());
            instance?.SetLessThan(less_than_field?.GetValue());
            instance?.SetNotEquality(not_equality_field?.GetValue());
            instance?.SetOrOp(or_op_field?.GetValue());
            instance?.SetSubtraction(subtraction_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            addition_field = new StringResult();
            and_op_field = new StringResult();
            equality_field = new StringResult();
            greater_than_eq_field = new StringResult();
            greater_than_field = new StringResult();
            less_than_eq_field = new StringResult();
            less_than_field = new StringResult();
            not_equality_field = new StringResult();
            or_op_field = new StringResult();
            subtraction_field = new StringResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"==",equality_field))))
        {
            instance?.SetAddition(addition_field?.GetValue());
            instance?.SetAndOp(and_op_field?.GetValue());
            instance?.SetEquality(equality_field?.GetValue());
            instance?.SetGreaterThanEq(greater_than_eq_field?.GetValue());
            instance?.SetGreaterThan(greater_than_field?.GetValue());
            instance?.SetLessThanEq(less_than_eq_field?.GetValue());
            instance?.SetLessThan(less_than_field?.GetValue());
            instance?.SetNotEquality(not_equality_field?.GetValue());
            instance?.SetOrOp(or_op_field?.GetValue());
            instance?.SetSubtraction(subtraction_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            addition_field = new StringResult();
            and_op_field = new StringResult();
            equality_field = new StringResult();
            greater_than_eq_field = new StringResult();
            greater_than_field = new StringResult();
            less_than_eq_field = new StringResult();
            less_than_field = new StringResult();
            not_equality_field = new StringResult();
            or_op_field = new StringResult();
            subtraction_field = new StringResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"!=",not_equality_field))))
        {
            instance?.SetAddition(addition_field?.GetValue());
            instance?.SetAndOp(and_op_field?.GetValue());
            instance?.SetEquality(equality_field?.GetValue());
            instance?.SetGreaterThanEq(greater_than_eq_field?.GetValue());
            instance?.SetGreaterThan(greater_than_field?.GetValue());
            instance?.SetLessThanEq(less_than_eq_field?.GetValue());
            instance?.SetLessThan(less_than_field?.GetValue());
            instance?.SetNotEquality(not_equality_field?.GetValue());
            instance?.SetOrOp(or_op_field?.GetValue());
            instance?.SetSubtraction(subtraction_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            addition_field = new StringResult();
            and_op_field = new StringResult();
            equality_field = new StringResult();
            greater_than_eq_field = new StringResult();
            greater_than_field = new StringResult();
            less_than_eq_field = new StringResult();
            less_than_field = new StringResult();
            not_equality_field = new StringResult();
            or_op_field = new StringResult();
            subtraction_field = new StringResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"<",less_than_field))))
        {
            instance?.SetAddition(addition_field?.GetValue());
            instance?.SetAndOp(and_op_field?.GetValue());
            instance?.SetEquality(equality_field?.GetValue());
            instance?.SetGreaterThanEq(greater_than_eq_field?.GetValue());
            instance?.SetGreaterThan(greater_than_field?.GetValue());
            instance?.SetLessThanEq(less_than_eq_field?.GetValue());
            instance?.SetLessThan(less_than_field?.GetValue());
            instance?.SetNotEquality(not_equality_field?.GetValue());
            instance?.SetOrOp(or_op_field?.GetValue());
            instance?.SetSubtraction(subtraction_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            addition_field = new StringResult();
            and_op_field = new StringResult();
            equality_field = new StringResult();
            greater_than_eq_field = new StringResult();
            greater_than_field = new StringResult();
            less_than_eq_field = new StringResult();
            less_than_field = new StringResult();
            not_equality_field = new StringResult();
            or_op_field = new StringResult();
            subtraction_field = new StringResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingleSave(index,">",greater_than_field))))
        {
            instance?.SetAddition(addition_field?.GetValue());
            instance?.SetAndOp(and_op_field?.GetValue());
            instance?.SetEquality(equality_field?.GetValue());
            instance?.SetGreaterThanEq(greater_than_eq_field?.GetValue());
            instance?.SetGreaterThan(greater_than_field?.GetValue());
            instance?.SetLessThanEq(less_than_eq_field?.GetValue());
            instance?.SetLessThan(less_than_field?.GetValue());
            instance?.SetNotEquality(not_equality_field?.GetValue());
            instance?.SetOrOp(or_op_field?.GetValue());
            instance?.SetSubtraction(subtraction_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            addition_field = new StringResult();
            and_op_field = new StringResult();
            equality_field = new StringResult();
            greater_than_eq_field = new StringResult();
            greater_than_field = new StringResult();
            less_than_eq_field = new StringResult();
            less_than_field = new StringResult();
            not_equality_field = new StringResult();
            or_op_field = new StringResult();
            subtraction_field = new StringResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"||",or_op_field))))
        {
            instance?.SetAddition(addition_field?.GetValue());
            instance?.SetAndOp(and_op_field?.GetValue());
            instance?.SetEquality(equality_field?.GetValue());
            instance?.SetGreaterThanEq(greater_than_eq_field?.GetValue());
            instance?.SetGreaterThan(greater_than_field?.GetValue());
            instance?.SetLessThanEq(less_than_eq_field?.GetValue());
            instance?.SetLessThan(less_than_field?.GetValue());
            instance?.SetNotEquality(not_equality_field?.GetValue());
            instance?.SetOrOp(or_op_field?.GetValue());
            instance?.SetSubtraction(subtraction_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            addition_field = new StringResult();
            and_op_field = new StringResult();
            equality_field = new StringResult();
            greater_than_eq_field = new StringResult();
            greater_than_field = new StringResult();
            less_than_eq_field = new StringResult();
            less_than_field = new StringResult();
            not_equality_field = new StringResult();
            or_op_field = new StringResult();
            subtraction_field = new StringResult();
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"&&",and_op_field))))
        {
            instance?.SetAddition(addition_field?.GetValue());
            instance?.SetAndOp(and_op_field?.GetValue());
            instance?.SetEquality(equality_field?.GetValue());
            instance?.SetGreaterThanEq(greater_than_eq_field?.GetValue());
            instance?.SetGreaterThan(greater_than_field?.GetValue());
            instance?.SetLessThanEq(less_than_eq_field?.GetValue());
            instance?.SetLessThan(less_than_field?.GetValue());
            instance?.SetNotEquality(not_equality_field?.GetValue());
            instance?.SetOrOp(or_op_field?.GetValue());
            instance?.SetSubtraction(subtraction_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            addition_field = new StringResult();
            and_op_field = new StringResult();
            equality_field = new StringResult();
            greater_than_eq_field = new StringResult();
            greater_than_field = new StringResult();
            less_than_eq_field = new StringResult();
            less_than_field = new StringResult();
            not_equality_field = new StringResult();
            or_op_field = new StringResult();
            subtraction_field = new StringResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        BinaryOperatorResult? result = new BinaryOperatorResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,BinaryOperatorResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        BinaryOperatorResult? result = new BinaryOperatorResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,BinaryOperatorListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<BinaryOperator?>? results = new List<BinaryOperator?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            BinaryOperatorResult? result = new BinaryOperatorResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        BinaryOperatorListResult? result = new BinaryOperatorListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class BinaryOperatorResult
{
    private BinaryOperator? value;
    private bool? result;

    public BinaryOperatorResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(BinaryOperator? new_value)
    {
        this.value = new_value;
    }

    public BinaryOperator? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class BinaryOperatorListResult
{
    private List<BinaryOperator?>? value;
    private bool? result;

    public BinaryOperatorListResult()
    {
        this.value = new List<BinaryOperator?>();
        this.result = false;
    }

    public void SetValue(List<BinaryOperator?>? new_value)
    {
        this.value = new_value;
    }

    public List<BinaryOperator?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class BinaryOperator
{
    private LengthString? length_string;
    private String? addition_field;
    private String? and_op_field;
    private String? equality_field;
    private String? greater_than_eq_field;
    private String? greater_than_field;
    private String? less_than_eq_field;
    private String? less_than_field;
    private String? not_equality_field;
    private String? or_op_field;
    private String? subtraction_field;

    public BinaryOperator()
    {
        this.length_string = null;
        this.addition_field = null;
        this.and_op_field = null;
        this.equality_field = null;
        this.greater_than_eq_field = null;
        this.greater_than_field = null;
        this.less_than_eq_field = null;
        this.less_than_field = null;
        this.not_equality_field = null;
        this.or_op_field = null;
        this.subtraction_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetAddition(String? input_value)
    {
        this.addition_field = input_value;
    }

    public String? GetAddition()
    {
        return this?.addition_field;
    }

    public void SetAndOp(String? input_value)
    {
        this.and_op_field = input_value;
    }

    public String? GetAndOp()
    {
        return this?.and_op_field;
    }

    public void SetEquality(String? input_value)
    {
        this.equality_field = input_value;
    }

    public String? GetEquality()
    {
        return this?.equality_field;
    }

    public void SetGreaterThanEq(String? input_value)
    {
        this.greater_than_eq_field = input_value;
    }

    public String? GetGreaterThanEq()
    {
        return this?.greater_than_eq_field;
    }

    public void SetGreaterThan(String? input_value)
    {
        this.greater_than_field = input_value;
    }

    public String? GetGreaterThan()
    {
        return this?.greater_than_field;
    }

    public void SetLessThanEq(String? input_value)
    {
        this.less_than_eq_field = input_value;
    }

    public String? GetLessThanEq()
    {
        return this?.less_than_eq_field;
    }

    public void SetLessThan(String? input_value)
    {
        this.less_than_field = input_value;
    }

    public String? GetLessThan()
    {
        return this?.less_than_field;
    }

    public void SetNotEquality(String? input_value)
    {
        this.not_equality_field = input_value;
    }

    public String? GetNotEquality()
    {
        return this?.not_equality_field;
    }

    public void SetOrOp(String? input_value)
    {
        this.or_op_field = input_value;
    }

    public String? GetOrOp()
    {
        return this?.or_op_field;
    }

    public void SetSubtraction(String? input_value)
    {
        this.subtraction_field = input_value;
    }

    public String? GetSubtraction()
    {
        return this?.subtraction_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class UnaryOperatorParser
{
    private ParserNetwork? parser_network;

    public UnaryOperatorParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,UnaryOperatorResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        UnaryOperator? instance = new UnaryOperator();
        StringResult? negation_field = new StringResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingleSave(index,"!",negation_field))))
        {
            instance?.SetNegation(negation_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            negation_field = new StringResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        UnaryOperatorResult? result = new UnaryOperatorResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,UnaryOperatorResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        UnaryOperatorResult? result = new UnaryOperatorResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,UnaryOperatorListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<UnaryOperator?>? results = new List<UnaryOperator?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            UnaryOperatorResult? result = new UnaryOperatorResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        UnaryOperatorListResult? result = new UnaryOperatorListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class UnaryOperatorResult
{
    private UnaryOperator? value;
    private bool? result;

    public UnaryOperatorResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(UnaryOperator? new_value)
    {
        this.value = new_value;
    }

    public UnaryOperator? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class UnaryOperatorListResult
{
    private List<UnaryOperator?>? value;
    private bool? result;

    public UnaryOperatorListResult()
    {
        this.value = new List<UnaryOperator?>();
        this.result = false;
    }

    public void SetValue(List<UnaryOperator?>? new_value)
    {
        this.value = new_value;
    }

    public List<UnaryOperator?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class UnaryOperator
{
    private LengthString? length_string;
    private String? negation_field;

    public UnaryOperator()
    {
        this.length_string = null;
        this.negation_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetNegation(String? input_value)
    {
        this.negation_field = input_value;
    }

    public String? GetNegation()
    {
        return this?.negation_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CommentParser
{
    private ParserNetwork? parser_network;

    public CommentParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,CommentResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Comment? instance = new Comment();
        CommentContentListResult? content_field = new CommentContentListResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"/*")))&&AsBoolean(comment_content_parser_instance?.ParseManySave(index,content_field,0,-1)))&&AsBoolean(string_parser_instance?.ParseSingle(index,"*/"))))
        {
            instance?.SetContent(content_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            content_field = new CommentContentListResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        CommentResult? result = new CommentResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,CommentResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        CommentResult? result = new CommentResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,CommentListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Comment?>? results = new List<Comment?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            CommentResult? result = new CommentResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        CommentListResult? result = new CommentListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CommentResult
{
    private Comment? value;
    private bool? result;

    public CommentResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Comment? new_value)
    {
        this.value = new_value;
    }

    public Comment? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CommentListResult
{
    private List<Comment?>? value;
    private bool? result;

    public CommentListResult()
    {
        this.value = new List<Comment?>();
        this.result = false;
    }

    public void SetValue(List<Comment?>? new_value)
    {
        this.value = new_value;
    }

    public List<Comment?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Comment
{
    private LengthString? length_string;
    private List<CommentContent?>? content_field;

    public Comment()
    {
        this.length_string = null;
        this.content_field = new List<CommentContent?>();
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetContent(List<CommentContent?>? input_value)
    {
        this.content_field = input_value;
    }

    public List<CommentContent?>? GetContent()
    {
        return this?.content_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NonStarCharacterParser
{
    private ParserNetwork? parser_network;

    public NonStarCharacterParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,NonStarCharacterResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        NonStarCharacter? instance = new NonStarCharacter();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x00,0x29))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x2B,0xFF))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        NonStarCharacterResult? result = new NonStarCharacterResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,NonStarCharacterResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        NonStarCharacterResult? result = new NonStarCharacterResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,NonStarCharacterListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<NonStarCharacter?>? results = new List<NonStarCharacter?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            NonStarCharacterResult? result = new NonStarCharacterResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        NonStarCharacterListResult? result = new NonStarCharacterListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NonStarCharacterResult
{
    private NonStarCharacter? value;
    private bool? result;

    public NonStarCharacterResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(NonStarCharacter? new_value)
    {
        this.value = new_value;
    }

    public NonStarCharacter? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NonStarCharacterListResult
{
    private List<NonStarCharacter?>? value;
    private bool? result;

    public NonStarCharacterListResult()
    {
        this.value = new List<NonStarCharacter?>();
        this.result = false;
    }

    public void SetValue(List<NonStarCharacter?>? new_value)
    {
        this.value = new_value;
    }

    public List<NonStarCharacter?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NonStarCharacter
{
    private LengthString? length_string;

    public NonStarCharacter()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NonSlashCharacterParser
{
    private ParserNetwork? parser_network;

    public NonSlashCharacterParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,NonSlashCharacterResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        NonSlashCharacter? instance = new NonSlashCharacter();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x00,0x2E))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x30,0xFF))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        NonSlashCharacterResult? result = new NonSlashCharacterResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,NonSlashCharacterResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        NonSlashCharacterResult? result = new NonSlashCharacterResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,NonSlashCharacterListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<NonSlashCharacter?>? results = new List<NonSlashCharacter?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            NonSlashCharacterResult? result = new NonSlashCharacterResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        NonSlashCharacterListResult? result = new NonSlashCharacterListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NonSlashCharacterResult
{
    private NonSlashCharacter? value;
    private bool? result;

    public NonSlashCharacterResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(NonSlashCharacter? new_value)
    {
        this.value = new_value;
    }

    public NonSlashCharacter? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NonSlashCharacterListResult
{
    private List<NonSlashCharacter?>? value;
    private bool? result;

    public NonSlashCharacterListResult()
    {
        this.value = new List<NonSlashCharacter?>();
        this.result = false;
    }

    public void SetValue(List<NonSlashCharacter?>? new_value)
    {
        this.value = new_value;
    }

    public List<NonSlashCharacter?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NonSlashCharacter
{
    private LengthString? length_string;

    public NonSlashCharacter()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CommentContentParser
{
    private ParserNetwork? parser_network;

    public CommentContentParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,CommentContentResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        CommentContent? instance = new CommentContent();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(non_star_character_parser_instance?.ParseSingle(index))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"*")))&&AsBoolean(non_slash_character_parser_instance?.ParseSingle(index))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        CommentContentResult? result = new CommentContentResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,CommentContentResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        CommentContentResult? result = new CommentContentResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,CommentContentListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<CommentContent?>? results = new List<CommentContent?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            CommentContentResult? result = new CommentContentResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        CommentContentListResult? result = new CommentContentListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CommentContentResult
{
    private CommentContent? value;
    private bool? result;

    public CommentContentResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(CommentContent? new_value)
    {
        this.value = new_value;
    }

    public CommentContent? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CommentContentListResult
{
    private List<CommentContent?>? value;
    private bool? result;

    public CommentContentListResult()
    {
        this.value = new List<CommentContent?>();
        this.result = false;
    }

    public void SetValue(List<CommentContent?>? new_value)
    {
        this.value = new_value;
    }

    public List<CommentContent?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class CommentContent
{
    private LengthString? length_string;

    public CommentContent()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class QualfiedNameParser
{
    private ParserNetwork? parser_network;

    public QualfiedNameParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,QualfiedNameResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        QualfiedName? instance = new QualfiedName();
        NameResult? name_field = new NameResult();
        NameTailResult? tail_field = new NameTailResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(name_parser_instance?.ParseSingleSave(index,name_field)))&&AsBoolean(name_tail_parser_instance?.ParseOptionalSave(index,tail_field))))
        {
            instance?.SetName(name_field?.GetValue());
            instance?.SetTail(tail_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            name_field = new NameResult();
            tail_field = new NameTailResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        QualfiedNameResult? result = new QualfiedNameResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,QualfiedNameResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        QualfiedNameResult? result = new QualfiedNameResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,QualfiedNameListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<QualfiedName?>? results = new List<QualfiedName?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            QualfiedNameResult? result = new QualfiedNameResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        QualfiedNameListResult? result = new QualfiedNameListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class QualfiedNameResult
{
    private QualfiedName? value;
    private bool? result;

    public QualfiedNameResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(QualfiedName? new_value)
    {
        this.value = new_value;
    }

    public QualfiedName? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class QualfiedNameListResult
{
    private List<QualfiedName?>? value;
    private bool? result;

    public QualfiedNameListResult()
    {
        this.value = new List<QualfiedName?>();
        this.result = false;
    }

    public void SetValue(List<QualfiedName?>? new_value)
    {
        this.value = new_value;
    }

    public List<QualfiedName?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class QualfiedName
{
    private LengthString? length_string;
    private Name? name_field;
    private NameTail? tail_field;

    public QualfiedName()
    {
        this.length_string = null;
        this.name_field = null;
        this.tail_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetName(Name? input_value)
    {
        this.name_field = input_value;
    }

    public Name? GetName()
    {
        return this?.name_field;
    }

    public void SetTail(NameTail? input_value)
    {
        this.tail_field = input_value;
    }

    public NameTail? GetTail()
    {
        return this?.tail_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NameTailParser
{
    private ParserNetwork? parser_network;

    public NameTailParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,NameTailResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        NameTail? instance = new NameTail();
        NameResult? name_field = new NameResult();
        NameTailResult? tail_field = new NameTailResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,".")))&&AsBoolean(name_parser_instance?.ParseSingleSave(index,name_field)))&&AsBoolean(name_tail_parser_instance?.ParseOptionalSave(index,tail_field))))
        {
            instance?.SetName(name_field?.GetValue());
            instance?.SetTail(tail_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            name_field = new NameResult();
            tail_field = new NameTailResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        NameTailResult? result = new NameTailResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,NameTailResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        NameTailResult? result = new NameTailResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,NameTailListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<NameTail?>? results = new List<NameTail?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            NameTailResult? result = new NameTailResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        NameTailListResult? result = new NameTailListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NameTailResult
{
    private NameTail? value;
    private bool? result;

    public NameTailResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(NameTail? new_value)
    {
        this.value = new_value;
    }

    public NameTail? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NameTailListResult
{
    private List<NameTail?>? value;
    private bool? result;

    public NameTailListResult()
    {
        this.value = new List<NameTail?>();
        this.result = false;
    }

    public void SetValue(List<NameTail?>? new_value)
    {
        this.value = new_value;
    }

    public List<NameTail?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NameTail
{
    private LengthString? length_string;
    private Name? name_field;
    private NameTail? tail_field;

    public NameTail()
    {
        this.length_string = null;
        this.name_field = null;
        this.tail_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetName(Name? input_value)
    {
        this.name_field = input_value;
    }

    public Name? GetName()
    {
        return this?.name_field;
    }

    public void SetTail(NameTail? input_value)
    {
        this.tail_field = input_value;
    }

    public NameTail? GetTail()
    {
        return this?.tail_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NameParser
{
    private ParserNetwork? parser_network;

    public NameParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,NameResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Name? instance = new Name();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(name_character_parser_instance?.ParseMany(index,1,-1))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        NameResult? result = new NameResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,NameResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        NameResult? result = new NameResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,NameListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Name?>? results = new List<Name?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            NameResult? result = new NameResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        NameListResult? result = new NameListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NameResult
{
    private Name? value;
    private bool? result;

    public NameResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Name? new_value)
    {
        this.value = new_value;
    }

    public Name? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NameListResult
{
    private List<Name?>? value;
    private bool? result;

    public NameListResult()
    {
        this.value = new List<Name?>();
        this.result = false;
    }

    public void SetValue(List<Name?>? new_value)
    {
        this.value = new_value;
    }

    public List<Name?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Name
{
    private LengthString? length_string;

    public Name()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NameCharacterParser
{
    private ParserNetwork? parser_network;

    public NameCharacterParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,NameCharacterResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        NameCharacter? instance = new NameCharacter();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x30,0x39))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x41,0x5A))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"_"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x61,0x7A))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        NameCharacterResult? result = new NameCharacterResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,NameCharacterResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        NameCharacterResult? result = new NameCharacterResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,NameCharacterListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<NameCharacter?>? results = new List<NameCharacter?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            NameCharacterResult? result = new NameCharacterResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        NameCharacterListResult? result = new NameCharacterListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NameCharacterResult
{
    private NameCharacter? value;
    private bool? result;

    public NameCharacterResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(NameCharacter? new_value)
    {
        this.value = new_value;
    }

    public NameCharacter? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NameCharacterListResult
{
    private List<NameCharacter?>? value;
    private bool? result;

    public NameCharacterListResult()
    {
        this.value = new List<NameCharacter?>();
        this.result = false;
    }

    public void SetValue(List<NameCharacter?>? new_value)
    {
        this.value = new_value;
    }

    public List<NameCharacter?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NameCharacter
{
    private LengthString? length_string;

    public NameCharacter()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class BooleanParser
{
    private ParserNetwork? parser_network;

    public BooleanParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,BooleanResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Boolean? instance = new Boolean();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"true"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"false"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        BooleanResult? result = new BooleanResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,BooleanResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        BooleanResult? result = new BooleanResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,BooleanListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Boolean?>? results = new List<Boolean?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            BooleanResult? result = new BooleanResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        BooleanListResult? result = new BooleanListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class BooleanResult
{
    private Boolean? value;
    private bool? result;

    public BooleanResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Boolean? new_value)
    {
        this.value = new_value;
    }

    public Boolean? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class BooleanListResult
{
    private List<Boolean?>? value;
    private bool? result;

    public BooleanListResult()
    {
        this.value = new List<Boolean?>();
        this.result = false;
    }

    public void SetValue(List<Boolean?>? new_value)
    {
        this.value = new_value;
    }

    public List<Boolean?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Boolean
{
    private LengthString? length_string;

    public Boolean()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ByteParser
{
    private ParserNetwork? parser_network;

    public ByteParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ByteResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Byte? instance = new Byte();
        ByteDigitResult? high_field = new ByteDigitResult();
        ByteDigitResult? low_field = new ByteDigitResult();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"0x")))&&AsBoolean(byte_digit_parser_instance?.ParseSingleSave(index,high_field)))&&AsBoolean(byte_digit_parser_instance?.ParseSingleSave(index,low_field))))
        {
            instance?.SetHigh(high_field?.GetValue());
            instance?.SetLow(low_field?.GetValue());
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            high_field = new ByteDigitResult();
            low_field = new ByteDigitResult();
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ByteResult? result = new ByteResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ByteResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ByteResult? result = new ByteResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ByteListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Byte?>? results = new List<Byte?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ByteResult? result = new ByteResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ByteListResult? result = new ByteListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ByteResult
{
    private Byte? value;
    private bool? result;

    public ByteResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Byte? new_value)
    {
        this.value = new_value;
    }

    public Byte? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ByteListResult
{
    private List<Byte?>? value;
    private bool? result;

    public ByteListResult()
    {
        this.value = new List<Byte?>();
        this.result = false;
    }

    public void SetValue(List<Byte?>? new_value)
    {
        this.value = new_value;
    }

    public List<Byte?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Byte
{
    private LengthString? length_string;
    private ByteDigit? high_field;
    private ByteDigit? low_field;

    public Byte()
    {
        this.length_string = null;
        this.high_field = null;
        this.low_field = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    public void SetHigh(ByteDigit? input_value)
    {
        this.high_field = input_value;
    }

    public ByteDigit? GetHigh()
    {
        return this?.high_field;
    }

    public void SetLow(ByteDigit? input_value)
    {
        this.low_field = input_value;
    }

    public ByteDigit? GetLow()
    {
        return this?.low_field;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ByteDigitParser
{
    private ParserNetwork? parser_network;

    public ByteDigitParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,ByteDigitResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        ByteDigit? instance = new ByteDigit();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x30,0x39))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x41,0x46))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        ByteDigitResult? result = new ByteDigitResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,ByteDigitResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        ByteDigitResult? result = new ByteDigitResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,ByteDigitListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<ByteDigit?>? results = new List<ByteDigit?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            ByteDigitResult? result = new ByteDigitResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        ByteDigitListResult? result = new ByteDigitListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ByteDigitResult
{
    private ByteDigit? value;
    private bool? result;

    public ByteDigitResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(ByteDigit? new_value)
    {
        this.value = new_value;
    }

    public ByteDigit? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ByteDigitListResult
{
    private List<ByteDigit?>? value;
    private bool? result;

    public ByteDigitListResult()
    {
        this.value = new List<ByteDigit?>();
        this.result = false;
    }

    public void SetValue(List<ByteDigit?>? new_value)
    {
        this.value = new_value;
    }

    public List<ByteDigit?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class ByteDigit
{
    private LengthString? length_string;

    public ByteDigit()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NegativeParser
{
    private ParserNetwork? parser_network;

    public NegativeParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,NegativeResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Negative? instance = new Negative();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"-"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        NegativeResult? result = new NegativeResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,NegativeResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        NegativeResult? result = new NegativeResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,NegativeListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Negative?>? results = new List<Negative?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            NegativeResult? result = new NegativeResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        NegativeListResult? result = new NegativeListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NegativeResult
{
    private Negative? value;
    private bool? result;

    public NegativeResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Negative? new_value)
    {
        this.value = new_value;
    }

    public Negative? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NegativeListResult
{
    private List<Negative?>? value;
    private bool? result;

    public NegativeListResult()
    {
        this.value = new List<Negative?>();
        this.result = false;
    }

    public void SetValue(List<Negative?>? new_value)
    {
        this.value = new_value;
    }

    public List<Negative?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Negative
{
    private LengthString? length_string;

    public Negative()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DecimalParser
{
    private ParserNetwork? parser_network;

    public DecimalParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,DecimalResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Decimal? instance = new Decimal();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(negative_parser_instance?.ParseOptional(index)))&&AsBoolean(number_parser_instance?.ParseSingle(index)))&&AsBoolean(string_parser_instance?.ParseSingle(index,".")))&&AsBoolean(number_parser_instance?.ParseSingle(index))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        DecimalResult? result = new DecimalResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,DecimalResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        DecimalResult? result = new DecimalResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,DecimalListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Decimal?>? results = new List<Decimal?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            DecimalResult? result = new DecimalResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        DecimalListResult? result = new DecimalListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DecimalResult
{
    private Decimal? value;
    private bool? result;

    public DecimalResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Decimal? new_value)
    {
        this.value = new_value;
    }

    public Decimal? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DecimalListResult
{
    private List<Decimal?>? value;
    private bool? result;

    public DecimalListResult()
    {
        this.value = new List<Decimal?>();
        this.result = false;
    }

    public void SetValue(List<Decimal?>? new_value)
    {
        this.value = new_value;
    }

    public List<Decimal?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Decimal
{
    private LengthString? length_string;

    public Decimal()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NumberParser
{
    private ParserNetwork? parser_network;

    public NumberParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,NumberResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Number? instance = new Number();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(AsBoolean(true)&&AsBoolean(negative_parser_instance?.ParseOptional(index)))&&AsBoolean(digit_parser_instance?.ParseMany(index,1,-1))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        NumberResult? result = new NumberResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,NumberResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        NumberResult? result = new NumberResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,NumberListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Number?>? results = new List<Number?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            NumberResult? result = new NumberResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        NumberListResult? result = new NumberListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NumberResult
{
    private Number? value;
    private bool? result;

    public NumberResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Number? new_value)
    {
        this.value = new_value;
    }

    public Number? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class NumberListResult
{
    private List<Number?>? value;
    private bool? result;

    public NumberListResult()
    {
        this.value = new List<Number?>();
        this.result = false;
    }

    public void SetValue(List<Number?>? new_value)
    {
        this.value = new_value;
    }

    public List<Number?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Number
{
    private LengthString? length_string;

    public Number()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DigitParser
{
    private ParserNetwork? parser_network;

    public DigitParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,DigitResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Digit? instance = new Digit();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x30,0x39))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        DigitResult? result = new DigitResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,DigitResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        DigitResult? result = new DigitResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,DigitListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Digit?>? results = new List<Digit?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            DigitResult? result = new DigitResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        DigitListResult? result = new DigitListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DigitResult
{
    private Digit? value;
    private bool? result;

    public DigitResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Digit? new_value)
    {
        this.value = new_value;
    }

    public Digit? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class DigitListResult
{
    private List<Digit?>? value;
    private bool? result;

    public DigitListResult()
    {
        this.value = new List<Digit?>();
        this.result = false;
    }

    public void SetValue(List<Digit?>? new_value)
    {
        this.value = new_value;
    }

    public List<Digit?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Digit
{
    private LengthString? length_string;

    public Digit()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LiteralParser
{
    private ParserNetwork? parser_network;

    public LiteralParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,LiteralResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Literal? instance = new Literal();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(literal_character_parser_instance?.ParseMany(index,0,-1))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        LiteralResult? result = new LiteralResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,LiteralResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        LiteralResult? result = new LiteralResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,LiteralListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Literal?>? results = new List<Literal?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            LiteralResult? result = new LiteralResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        LiteralListResult? result = new LiteralListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LiteralResult
{
    private Literal? value;
    private bool? result;

    public LiteralResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Literal? new_value)
    {
        this.value = new_value;
    }

    public Literal? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LiteralListResult
{
    private List<Literal?>? value;
    private bool? result;

    public LiteralListResult()
    {
        this.value = new List<Literal?>();
        this.result = false;
    }

    public void SetValue(List<Literal?>? new_value)
    {
        this.value = new_value;
    }

    public List<Literal?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Literal
{
    private LengthString? length_string;

    public Literal()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LiteralCharacterParser
{
    private ParserNetwork? parser_network;

    public LiteralCharacterParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,LiteralCharacterResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        LiteralCharacter? instance = new LiteralCharacter();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x00,0x21))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"\\\""))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x23,0x5B))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(string_parser_instance?.ParseSingle(index,"\\\\"))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x5D,0xFF))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        LiteralCharacterResult? result = new LiteralCharacterResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,LiteralCharacterResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        LiteralCharacterResult? result = new LiteralCharacterResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,LiteralCharacterListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<LiteralCharacter?>? results = new List<LiteralCharacter?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            LiteralCharacterResult? result = new LiteralCharacterResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        LiteralCharacterListResult? result = new LiteralCharacterListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LiteralCharacterResult
{
    private LiteralCharacter? value;
    private bool? result;

    public LiteralCharacterResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(LiteralCharacter? new_value)
    {
        this.value = new_value;
    }

    public LiteralCharacter? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LiteralCharacterListResult
{
    private List<LiteralCharacter?>? value;
    private bool? result;

    public LiteralCharacterListResult()
    {
        this.value = new List<LiteralCharacter?>();
        this.result = false;
    }

    public void SetValue(List<LiteralCharacter?>? new_value)
    {
        this.value = new_value;
    }

    public List<LiteralCharacter?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class LiteralCharacter
{
    private LengthString? length_string;

    public LiteralCharacter()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class WhitespaceParser
{
    private ParserNetwork? parser_network;

    public WhitespaceParser()
    {
        this.parser_network = null;
    }

    public void SetParserNetwork(ParserNetwork? input)
    {
        this.parser_network = input;
    }

    public bool? ParseSingleSave(LengthString? index,WhitespaceResult? result)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        LengthString? consumed_string = new LengthString();
        consumed_string?.SetData(index?.GetData());
        consumed_string?.SetStart(index?.GetStart());
        consumed_string?.SetLength(0);
        Whitespace? instance = new Whitespace();
        CTCodeFileParser? c_t_code_file_parser_instance = this?.parser_network?.GetCTCodeFileParser();
        ExternalDefinitionParser? external_definition_parser_instance = this?.parser_network?.GetExternalDefinitionParser();
        UnmanagedTypeParser? unmanaged_type_parser_instance = this?.parser_network?.GetUnmanagedTypeParser();
        DefinitionParser? definition_parser_instance = this?.parser_network?.GetDefinitionParser();
        InterfaceDefParser? interface_def_parser_instance = this?.parser_network?.GetInterfaceDefParser();
        ClassDefParser? class_def_parser_instance = this?.parser_network?.GetClassDefParser();
        ImplementationSpecParser? implementation_spec_parser_instance = this?.parser_network?.GetImplementationSpecParser();
        ContentDeclarationParser? content_declaration_parser_instance = this?.parser_network?.GetContentDeclarationParser();
        ContentDefinitionParser? content_definition_parser_instance = this?.parser_network?.GetContentDefinitionParser();
        PrimativeTypeParser? primative_type_parser_instance = this?.parser_network?.GetPrimativeTypeParser();
        DefinedTypeParser? defined_type_parser_instance = this?.parser_network?.GetDefinedTypeParser();
        SingletonTypeParser? singleton_type_parser_instance = this?.parser_network?.GetSingletonTypeParser();
        DimensionalNoteParser? dimensional_note_parser_instance = this?.parser_network?.GetDimensionalNoteParser();
        DimensionalTypeParser? dimensional_type_parser_instance = this?.parser_network?.GetDimensionalTypeParser();
        MapNoteParser? map_note_parser_instance = this?.parser_network?.GetMapNoteParser();
        MapTypeParser? map_type_parser_instance = this?.parser_network?.GetMapTypeParser();
        ValueTypeParser? value_type_parser_instance = this?.parser_network?.GetValueTypeParser();
        ParameterListDefParser? parameter_list_def_parser_instance = this?.parser_network?.GetParameterListDefParser();
        ParameterListParser? parameter_list_parser_instance = this?.parser_network?.GetParameterListParser();
        CodeBlockParser? code_block_parser_instance = this?.parser_network?.GetCodeBlockParser();
        DeclarationAssignParser? declaration_assign_parser_instance = this?.parser_network?.GetDeclarationAssignParser();
        DeclarationParser? declaration_parser_instance = this?.parser_network?.GetDeclarationParser();
        AssignmentParser? assignment_parser_instance = this?.parser_network?.GetAssignmentParser();
        ReturnParser? return_parser_instance = this?.parser_network?.GetReturnParser();
        ElseTailParser? else_tail_parser_instance = this?.parser_network?.GetElseTailParser();
        ConditionalParser? conditional_parser_instance = this?.parser_network?.GetConditionalParser();
        LoopParser? loop_parser_instance = this?.parser_network?.GetLoopParser();
        CallParser? call_parser_instance = this?.parser_network?.GetCallParser();
        AllocateParser? allocate_parser_instance = this?.parser_network?.GetAllocateParser();
        InstructionParser? instruction_parser_instance = this?.parser_network?.GetInstructionParser();
        RValueSingleParser? r_value_single_parser_instance = this?.parser_network?.GetRValueSingleParser();
        RValueTailParser? r_value_tail_parser_instance = this?.parser_network?.GetRValueTailParser();
        RValueParser? r_value_parser_instance = this?.parser_network?.GetRValueParser();
        BinaryOperatorParser? binary_operator_parser_instance = this?.parser_network?.GetBinaryOperatorParser();
        UnaryOperatorParser? unary_operator_parser_instance = this?.parser_network?.GetUnaryOperatorParser();
        CommentParser? comment_parser_instance = this?.parser_network?.GetCommentParser();
        NonStarCharacterParser? non_star_character_parser_instance = this?.parser_network?.GetNonStarCharacterParser();
        NonSlashCharacterParser? non_slash_character_parser_instance = this?.parser_network?.GetNonSlashCharacterParser();
        CommentContentParser? comment_content_parser_instance = this?.parser_network?.GetCommentContentParser();
        QualfiedNameParser? qualfied_name_parser_instance = this?.parser_network?.GetQualfiedNameParser();
        NameTailParser? name_tail_parser_instance = this?.parser_network?.GetNameTailParser();
        NameParser? name_parser_instance = this?.parser_network?.GetNameParser();
        NameCharacterParser? name_character_parser_instance = this?.parser_network?.GetNameCharacterParser();
        BooleanParser? boolean_parser_instance = this?.parser_network?.GetBooleanParser();
        ByteParser? byte_parser_instance = this?.parser_network?.GetByteParser();
        ByteDigitParser? byte_digit_parser_instance = this?.parser_network?.GetByteDigitParser();
        NegativeParser? negative_parser_instance = this?.parser_network?.GetNegativeParser();
        DecimalParser? decimal_parser_instance = this?.parser_network?.GetDecimalParser();
        NumberParser? number_parser_instance = this?.parser_network?.GetNumberParser();
        DigitParser? digit_parser_instance = this?.parser_network?.GetDigitParser();
        LiteralParser? literal_parser_instance = this?.parser_network?.GetLiteralParser();
        LiteralCharacterParser? literal_character_parser_instance = this?.parser_network?.GetLiteralCharacterParser();
        WhitespaceParser? whitespace_parser_instance = this?.parser_network?.GetWhitespaceParser();
        StringParser? string_parser_instance = this?.parser_network?.GetStringParser();
        CharacterParser? character_parser_instance = this?.parser_network?.GetCharacterParser();
        CharacterRangeParser? character_range_parser_instance = this?.parser_network?.GetCharacterRangeParser();
        if (AsBoolean(AsBoolean(true)&&AsBoolean(character_range_parser_instance?.ParseSingle(index,0x00,0x20))))
        {
            consumed_string?.SetLength(index?.GetStart()-index_start);
            instance?.SetLengthString(consumed_string);
            result?.SetValue(instance);
            result?.SetResult(true);
            return result?.GetResult();
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
        }
        result?.SetResult(false);
        return result?.GetResult();
    }

    public bool? ParseSingle(LengthString? index)
    {
        WhitespaceResult? result = new WhitespaceResult();
        return this?.ParseSingleSave(index,result);
    }

    public bool? ParseOptionalSave(LengthString? index,WhitespaceResult? result)
    {
        this?.ParseSingleSave(index,result);
        result?.SetResult(true);
        return true;
    }

    public bool? ParseOptional(LengthString? index)
    {
        WhitespaceResult? result = new WhitespaceResult();
        return this?.ParseOptionalSave(index,result);
    }

    public bool? ParseManySave(LengthString? index,WhitespaceListResult? list_result,int? minimum,int? maximum)
    {
        int? index_start = index?.GetStart();
        int? index_length = index?.GetLength();
        List<Whitespace?>? results = new List<Whitespace?>();
        int? count = 0;
        int? max_check = maximum;
        bool? check_next = true;
        if (AsBoolean(maximum<0))
        {
            max_check = count+1;
        }
        while (AsBoolean(AsBoolean(check_next)&&AsBoolean(count<max_check)))
        {
            WhitespaceResult? result = new WhitespaceResult();
            this?.ParseSingleSave(index,result);
            check_next = result?.GetResult();
            if (AsBoolean(result?.GetResult()))
            {
                count = count+1;
                Append(results,result?.GetValue());
            }
            if (AsBoolean(maximum<0))
            {
                max_check = count+1;
            }
        }
        if (AsBoolean(AsBoolean(count>=minimum)&&AsBoolean(count<=max_check)))
        {
            list_result?.SetValue(results);
            list_result?.SetResult(true);
        }
        else
        {
            index?.SetStart(index_start);
            index?.SetLength(index_length);
            list_result?.SetResult(false);
        }
        return list_result?.GetResult();
    }

    public bool? ParseMany(LengthString? index,int? minimum,int? maximum)
    {
        WhitespaceListResult? result = new WhitespaceListResult();
        return this?.ParseManySave(index,result,minimum,maximum);
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class WhitespaceResult
{
    private Whitespace? value;
    private bool? result;

    public WhitespaceResult()
    {
        this.value = null;
        this.result = false;
    }

    public void SetValue(Whitespace? new_value)
    {
        this.value = new_value;
    }

    public Whitespace? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class WhitespaceListResult
{
    private List<Whitespace?>? value;
    private bool? result;

    public WhitespaceListResult()
    {
        this.value = new List<Whitespace?>();
        this.result = false;
    }

    public void SetValue(List<Whitespace?>? new_value)
    {
        this.value = new_value;
    }

    public List<Whitespace?>? GetValue()
    {
        return this?.value;
    }

    public void SetResult(bool? new_result)
    {
        this.result = new_result;
    }

    public bool? GetResult()
    {
        return this?.result;
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
public class Whitespace
{
    private LengthString? length_string;

    public Whitespace()
    {
        this.length_string = null;
    }

    public void SetLengthString(LengthString? new_value)
    {
        this.length_string = new LengthString();
        this?.length_string?.SetData(new_value?.GetData());
        this?.length_string?.SetStart(new_value?.GetStart());
        this?.length_string?.SetLength(new_value?.GetLength());
    }

    public string? UnParse()
    {
        return this?.length_string?.GetString();
    }

    private static void ClearList<T>(List<T>? input) { input?.Clear(); }
    private static int? Size<T>(List<T>? input) { return input?.Count; }
    private static T? Element<T>(List<T>? input, int? element) { return input != null ? input[element??0] : default; }
    private static void Append<T>(List<T>? input, T element) { input?.Add(element); }
    private static void ClearMap<T>(Dictionary<string, T>? input) { input?.Clear();  }
    private static void SetKV<T>(Dictionary<string, T>? input, string? key, T element) { input?.Add(key??"", element); }
    private static List<string?>? Keys<T>(Dictionary<string, T>? input) { return new List<string?>(input?.Keys?.ToList()??new List<string>()); }
    private static bool? HasKV<T>(Dictionary<string, T>? input, string? key) { return input?.ContainsKey(key??""); }
    private static T? GetKV<T>(Dictionary<string, T>? input, string? key) { return input != null ? input[key??""] : default; }
    private static int? Length(string? input) { return input?.Length;  }
    private static string? At(string? input, int? index) { return input?.Length > index ? input?.Substring(index??0, 1) : "";  }
    private static int? IntAt(string? input, int? index) { return input?.Length > index ? (input[index??0] + 255 % 255) : 0;  }
    private static string? Concat(string? left, string? right) { return left + right; }
    private static bool AsBoolean(bool value) { return value; }
    private static bool AsBoolean<T>(T? value) { return value != null && !value.Equals(false); }
}
