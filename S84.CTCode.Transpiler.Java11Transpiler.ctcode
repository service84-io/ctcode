exdef S84.CTCode.dbnf.ctcode;
exdef S84.CTCode.System.ctcode;
exdef S84.CTCode.Transpiler.StandardStructure.ctcode;
exdef S84.CTCode.Transpiler.StringHelper.ctcode;

class Java11Transpiler implements S84.CTCode.Transpiler.StandardStructure.ctcode.TargetSpecificFunctions {
    S84.CTCode.System.ctcode.System system;
    S84.CTCode.dbnf.ctcode.CTCodeFile c_t_code_file;
    string base_name;

    S84.CTCode.System.ctcode.OutputStream logger;

    S84.CTCode.Transpiler.StringHelper.ctcode.StringHelper string_helper;

    function void Initialize() { myself.string_helper = new S84.CTCode.Transpiler.StringHelper.ctcode.StringHelper; }
    function void SetSystem(S84.CTCode.System.ctcode.System system) { myself.system = system; }
    function void SetCTCodeFile(S84.CTCode.dbnf.ctcode.CTCodeFile c_t_code_file) { myself.c_t_code_file = c_t_code_file; }
    function void SetBaseName(string base_name) { myself.base_name = base_name; }
    function void SetLogger(S84.CTCode.System.ctcode.OutputStream logger) { myself.logger = logger; }

    string[] imports;
    string current_interface;
    string[] interface_definition;
    string current_class;
    string[] class_definition;
    string[] class_init;
    string[] class_members;

    function int GetBaseIndentation() { return 1; }

    function string GetCallName(string name)
    {
        return myself.string_helper.SnakeCaseToCamelCase(name);
    }

    function bool IsReserved(string name) {
        return false ||
            myself.string_helper.BeginsWith("reserved_prefix_", name) ||
            name == "boolean" ||
            name == "float";
    }

    function string GetVariableName(string name)
    {
        string value = myself.string_helper.CamelCaseToSnakeCase(name);

        if (value == "myself") {
            return "this";
        }

        if (myself.IsReserved(value)) {
            return Concat("reserved_prefix_", value);
        }

        return value;
    }

    function string GetVariableChain(string[] name_parts) {
        string delimiter = ".";
        string first_name = Element(name_parts, 0);
        string result = myself.GetVariableName(first_name);
        int name_parts_index = 1;

        while (name_parts_index < size(name_parts)) {
            string name = Element(name_parts, name_parts_index);
            result = Concat(Concat(result, delimiter), myself.GetVariableName(name));
            name_parts_index = name_parts_index + 1;
        }

        return result;
    }

    function string ConvertCall(string[] name_chain, string[] parameters) {
        string result = Element(name_chain, 0);
        int name_chain_index = 1;

        while (name_chain_index < Size(name_chain)) {
            string name_part = Element(name_chain, name_chain_index);
            result = Concat(Concat(result, "."), name_part);
            name_chain_index = name_chain_index + 1;
        }

        result = Concat(result, "(");

        if (Size(parameters) > 0) {
            result = Concat(result, Element(parameters, 0));
            int parameters_index = 1;

            while (parameters_index < Size(parameters)) {
                string parameter = Element(parameters, parameters_index);
                result = Concat(result, ", ");
                result = Concat(result, parameter);
                parameters_index = parameters_index + 1;
            }
        }

        result = Concat(result, ")");
        return result;
    }

    function string ConvertAllocate(string type) {
        return Concat(Concat("new ", type), "()");
    }

    function string ConvertByte(string high, string low) {
        return Concat(Concat("0x", high), low);
    }

    function string ConvertDecimal(string decimal) {
        return decimal;
    }

    function string ConvertNumber(string number) {
        return number;
    }

    function string ConvertBoolean(string boolean) {
        if (boolean == "true") {
            return "true";
        }

        if (boolean == "false") {
            return "false";
        }

        return "";
    }

    function string ConvertVariable(string variable) {
        return variable;
    }

    function string ConvertString(string literal) {
        return Concat(Concat("\"", literal), "\"");
    }

    function string UnaryOperator(string op, string r_value) {
        if (op == "!") {
            return Concat(Concat("(! AsBoolean(", r_value), "))");
        }

        return r_value;
    }

    function string BinaryOperator(string op, string r_value_l, string r_value_r) {
        if (op == "+") {
            return Concat(Concat(Concat(Concat("(", r_value_l), "+"), r_value_r), ")");
        }

        if (op == "-") {
            return Concat(Concat(Concat(Concat("(", r_value_l), "-"), r_value_r), ")");
        }

        if (op == "<=") {
            return Concat(Concat(Concat(Concat("(", r_value_l), "<="), r_value_r), ")");
        }

        if (op == ">=") {
            return Concat(Concat(Concat(Concat("(", r_value_l), ">="), r_value_r), ")");
        }

        if (op == "==") {
            return Concat(Concat(Concat(Concat("Equals(", r_value_l), ","), r_value_r), ")");
        }

        if (op == "!=") {
            return Concat(Concat(Concat(Concat("!Equals(", r_value_l), ","), r_value_r), ")");
        }

        if (op == "<") {
            return Concat(Concat(Concat(Concat("(", r_value_l), "<"), r_value_r), ")");
        }

        if (op == ">") {
            return Concat(Concat(Concat(Concat("(", r_value_l), ">"), r_value_r), ")");
        }

        if (op == "||") {
            return Concat(Concat(Concat(Concat("(AsBoolean(", r_value_l), ") || AsBoolean("), r_value_r), "))");
        }

        if (op == "&&") {
            return Concat(Concat(Concat(Concat("(AsBoolean(", r_value_l), ") && AsBoolean("), r_value_r), "))");
        }

        return "";
    }

    function string GetTypeName(string name)
    {
        return myself.string_helper.SnakeCaseToCamelCase(name);
    }

    function string GetDimensionalType(string singleton_type, int dimensions) {
        string result = singleton_type;

        while (dimensions > 0) {
            result = Concat(Concat("java.util.ArrayList<", result), ">");
            dimensions = dimensions - 1;
        }

        return result;
    }

    function string GetMapType(string singleton_type) {
        return Concat(Concat("java.util.HashMap<java.lang.String, ", singleton_type), ">");
    }

    function string GetPrimativeType(string c_t_type) {
        if (c_t_type == "int") {
            return "int";
        }

        if (c_t_type == "string") {
            return "java.lang.String";
        }

        if (c_t_type == "bool") {
            return "boolean";
        }

        if (c_t_type == "float") {
            return "float";
        }

        if (c_t_type == "void") {
            return "void";
        }

        return "";
    }

    function string GetDefinedType(string c_t_type) {
        return c_t_type;
    }

    function string GetQualifiedTypeName(string[] name_parts) {
        string delimiter = ".";
        int name_parts_index = Size(name_parts) - 1;
        int last_package_index = Size(name_parts) - 2;
        string type_part = Element(name_parts, name_parts_index);
        string result = myself.GetTypeName(type_part);

        if (name_parts_index > 0) {
            result = Concat(delimiter, result);

            while (name_parts_index > 0) {
                name_parts_index = name_parts_index - 1;
                string name_part = Element(name_parts, name_parts_index);

                if (name_parts_index != last_package_index) {
                    result = Concat(delimiter, result);
                }

                result = Concat(myself.string_helper.ToLower(name_part), result);
            }
        }

        return result;
    }

    function void BeginProcessingCTCodeFile() {
        ClearList(myself.imports);
        myself.current_interface = "";
        ClearList(myself.interface_definition);
        myself.current_class = "";
        ClearList(myself.class_definition);
        ClearList(myself.class_init);
        ClearList(myself.class_members);
    }

    function void ProcessExdef(string exdef) {
        Append(myself.imports, Concat(Concat("import ", myself.string_helper.ToLower(exdef)), ".*;"));
    }

    function void ProcessUnmanagedType(string unmanaged_type) {
        int noop = 0;
    }

    function void BeginProcessingInterface(string interface_name) {
        ClearList(myself.interface_definition);
        myself.current_interface = interface_name;
    }

    function void ProcessInterfaceFunctionDeclaration(string return_type, string function_name, S84.CTCode.Transpiler.StandardStructure.ctcode.ParameterDeclaration[] parameters) {
        Append(myself.interface_definition, Concat(Concat(Concat(Concat(Concat(myself.string_helper.Indentation(1), return_type), " "), function_name), myself.MakeParametersString(parameters)), ";"));
    }

    function void FinishProcessingInterface(string interface_name) {
        S84.CTCode.System.ctcode.OutputStream destination = myself.system.OpenFileWriter(Concat(Concat(Concat(myself.string_helper.DotToSlash(myself.string_helper.ToLower(myself.base_name)), "/"), myself.current_interface), ".java"));
        destination.WriteLine(Concat(Concat("package ", myself.string_helper.ToLower(myself.base_name)), ";"));
        destination.WriteLine("");

        if (Size(myself.imports) > 0) {
            myself.string_helper.WriteLines(destination, myself.imports);
            destination.WriteLine("");
        }

        destination.WriteLine(Concat(Concat("public interface ", interface_name), " {"));
        myself.string_helper.WriteLines(destination, myself.interface_definition);
        destination.WriteLine("}");
        myself.current_interface = "";
    }

    function void BeginProcessingClass(string class_name, string implementing) {
        ClearList(myself.class_definition);
        ClearList(myself.class_init);
        ClearList(myself.class_members);
        myself.current_class = class_name;
        Append(myself.class_init, Concat(Concat(Concat(myself.string_helper.Indentation(1), "public "), class_name), "()"));
        Append(myself.class_init, Concat(myself.string_helper.Indentation(1), "{"));
    }

    function void BeginProcessingClassFunctionDefinition(string return_type, string function_name, S84.CTCode.Transpiler.StandardStructure.ctcode.ParameterDeclaration[] parameters) {
        Append(myself.class_definition, Concat(Concat(Concat(Concat(Concat(myself.string_helper.Indentation(1), "public "), return_type), " "), function_name), myself.MakeParametersString(parameters)));
    }

    function void BeginProcessCodeBlock(int indent) {
        Append(myself.class_definition, Concat(myself.string_helper.Indentation(indent), "{"));
    }

    function void FinishProcessCodeBlock(int indent) {
        Append(myself.class_definition, Concat(myself.string_helper.Indentation(indent), "}"));
    }

    function void BeginProcessConditional(int indent, string r_value) {
        Append(myself.class_definition, Concat(Concat(Concat(myself.string_helper.Indentation(indent), "if (AsBoolean("), r_value), "))"));
    }

    function void ProcessElse(int indent) {
        Append(myself.class_definition, Concat(myself.string_helper.Indentation(indent), "else"));
    }

    function void FinishProcessConditional(int indent, string r_value) {
        int noop = 0;
    }

    function void BeginProcessLoop(int indent, string r_value) {
        Append(myself.class_definition, Concat(Concat(Concat(myself.string_helper.Indentation(indent), "while (AsBoolean("), r_value), "))"));
    }

    function void FinishProcessLoop(int indent, string r_value) {
        int noop = 0;
    }

    function void ProcessRtn(int indent, string r_value) {
        Append(myself.class_definition, Concat(Concat(Concat(myself.string_helper.Indentation(indent), "return "), r_value), ";"));
    }

    function void ProcessDeclaration(int indent, string type, string l_value, string r_value) {
        if (r_value == "") {
            r_value = myself.GetDefault(type);
        }

        Append(myself.class_definition, Concat(Concat(Concat(Concat(Concat(Concat(myself.string_helper.Indentation(indent), type), " "), l_value), " = "), r_value), ";"));
    }

    function void ProcessAssignment(int indent, string l_value, string r_value) {
        Append(myself.class_definition, Concat(Concat(Concat(Concat(myself.string_helper.Indentation(indent), l_value), " = "), r_value), ";"));
    }

    function void ProcessCall(int indent, string call) {
        Append(myself.class_definition, Concat(Concat(myself.string_helper.Indentation(indent), call), ";"));
    }

    function void FinishProcessingClassFunctionDefinition(string return_type, string function_name, S84.CTCode.Transpiler.StandardStructure.ctcode.ParameterDeclaration[] parameters) {
        Append(myself.class_definition, "");
    }

    function void ProcessClassMemberDeclaration(string member_type, string member_name) {
        Append(myself.class_init, Concat(Concat(Concat(Concat(Concat(myself.string_helper.Indentation(2), "this."), member_name), " = "), myself.GetDefault(member_type)), ";"));
        Append(myself.class_members, Concat(Concat(Concat(Concat(Concat(myself.string_helper.Indentation(1), "private "), member_type), " "), member_name), ";"));
    }

    function void FinishProcessingClass(string class_name, string implementing) {
        S84.CTCode.System.ctcode.OutputStream destination = myself.system.OpenFileWriter(Concat(Concat(Concat(myself.string_helper.DotToSlash(myself.string_helper.ToLower(myself.base_name)), "/"), myself.current_class), ".java"));
        destination.WriteLine(Concat(Concat("package ", myself.string_helper.ToLower(myself.base_name)), ";"));
        destination.WriteLine("");

        if (Size(myself.imports) > 0) {
            myself.string_helper.WriteLines(destination, myself.imports);
            destination.WriteLine("");
        }

        if (implementing == "") {
            destination.WriteLine(Concat(Concat("public class ", class_name), " {"));
        } else {
            destination.WriteLine(Concat(Concat(Concat(Concat("public class ", class_name), " implements "), implementing), " {"));
        }

        myself.string_helper.WriteLines(destination, myself.class_init);
        destination.WriteLine(Concat(myself.string_helper.Indentation(1), "}"));
        destination.WriteLine("");
        myself.string_helper.WriteLines(destination, myself.class_definition);

        if (Size(myself.class_members) > 0) {
            myself.string_helper.WriteLines(destination, myself.class_members);
            destination.WriteLine("");
        }

        myself.WriteCommonFunctions(destination);
        destination.WriteLine("}");
        myself.current_class = "";
    }

    function void WriteCommonFunctions(S84.CTCode.System.ctcode.OutputStream destination_file) {
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static <T> void ClearList(java.util.ArrayList<T> input) { input.clear(); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static <T> int Size(java.util.ArrayList<T> input) { return input.size(); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static <T> T Element(java.util.ArrayList<T> input, int element) { return input.get(element); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static <T> void Append(java.util.ArrayList<T> input, T element) { input.add(element); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static <T> void ClearMap(java.util.HashMap<java.lang.String, T> input) { input.clear(); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static <T> void SetKV(java.util.HashMap<java.lang.String, T> input, java.lang.String key, T element) { input.put(key, element); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static <T> java.util.ArrayList<java.lang.String> Keys(java.util.HashMap<java.lang.String, T> input) { return new java.util.ArrayList<>(input.keySet()); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static <T> boolean HasKV(java.util.HashMap<java.lang.String, T> input, java.lang.String key) { return input.containsKey(key); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static <T> T GetKV(java.util.HashMap<java.lang.String, T> input, java.lang.String key) { return input.get(key); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static int Length(java.lang.String input) { return input.length(); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static java.lang.String At(java.lang.String input, int index) { try { return input.substring(index, index + 1);} catch(Exception e) { return \"\"; }}"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static int IntAt(java.lang.String input, int index) { return (int)input.charAt(index); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static java.lang.String Concat(java.lang.String left, java.lang.String right) { return left + right; }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static <T extends Object> boolean AsBoolean(T value) { return value != null; }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static boolean AsBoolean(boolean value) { return value; }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static boolean Equals(java.lang.String left, java.lang.String right) { return left.equals(right); }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static boolean Equals(boolean left, boolean right) { return left == right; }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static boolean Equals(int left, int right) { return left == right; }"));
        destination_file.WriteLine(Concat(myself.string_helper.Indentation(1), "private static boolean Equals(float left, float right) { return left == right; }"));
    }

    function void FinishProcessingCTCodeFile() {
        int noop = 0;
    }

    function string GetDefault(string java_type) {
        if (java_type == "int") {
            return "0";
        }

        if (java_type == "java.lang.String") {
            return "\"\"";
        }

        if (java_type == "boolean") {
            return "false";
        }

        if (java_type == "float") {
            return "0.0";
        }

        if (java_type == "void") {
            return "null";
        }

        if (myself.string_helper.BeginsWith("java.util.HashMap<java.lang.String", java_type)) {
            return "new java.util.HashMap<>()";
        }

        if (myself.string_helper.BeginsWith("java.util.ArrayList<", java_type)) {
            return "new java.util.ArrayList<>()";
        }

        return "null";
    }

    function string MakeParametersString(S84.CTCode.Transpiler.StandardStructure.ctcode.ParameterDeclaration[] parameters) {
        string result = "(";
        int parameters_index = 0;

        while (parameters_index < Size(parameters)) {
            S84.CTCode.Transpiler.StandardStructure.ctcode.ParameterDeclaration parameter = Element(parameters, parameters_index);

            if (parameters_index != 0) {
                result = Concat(result, ", ");
            }

            result = Concat(Concat(Concat(result, parameter.GetType()), " "), parameter.GetName());
            parameters_index = parameters_index + 1;
        }

        result = Concat(result, ")");
        return result;
    }
}