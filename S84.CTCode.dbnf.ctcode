class StringParser
{
    function bool ParseSingleSave(LengthString index, string value, StringResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LargeString index_data = index.GetData();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        String instance = new String;
        int value_length = Length(value);

        if (value_length > index.GetLength())
        {
            result.SetResult(false);
            return false;
        }

        int offset_index = 0;

        while (offset_index < value_length)
        {
            if (index_data.GetAt(index.GetStart() + offset_index) != At(value, offset_index))
            {
                result.SetResult(false);
                return false;
            }

            offset_index = offset_index + 1;
        }

        index.SetStart(index.GetStart() + value_length);
        index.SetLength(index.GetLength() - value_length);
        consumed_string.SetLength(index.GetStart() - index_start);
        instance.SetLengthString(consumed_string);
        result.SetValue(instance);
        result.SetResult(true);
        return true;
    }
    function bool ParseSingle(LengthString index, string value)
    {
        StringResult result = new StringResult;
        return ParseSingleSave(index, value, result);
    }
}

class StringResult
{
    function void SetValue(String new_value) { value = new_value; }
    function String GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    String value;
    bool result;
}

class StringListResult
{
    function void SetValue(String[] new_value) { value = new_value; }
    function String[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    String[] value;
    bool result;
}

class String
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class CharacterParser
{
    function bool ParseSingle(LengthString index, int value)
    {
        if (0 == index.GetLength())
        {
            return false;
        }

        LargeString index_data = index.GetData();
        int current_character = index_data.GetIntAt(index.GetStart());

        if (current_character == value)
        {
            index.SetStart(index.GetStart() + 1);
            index.SetLength(index.GetLength() - 1);
            return true;
        }

        return false;
    }
}

class CharacterResult
{
    function void SetValue(Character new_value) { value = new_value; }
    function Character GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Character value;
    bool result;
}

class CharacterListResult
{
    function void SetValue(Character[] new_value) { value = new_value; }
    function Character[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Character[] value;
    bool result;
}

class Character
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class CharacterRangeParser
{
    function bool ParseSingle(LengthString index, int low_value, int high_value)
    {
        if (0 == index.GetLength())
        {
            return false;
        }

        LargeString index_data = index.GetData();
        int current_character = index_data.GetIntAt(index.GetStart());

        if (low_value <= current_character && current_character <= high_value)
        {
            index.SetStart(index.GetStart() + 1);
            index.SetLength(index.GetLength() - 1);
            return true;
        }

        return false;
    }
}

class CharacterRangeResult
{
    function void SetValue(CharacterRange new_value) { value = new_value; }
    function CharacterRange GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CharacterRange value;
    bool result;
}

class CharacterRangeListResult
{
    function void SetValue(CharacterRange[] new_value) { value = new_value; }
    function CharacterRange[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CharacterRange[] value;
    bool result;
}

class CharacterRange
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class ParserNetwork
{
    CTCodeFileParser c_t_code_file_parser_field;
    function CTCodeFileParser GetCTCodeFileParser() { return c_t_code_file_parser_field; }
    ExternalDefinitionParser external_definition_parser_field;
    function ExternalDefinitionParser GetExternalDefinitionParser() { return external_definition_parser_field; }
    UnmanagedTypeParser unmanaged_type_parser_field;
    function UnmanagedTypeParser GetUnmanagedTypeParser() { return unmanaged_type_parser_field; }
    DefinitionParser definition_parser_field;
    function DefinitionParser GetDefinitionParser() { return definition_parser_field; }
    InterfaceDefParser interface_def_parser_field;
    function InterfaceDefParser GetInterfaceDefParser() { return interface_def_parser_field; }
    ClassDefParser class_def_parser_field;
    function ClassDefParser GetClassDefParser() { return class_def_parser_field; }
    ImplementationSpecParser implementation_spec_parser_field;
    function ImplementationSpecParser GetImplementationSpecParser() { return implementation_spec_parser_field; }
    ContentDeclarationParser content_declaration_parser_field;
    function ContentDeclarationParser GetContentDeclarationParser() { return content_declaration_parser_field; }
    ContentDefinitionParser content_definition_parser_field;
    function ContentDefinitionParser GetContentDefinitionParser() { return content_definition_parser_field; }
    PrimativeTypeParser primative_type_parser_field;
    function PrimativeTypeParser GetPrimativeTypeParser() { return primative_type_parser_field; }
    DefinedTypeParser defined_type_parser_field;
    function DefinedTypeParser GetDefinedTypeParser() { return defined_type_parser_field; }
    SingletonTypeParser singleton_type_parser_field;
    function SingletonTypeParser GetSingletonTypeParser() { return singleton_type_parser_field; }
    DimensionalNoteParser dimensional_note_parser_field;
    function DimensionalNoteParser GetDimensionalNoteParser() { return dimensional_note_parser_field; }
    DimensionalTypeParser dimensional_type_parser_field;
    function DimensionalTypeParser GetDimensionalTypeParser() { return dimensional_type_parser_field; }
    MapNoteParser map_note_parser_field;
    function MapNoteParser GetMapNoteParser() { return map_note_parser_field; }
    MapTypeParser map_type_parser_field;
    function MapTypeParser GetMapTypeParser() { return map_type_parser_field; }
    ValueTypeParser value_type_parser_field;
    function ValueTypeParser GetValueTypeParser() { return value_type_parser_field; }
    ParameterListDefParser parameter_list_def_parser_field;
    function ParameterListDefParser GetParameterListDefParser() { return parameter_list_def_parser_field; }
    ParameterListParser parameter_list_parser_field;
    function ParameterListParser GetParameterListParser() { return parameter_list_parser_field; }
    CodeBlockParser code_block_parser_field;
    function CodeBlockParser GetCodeBlockParser() { return code_block_parser_field; }
    DeclarationAssignParser declaration_assign_parser_field;
    function DeclarationAssignParser GetDeclarationAssignParser() { return declaration_assign_parser_field; }
    DeclarationParser declaration_parser_field;
    function DeclarationParser GetDeclarationParser() { return declaration_parser_field; }
    AssignmentParser assignment_parser_field;
    function AssignmentParser GetAssignmentParser() { return assignment_parser_field; }
    ReturnParser return_parser_field;
    function ReturnParser GetReturnParser() { return return_parser_field; }
    ElseTailParser else_tail_parser_field;
    function ElseTailParser GetElseTailParser() { return else_tail_parser_field; }
    ConditionalParser conditional_parser_field;
    function ConditionalParser GetConditionalParser() { return conditional_parser_field; }
    LoopParser loop_parser_field;
    function LoopParser GetLoopParser() { return loop_parser_field; }
    CallParser call_parser_field;
    function CallParser GetCallParser() { return call_parser_field; }
    AllocateParser allocate_parser_field;
    function AllocateParser GetAllocateParser() { return allocate_parser_field; }
    InstructionParser instruction_parser_field;
    function InstructionParser GetInstructionParser() { return instruction_parser_field; }
    RValueSingleParser r_value_single_parser_field;
    function RValueSingleParser GetRValueSingleParser() { return r_value_single_parser_field; }
    RValueTailParser r_value_tail_parser_field;
    function RValueTailParser GetRValueTailParser() { return r_value_tail_parser_field; }
    RValueParser r_value_parser_field;
    function RValueParser GetRValueParser() { return r_value_parser_field; }
    BinaryOperatorParser binary_operator_parser_field;
    function BinaryOperatorParser GetBinaryOperatorParser() { return binary_operator_parser_field; }
    UnaryOperatorParser unary_operator_parser_field;
    function UnaryOperatorParser GetUnaryOperatorParser() { return unary_operator_parser_field; }
    CommentParser comment_parser_field;
    function CommentParser GetCommentParser() { return comment_parser_field; }
    CommentCharacterParser comment_character_parser_field;
    function CommentCharacterParser GetCommentCharacterParser() { return comment_character_parser_field; }
    QualfiedNameParser qualfied_name_parser_field;
    function QualfiedNameParser GetQualfiedNameParser() { return qualfied_name_parser_field; }
    NameTailParser name_tail_parser_field;
    function NameTailParser GetNameTailParser() { return name_tail_parser_field; }
    NameParser name_parser_field;
    function NameParser GetNameParser() { return name_parser_field; }
    NameCharacterParser name_character_parser_field;
    function NameCharacterParser GetNameCharacterParser() { return name_character_parser_field; }
    BooleanParser boolean_parser_field;
    function BooleanParser GetBooleanParser() { return boolean_parser_field; }
    ByteParser byte_parser_field;
    function ByteParser GetByteParser() { return byte_parser_field; }
    ByteDigitParser byte_digit_parser_field;
    function ByteDigitParser GetByteDigitParser() { return byte_digit_parser_field; }
    NegativeParser negative_parser_field;
    function NegativeParser GetNegativeParser() { return negative_parser_field; }
    DecimalParser decimal_parser_field;
    function DecimalParser GetDecimalParser() { return decimal_parser_field; }
    NumberParser number_parser_field;
    function NumberParser GetNumberParser() { return number_parser_field; }
    DigitParser digit_parser_field;
    function DigitParser GetDigitParser() { return digit_parser_field; }
    LiteralParser literal_parser_field;
    function LiteralParser GetLiteralParser() { return literal_parser_field; }
    LiteralCharacterParser literal_character_parser_field;
    function LiteralCharacterParser GetLiteralCharacterParser() { return literal_character_parser_field; }
    WhitespaceParser whitespace_parser_field;
    function WhitespaceParser GetWhitespaceParser() { return whitespace_parser_field; }
    StringParser string_parser_field;
    function StringParser GetStringParser() { return string_parser_field;}
    CharacterParser character_parser_field;
    function CharacterParser GetCharacterParser() { return character_parser_field;}
    CharacterRangeParser character_range_parser_field;
    function CharacterRangeParser GetCharacterRangeParser() { return character_range_parser_field;}
    function void Initialize() {
        c_t_code_file_parser_field = new CTCodeFileParser;
        c_t_code_file_parser_field.SetParserNetwork(myself);
        external_definition_parser_field = new ExternalDefinitionParser;
        external_definition_parser_field.SetParserNetwork(myself);
        unmanaged_type_parser_field = new UnmanagedTypeParser;
        unmanaged_type_parser_field.SetParserNetwork(myself);
        definition_parser_field = new DefinitionParser;
        definition_parser_field.SetParserNetwork(myself);
        interface_def_parser_field = new InterfaceDefParser;
        interface_def_parser_field.SetParserNetwork(myself);
        class_def_parser_field = new ClassDefParser;
        class_def_parser_field.SetParserNetwork(myself);
        implementation_spec_parser_field = new ImplementationSpecParser;
        implementation_spec_parser_field.SetParserNetwork(myself);
        content_declaration_parser_field = new ContentDeclarationParser;
        content_declaration_parser_field.SetParserNetwork(myself);
        content_definition_parser_field = new ContentDefinitionParser;
        content_definition_parser_field.SetParserNetwork(myself);
        primative_type_parser_field = new PrimativeTypeParser;
        primative_type_parser_field.SetParserNetwork(myself);
        defined_type_parser_field = new DefinedTypeParser;
        defined_type_parser_field.SetParserNetwork(myself);
        singleton_type_parser_field = new SingletonTypeParser;
        singleton_type_parser_field.SetParserNetwork(myself);
        dimensional_note_parser_field = new DimensionalNoteParser;
        dimensional_note_parser_field.SetParserNetwork(myself);
        dimensional_type_parser_field = new DimensionalTypeParser;
        dimensional_type_parser_field.SetParserNetwork(myself);
        map_note_parser_field = new MapNoteParser;
        map_note_parser_field.SetParserNetwork(myself);
        map_type_parser_field = new MapTypeParser;
        map_type_parser_field.SetParserNetwork(myself);
        value_type_parser_field = new ValueTypeParser;
        value_type_parser_field.SetParserNetwork(myself);
        parameter_list_def_parser_field = new ParameterListDefParser;
        parameter_list_def_parser_field.SetParserNetwork(myself);
        parameter_list_parser_field = new ParameterListParser;
        parameter_list_parser_field.SetParserNetwork(myself);
        code_block_parser_field = new CodeBlockParser;
        code_block_parser_field.SetParserNetwork(myself);
        declaration_assign_parser_field = new DeclarationAssignParser;
        declaration_assign_parser_field.SetParserNetwork(myself);
        declaration_parser_field = new DeclarationParser;
        declaration_parser_field.SetParserNetwork(myself);
        assignment_parser_field = new AssignmentParser;
        assignment_parser_field.SetParserNetwork(myself);
        return_parser_field = new ReturnParser;
        return_parser_field.SetParserNetwork(myself);
        else_tail_parser_field = new ElseTailParser;
        else_tail_parser_field.SetParserNetwork(myself);
        conditional_parser_field = new ConditionalParser;
        conditional_parser_field.SetParserNetwork(myself);
        loop_parser_field = new LoopParser;
        loop_parser_field.SetParserNetwork(myself);
        call_parser_field = new CallParser;
        call_parser_field.SetParserNetwork(myself);
        allocate_parser_field = new AllocateParser;
        allocate_parser_field.SetParserNetwork(myself);
        instruction_parser_field = new InstructionParser;
        instruction_parser_field.SetParserNetwork(myself);
        r_value_single_parser_field = new RValueSingleParser;
        r_value_single_parser_field.SetParserNetwork(myself);
        r_value_tail_parser_field = new RValueTailParser;
        r_value_tail_parser_field.SetParserNetwork(myself);
        r_value_parser_field = new RValueParser;
        r_value_parser_field.SetParserNetwork(myself);
        binary_operator_parser_field = new BinaryOperatorParser;
        binary_operator_parser_field.SetParserNetwork(myself);
        unary_operator_parser_field = new UnaryOperatorParser;
        unary_operator_parser_field.SetParserNetwork(myself);
        comment_parser_field = new CommentParser;
        comment_parser_field.SetParserNetwork(myself);
        comment_character_parser_field = new CommentCharacterParser;
        comment_character_parser_field.SetParserNetwork(myself);
        qualfied_name_parser_field = new QualfiedNameParser;
        qualfied_name_parser_field.SetParserNetwork(myself);
        name_tail_parser_field = new NameTailParser;
        name_tail_parser_field.SetParserNetwork(myself);
        name_parser_field = new NameParser;
        name_parser_field.SetParserNetwork(myself);
        name_character_parser_field = new NameCharacterParser;
        name_character_parser_field.SetParserNetwork(myself);
        boolean_parser_field = new BooleanParser;
        boolean_parser_field.SetParserNetwork(myself);
        byte_parser_field = new ByteParser;
        byte_parser_field.SetParserNetwork(myself);
        byte_digit_parser_field = new ByteDigitParser;
        byte_digit_parser_field.SetParserNetwork(myself);
        negative_parser_field = new NegativeParser;
        negative_parser_field.SetParserNetwork(myself);
        decimal_parser_field = new DecimalParser;
        decimal_parser_field.SetParserNetwork(myself);
        number_parser_field = new NumberParser;
        number_parser_field.SetParserNetwork(myself);
        digit_parser_field = new DigitParser;
        digit_parser_field.SetParserNetwork(myself);
        literal_parser_field = new LiteralParser;
        literal_parser_field.SetParserNetwork(myself);
        literal_character_parser_field = new LiteralCharacterParser;
        literal_character_parser_field.SetParserNetwork(myself);
        whitespace_parser_field = new WhitespaceParser;
        whitespace_parser_field.SetParserNetwork(myself);
        string_parser_field = new StringParser;
        character_parser_field = new CharacterParser;
    }
}

class DBNFOmniType
{
    CTCodeFile c_t_code_file_field;
    function void SetCTCodeFile(CTCodeFile input_value) { c_t_code_file_field = input_value; }
    function CTCodeFile GetCTCodeFile() { return c_t_code_file_field; }
    ExternalDefinition external_definition_field;
    function void SetExternalDefinition(ExternalDefinition input_value) { external_definition_field = input_value; }
    function ExternalDefinition GetExternalDefinition() { return external_definition_field; }
    UnmanagedType unmanaged_type_field;
    function void SetUnmanagedType(UnmanagedType input_value) { unmanaged_type_field = input_value; }
    function UnmanagedType GetUnmanagedType() { return unmanaged_type_field; }
    Definition definition_field;
    function void SetDefinition(Definition input_value) { definition_field = input_value; }
    function Definition GetDefinition() { return definition_field; }
    InterfaceDef interface_def_field;
    function void SetInterfaceDef(InterfaceDef input_value) { interface_def_field = input_value; }
    function InterfaceDef GetInterfaceDef() { return interface_def_field; }
    ClassDef class_def_field;
    function void SetClassDef(ClassDef input_value) { class_def_field = input_value; }
    function ClassDef GetClassDef() { return class_def_field; }
    ImplementationSpec implementation_spec_field;
    function void SetImplementationSpec(ImplementationSpec input_value) { implementation_spec_field = input_value; }
    function ImplementationSpec GetImplementationSpec() { return implementation_spec_field; }
    ContentDeclaration content_declaration_field;
    function void SetContentDeclaration(ContentDeclaration input_value) { content_declaration_field = input_value; }
    function ContentDeclaration GetContentDeclaration() { return content_declaration_field; }
    ContentDefinition content_definition_field;
    function void SetContentDefinition(ContentDefinition input_value) { content_definition_field = input_value; }
    function ContentDefinition GetContentDefinition() { return content_definition_field; }
    PrimativeType primative_type_field;
    function void SetPrimativeType(PrimativeType input_value) { primative_type_field = input_value; }
    function PrimativeType GetPrimativeType() { return primative_type_field; }
    DefinedType defined_type_field;
    function void SetDefinedType(DefinedType input_value) { defined_type_field = input_value; }
    function DefinedType GetDefinedType() { return defined_type_field; }
    SingletonType singleton_type_field;
    function void SetSingletonType(SingletonType input_value) { singleton_type_field = input_value; }
    function SingletonType GetSingletonType() { return singleton_type_field; }
    DimensionalNote dimensional_note_field;
    function void SetDimensionalNote(DimensionalNote input_value) { dimensional_note_field = input_value; }
    function DimensionalNote GetDimensionalNote() { return dimensional_note_field; }
    DimensionalType dimensional_type_field;
    function void SetDimensionalType(DimensionalType input_value) { dimensional_type_field = input_value; }
    function DimensionalType GetDimensionalType() { return dimensional_type_field; }
    MapNote map_note_field;
    function void SetMapNote(MapNote input_value) { map_note_field = input_value; }
    function MapNote GetMapNote() { return map_note_field; }
    MapType map_type_field;
    function void SetMapType(MapType input_value) { map_type_field = input_value; }
    function MapType GetMapType() { return map_type_field; }
    ValueType value_type_field;
    function void SetValueType(ValueType input_value) { value_type_field = input_value; }
    function ValueType GetValueType() { return value_type_field; }
    ParameterListDef parameter_list_def_field;
    function void SetParameterListDef(ParameterListDef input_value) { parameter_list_def_field = input_value; }
    function ParameterListDef GetParameterListDef() { return parameter_list_def_field; }
    ParameterList parameter_list_field;
    function void SetParameterList(ParameterList input_value) { parameter_list_field = input_value; }
    function ParameterList GetParameterList() { return parameter_list_field; }
    CodeBlock code_block_field;
    function void SetCodeBlock(CodeBlock input_value) { code_block_field = input_value; }
    function CodeBlock GetCodeBlock() { return code_block_field; }
    DeclarationAssign declaration_assign_field;
    function void SetDeclarationAssign(DeclarationAssign input_value) { declaration_assign_field = input_value; }
    function DeclarationAssign GetDeclarationAssign() { return declaration_assign_field; }
    Declaration declaration_field;
    function void SetDeclaration(Declaration input_value) { declaration_field = input_value; }
    function Declaration GetDeclaration() { return declaration_field; }
    Assignment assignment_field;
    function void SetAssignment(Assignment input_value) { assignment_field = input_value; }
    function Assignment GetAssignment() { return assignment_field; }
    Return return_field;
    function void SetReturn(Return input_value) { return_field = input_value; }
    function Return GetReturn() { return return_field; }
    ElseTail else_tail_field;
    function void SetElseTail(ElseTail input_value) { else_tail_field = input_value; }
    function ElseTail GetElseTail() { return else_tail_field; }
    Conditional conditional_field;
    function void SetConditional(Conditional input_value) { conditional_field = input_value; }
    function Conditional GetConditional() { return conditional_field; }
    Loop loop_field;
    function void SetLoop(Loop input_value) { loop_field = input_value; }
    function Loop GetLoop() { return loop_field; }
    Call call_field;
    function void SetCall(Call input_value) { call_field = input_value; }
    function Call GetCall() { return call_field; }
    Allocate allocate_field;
    function void SetAllocate(Allocate input_value) { allocate_field = input_value; }
    function Allocate GetAllocate() { return allocate_field; }
    Instruction instruction_field;
    function void SetInstruction(Instruction input_value) { instruction_field = input_value; }
    function Instruction GetInstruction() { return instruction_field; }
    RValueSingle r_value_single_field;
    function void SetRValueSingle(RValueSingle input_value) { r_value_single_field = input_value; }
    function RValueSingle GetRValueSingle() { return r_value_single_field; }
    RValueTail r_value_tail_field;
    function void SetRValueTail(RValueTail input_value) { r_value_tail_field = input_value; }
    function RValueTail GetRValueTail() { return r_value_tail_field; }
    RValue r_value_field;
    function void SetRValue(RValue input_value) { r_value_field = input_value; }
    function RValue GetRValue() { return r_value_field; }
    BinaryOperator binary_operator_field;
    function void SetBinaryOperator(BinaryOperator input_value) { binary_operator_field = input_value; }
    function BinaryOperator GetBinaryOperator() { return binary_operator_field; }
    UnaryOperator unary_operator_field;
    function void SetUnaryOperator(UnaryOperator input_value) { unary_operator_field = input_value; }
    function UnaryOperator GetUnaryOperator() { return unary_operator_field; }
    Comment comment_field;
    function void SetComment(Comment input_value) { comment_field = input_value; }
    function Comment GetComment() { return comment_field; }
    CommentCharacter comment_character_field;
    function void SetCommentCharacter(CommentCharacter input_value) { comment_character_field = input_value; }
    function CommentCharacter GetCommentCharacter() { return comment_character_field; }
    QualfiedName qualfied_name_field;
    function void SetQualfiedName(QualfiedName input_value) { qualfied_name_field = input_value; }
    function QualfiedName GetQualfiedName() { return qualfied_name_field; }
    NameTail name_tail_field;
    function void SetNameTail(NameTail input_value) { name_tail_field = input_value; }
    function NameTail GetNameTail() { return name_tail_field; }
    Name name_field;
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }
    NameCharacter name_character_field;
    function void SetNameCharacter(NameCharacter input_value) { name_character_field = input_value; }
    function NameCharacter GetNameCharacter() { return name_character_field; }
    Boolean boolean_field;
    function void SetBoolean(Boolean input_value) { boolean_field = input_value; }
    function Boolean GetBoolean() { return boolean_field; }
    Byte byte_field;
    function void SetByte(Byte input_value) { byte_field = input_value; }
    function Byte GetByte() { return byte_field; }
    ByteDigit byte_digit_field;
    function void SetByteDigit(ByteDigit input_value) { byte_digit_field = input_value; }
    function ByteDigit GetByteDigit() { return byte_digit_field; }
    Negative negative_field;
    function void SetNegative(Negative input_value) { negative_field = input_value; }
    function Negative GetNegative() { return negative_field; }
    Decimal decimal_field;
    function void SetDecimal(Decimal input_value) { decimal_field = input_value; }
    function Decimal GetDecimal() { return decimal_field; }
    Number number_field;
    function void SetNumber(Number input_value) { number_field = input_value; }
    function Number GetNumber() { return number_field; }
    Digit digit_field;
    function void SetDigit(Digit input_value) { digit_field = input_value; }
    function Digit GetDigit() { return digit_field; }
    Literal literal_field;
    function void SetLiteral(Literal input_value) { literal_field = input_value; }
    function Literal GetLiteral() { return literal_field; }
    LiteralCharacter literal_character_field;
    function void SetLiteralCharacter(LiteralCharacter input_value) { literal_character_field = input_value; }
    function LiteralCharacter GetLiteralCharacter() { return literal_character_field; }
    Whitespace whitespace_field;
    function void SetWhitespace(Whitespace input_value) { whitespace_field = input_value; }
    function Whitespace GetWhitespace() { return whitespace_field; }
}

class DBNFOmniTypeResult
{
    function void SetValue(DBNFOmniType new_value) { value = new_value; }
    function DBNFOmniType GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }
    function void SetCTCodeFile(CTCodeFile input_value)
    {
        value = new DBNFOmniType;
        value.SetCTCodeFile(input_value);
    }
    function void SetExternalDefinition(ExternalDefinition input_value)
    {
        value = new DBNFOmniType;
        value.SetExternalDefinition(input_value);
    }
    function void SetUnmanagedType(UnmanagedType input_value)
    {
        value = new DBNFOmniType;
        value.SetUnmanagedType(input_value);
    }
    function void SetDefinition(Definition input_value)
    {
        value = new DBNFOmniType;
        value.SetDefinition(input_value);
    }
    function void SetInterfaceDef(InterfaceDef input_value)
    {
        value = new DBNFOmniType;
        value.SetInterfaceDef(input_value);
    }
    function void SetClassDef(ClassDef input_value)
    {
        value = new DBNFOmniType;
        value.SetClassDef(input_value);
    }
    function void SetImplementationSpec(ImplementationSpec input_value)
    {
        value = new DBNFOmniType;
        value.SetImplementationSpec(input_value);
    }
    function void SetContentDeclaration(ContentDeclaration input_value)
    {
        value = new DBNFOmniType;
        value.SetContentDeclaration(input_value);
    }
    function void SetContentDefinition(ContentDefinition input_value)
    {
        value = new DBNFOmniType;
        value.SetContentDefinition(input_value);
    }
    function void SetPrimativeType(PrimativeType input_value)
    {
        value = new DBNFOmniType;
        value.SetPrimativeType(input_value);
    }
    function void SetDefinedType(DefinedType input_value)
    {
        value = new DBNFOmniType;
        value.SetDefinedType(input_value);
    }
    function void SetSingletonType(SingletonType input_value)
    {
        value = new DBNFOmniType;
        value.SetSingletonType(input_value);
    }
    function void SetDimensionalNote(DimensionalNote input_value)
    {
        value = new DBNFOmniType;
        value.SetDimensionalNote(input_value);
    }
    function void SetDimensionalType(DimensionalType input_value)
    {
        value = new DBNFOmniType;
        value.SetDimensionalType(input_value);
    }
    function void SetMapNote(MapNote input_value)
    {
        value = new DBNFOmniType;
        value.SetMapNote(input_value);
    }
    function void SetMapType(MapType input_value)
    {
        value = new DBNFOmniType;
        value.SetMapType(input_value);
    }
    function void SetValueType(ValueType input_value)
    {
        value = new DBNFOmniType;
        value.SetValueType(input_value);
    }
    function void SetParameterListDef(ParameterListDef input_value)
    {
        value = new DBNFOmniType;
        value.SetParameterListDef(input_value);
    }
    function void SetParameterList(ParameterList input_value)
    {
        value = new DBNFOmniType;
        value.SetParameterList(input_value);
    }
    function void SetCodeBlock(CodeBlock input_value)
    {
        value = new DBNFOmniType;
        value.SetCodeBlock(input_value);
    }
    function void SetDeclarationAssign(DeclarationAssign input_value)
    {
        value = new DBNFOmniType;
        value.SetDeclarationAssign(input_value);
    }
    function void SetDeclaration(Declaration input_value)
    {
        value = new DBNFOmniType;
        value.SetDeclaration(input_value);
    }
    function void SetAssignment(Assignment input_value)
    {
        value = new DBNFOmniType;
        value.SetAssignment(input_value);
    }
    function void SetReturn(Return input_value)
    {
        value = new DBNFOmniType;
        value.SetReturn(input_value);
    }
    function void SetElseTail(ElseTail input_value)
    {
        value = new DBNFOmniType;
        value.SetElseTail(input_value);
    }
    function void SetConditional(Conditional input_value)
    {
        value = new DBNFOmniType;
        value.SetConditional(input_value);
    }
    function void SetLoop(Loop input_value)
    {
        value = new DBNFOmniType;
        value.SetLoop(input_value);
    }
    function void SetCall(Call input_value)
    {
        value = new DBNFOmniType;
        value.SetCall(input_value);
    }
    function void SetAllocate(Allocate input_value)
    {
        value = new DBNFOmniType;
        value.SetAllocate(input_value);
    }
    function void SetInstruction(Instruction input_value)
    {
        value = new DBNFOmniType;
        value.SetInstruction(input_value);
    }
    function void SetRValueSingle(RValueSingle input_value)
    {
        value = new DBNFOmniType;
        value.SetRValueSingle(input_value);
    }
    function void SetRValueTail(RValueTail input_value)
    {
        value = new DBNFOmniType;
        value.SetRValueTail(input_value);
    }
    function void SetRValue(RValue input_value)
    {
        value = new DBNFOmniType;
        value.SetRValue(input_value);
    }
    function void SetBinaryOperator(BinaryOperator input_value)
    {
        value = new DBNFOmniType;
        value.SetBinaryOperator(input_value);
    }
    function void SetUnaryOperator(UnaryOperator input_value)
    {
        value = new DBNFOmniType;
        value.SetUnaryOperator(input_value);
    }
    function void SetComment(Comment input_value)
    {
        value = new DBNFOmniType;
        value.SetComment(input_value);
    }
    function void SetCommentCharacter(CommentCharacter input_value)
    {
        value = new DBNFOmniType;
        value.SetCommentCharacter(input_value);
    }
    function void SetQualfiedName(QualfiedName input_value)
    {
        value = new DBNFOmniType;
        value.SetQualfiedName(input_value);
    }
    function void SetNameTail(NameTail input_value)
    {
        value = new DBNFOmniType;
        value.SetNameTail(input_value);
    }
    function void SetName(Name input_value)
    {
        value = new DBNFOmniType;
        value.SetName(input_value);
    }
    function void SetNameCharacter(NameCharacter input_value)
    {
        value = new DBNFOmniType;
        value.SetNameCharacter(input_value);
    }
    function void SetBoolean(Boolean input_value)
    {
        value = new DBNFOmniType;
        value.SetBoolean(input_value);
    }
    function void SetByte(Byte input_value)
    {
        value = new DBNFOmniType;
        value.SetByte(input_value);
    }
    function void SetByteDigit(ByteDigit input_value)
    {
        value = new DBNFOmniType;
        value.SetByteDigit(input_value);
    }
    function void SetNegative(Negative input_value)
    {
        value = new DBNFOmniType;
        value.SetNegative(input_value);
    }
    function void SetDecimal(Decimal input_value)
    {
        value = new DBNFOmniType;
        value.SetDecimal(input_value);
    }
    function void SetNumber(Number input_value)
    {
        value = new DBNFOmniType;
        value.SetNumber(input_value);
    }
    function void SetDigit(Digit input_value)
    {
        value = new DBNFOmniType;
        value.SetDigit(input_value);
    }
    function void SetLiteral(Literal input_value)
    {
        value = new DBNFOmniType;
        value.SetLiteral(input_value);
    }
    function void SetLiteralCharacter(LiteralCharacter input_value)
    {
        value = new DBNFOmniType;
        value.SetLiteralCharacter(input_value);
    }
    function void SetWhitespace(Whitespace input_value)
    {
        value = new DBNFOmniType;
        value.SetWhitespace(input_value);
    }

    DBNFOmniType value;
    bool result;
}

class DBNFOmniTypeListResult
{
    function void SetValue(DBNFOmniType[] new_value) { value = new_value; }
    function DBNFOmniType[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }
    function void SetCTCodeFile(CTCodeFile[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetCTCodeFile(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetExternalDefinition(ExternalDefinition[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetExternalDefinition(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetUnmanagedType(UnmanagedType[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetUnmanagedType(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetDefinition(Definition[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetDefinition(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetInterfaceDef(InterfaceDef[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetInterfaceDef(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetClassDef(ClassDef[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetClassDef(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetImplementationSpec(ImplementationSpec[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetImplementationSpec(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetContentDeclaration(ContentDeclaration[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetContentDeclaration(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetContentDefinition(ContentDefinition[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetContentDefinition(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetPrimativeType(PrimativeType[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetPrimativeType(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetDefinedType(DefinedType[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetDefinedType(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetSingletonType(SingletonType[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetSingletonType(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetDimensionalNote(DimensionalNote[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetDimensionalNote(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetDimensionalType(DimensionalType[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetDimensionalType(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetMapNote(MapNote[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetMapNote(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetMapType(MapType[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetMapType(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetValueType(ValueType[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetValueType(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetParameterListDef(ParameterListDef[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetParameterListDef(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetParameterList(ParameterList[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetParameterList(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetCodeBlock(CodeBlock[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetCodeBlock(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetDeclarationAssign(DeclarationAssign[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetDeclarationAssign(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetDeclaration(Declaration[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetDeclaration(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetAssignment(Assignment[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetAssignment(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetReturn(Return[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetReturn(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetElseTail(ElseTail[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetElseTail(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetConditional(Conditional[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetConditional(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetLoop(Loop[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetLoop(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetCall(Call[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetCall(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetAllocate(Allocate[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetAllocate(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetInstruction(Instruction[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetInstruction(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetRValueSingle(RValueSingle[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetRValueSingle(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetRValueTail(RValueTail[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetRValueTail(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetRValue(RValue[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetRValue(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetBinaryOperator(BinaryOperator[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetBinaryOperator(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetUnaryOperator(UnaryOperator[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetUnaryOperator(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetComment(Comment[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetComment(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetCommentCharacter(CommentCharacter[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetCommentCharacter(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetQualfiedName(QualfiedName[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetQualfiedName(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetNameTail(NameTail[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetNameTail(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetName(Name[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetName(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetNameCharacter(NameCharacter[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetNameCharacter(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetBoolean(Boolean[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetBoolean(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetByte(Byte[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetByte(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetByteDigit(ByteDigit[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetByteDigit(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetNegative(Negative[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetNegative(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetDecimal(Decimal[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetDecimal(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetNumber(Number[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetNumber(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetDigit(Digit[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetDigit(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetLiteral(Literal[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetLiteral(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetLiteralCharacter(LiteralCharacter[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetLiteralCharacter(Element(input_value, index));
            index = index + 1;
        }
    }

    function void SetWhitespace(Whitespace[] input_value)
    {
        int index = 0;
        while (index < Size(input_value))
        {
            DBNFOmniType value = new DBNFOmniType;
            value.SetWhitespace(Element(input_value, index));
            index = index + 1;
        }
    }

    DBNFOmniType[] value;
    bool result;
}

class LargeString
{
    function void SetData(string new_data) { data = new_data; }
    function string GetData() { return data; }
    function int GetIntAt(int offset) { return IntAt(data, offset); }
    function string GetAt(int offset) { return At(data, offset); }

    string data;
}

class LengthString
{
    function void SetData(LargeString new_data) { data = new_data; }
    function LargeString GetData() { return data; }
    function void SetStart(int new_start) { start = new_start; }
    function int GetStart() { return start; }
    function void SetLength(int new_length) { length = new_length; }
    function int GetLength() { return length; }
    function string GetString()
    {
        string deep_data = data.GetData();
        string result;
        int index = start;
        int end = start + length;

        while (index < end)
        {
            result = Concat(result, At(deep_data, index));
            index = index + 1;
        }

        return result;
    }

    LargeString data;
    int start;
    int length;
}

class CTCodeFileParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, CTCodeFileResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        CTCodeFile instance = new CTCodeFile;
        DefinitionListResult definitions_field = new DefinitionListResult;
        UnmanagedTypeListResult unmanaged_types_field = new UnmanagedTypeListResult;
        ExternalDefinitionListResult declarations_field = new ExternalDefinitionListResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && external_definition_parser_instance.ParseManySave(index, declarations_field, 0, -1) && unmanaged_type_parser_instance.ParseManySave(index, unmanaged_types_field, 0, -1) && definition_parser_instance.ParseManySave(index, definitions_field, 0, -1)) {
            instance.SetDefinitions(definitions_field.GetValue());
            instance.SetUnmanagedTypes(unmanaged_types_field.GetValue());
            instance.SetDeclarations(declarations_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            definitions_field = new DefinitionListResult;
            unmanaged_types_field = new UnmanagedTypeListResult;
            declarations_field = new ExternalDefinitionListResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        CTCodeFileResult result = new CTCodeFileResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, CTCodeFileResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        CTCodeFileResult result = new CTCodeFileResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, CTCodeFileListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        CTCodeFile[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            CTCodeFileResult result = new CTCodeFileResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        CTCodeFileListResult result = new CTCodeFileListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class CTCodeFileResult
{
    function void SetValue(CTCodeFile new_value) { value = new_value; }
    function CTCodeFile GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CTCodeFile value;
    bool result;
}

class CTCodeFileListResult
{
    function void SetValue(CTCodeFile[] new_value) { value = new_value; }
    function CTCodeFile[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CTCodeFile[] value;
    bool result;
}

class CTCodeFile
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetDefinitions(Definition[] input_value) { definitions_field = input_value; }
    function Definition[] GetDefinitions() { return definitions_field; }
    function void SetUnmanagedTypes(UnmanagedType[] input_value) { unmanaged_types_field = input_value; }
    function UnmanagedType[] GetUnmanagedTypes() { return unmanaged_types_field; }
    function void SetDeclarations(ExternalDefinition[] input_value) { declarations_field = input_value; }
    function ExternalDefinition[] GetDeclarations() { return declarations_field; }

    LengthString length_string;
    Definition[] definitions_field;
    UnmanagedType[] unmanaged_types_field;
    ExternalDefinition[] declarations_field;
}

class ExternalDefinitionParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ExternalDefinitionResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        ExternalDefinition instance = new ExternalDefinition;
        QualfiedNameResult exdef_field = new QualfiedNameResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingle(index, "exdef") && whitespace_parser_instance.ParseMany(index, 0, -1) && qualfied_name_parser_instance.ParseSingleSave(index, exdef_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ";") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetExdef(exdef_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            exdef_field = new QualfiedNameResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ExternalDefinitionResult result = new ExternalDefinitionResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ExternalDefinitionResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ExternalDefinitionResult result = new ExternalDefinitionResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ExternalDefinitionListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        ExternalDefinition[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ExternalDefinitionResult result = new ExternalDefinitionResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ExternalDefinitionListResult result = new ExternalDefinitionListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ExternalDefinitionResult
{
    function void SetValue(ExternalDefinition new_value) { value = new_value; }
    function ExternalDefinition GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ExternalDefinition value;
    bool result;
}

class ExternalDefinitionListResult
{
    function void SetValue(ExternalDefinition[] new_value) { value = new_value; }
    function ExternalDefinition[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ExternalDefinition[] value;
    bool result;
}

class ExternalDefinition
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetExdef(QualfiedName input_value) { exdef_field = input_value; }
    function QualfiedName GetExdef() { return exdef_field; }

    LengthString length_string;
    QualfiedName exdef_field;
}

class UnmanagedTypeParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, UnmanagedTypeResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        UnmanagedType instance = new UnmanagedType;
        QualfiedNameResult unmanaged_type_field = new QualfiedNameResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingle(index, "unmanaged") && whitespace_parser_instance.ParseMany(index, 0, -1) && qualfied_name_parser_instance.ParseSingleSave(index, unmanaged_type_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ";") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetUnmanagedType(unmanaged_type_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            unmanaged_type_field = new QualfiedNameResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        UnmanagedTypeResult result = new UnmanagedTypeResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, UnmanagedTypeResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        UnmanagedTypeResult result = new UnmanagedTypeResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, UnmanagedTypeListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        UnmanagedType[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            UnmanagedTypeResult result = new UnmanagedTypeResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        UnmanagedTypeListResult result = new UnmanagedTypeListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class UnmanagedTypeResult
{
    function void SetValue(UnmanagedType new_value) { value = new_value; }
    function UnmanagedType GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    UnmanagedType value;
    bool result;
}

class UnmanagedTypeListResult
{
    function void SetValue(UnmanagedType[] new_value) { value = new_value; }
    function UnmanagedType[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    UnmanagedType[] value;
    bool result;
}

class UnmanagedType
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetUnmanagedType(QualfiedName input_value) { unmanaged_type_field = input_value; }
    function QualfiedName GetUnmanagedType() { return unmanaged_type_field; }

    LengthString length_string;
    QualfiedName unmanaged_type_field;
}

class DefinitionParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, DefinitionResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Definition instance = new Definition;
        ClassDefResult classDef_field = new ClassDefResult;
        InterfaceDefResult interfaceDef_field = new InterfaceDefResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && interface_def_parser_instance.ParseSingleSave(index, interfaceDef_field)) {
            instance.SetClassDef(classDef_field.GetValue());
            instance.SetInterfaceDef(interfaceDef_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            classDef_field = new ClassDefResult;
            interfaceDef_field = new InterfaceDefResult;
        }

        if (true && class_def_parser_instance.ParseSingleSave(index, classDef_field)) {
            instance.SetClassDef(classDef_field.GetValue());
            instance.SetInterfaceDef(interfaceDef_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            classDef_field = new ClassDefResult;
            interfaceDef_field = new InterfaceDefResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        DefinitionResult result = new DefinitionResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, DefinitionResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        DefinitionResult result = new DefinitionResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, DefinitionListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Definition[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            DefinitionResult result = new DefinitionResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        DefinitionListResult result = new DefinitionListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class DefinitionResult
{
    function void SetValue(Definition new_value) { value = new_value; }
    function Definition GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Definition value;
    bool result;
}

class DefinitionListResult
{
    function void SetValue(Definition[] new_value) { value = new_value; }
    function Definition[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Definition[] value;
    bool result;
}

class Definition
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetClassDef(ClassDef input_value) { classDef_field = input_value; }
    function ClassDef GetClassDef() { return classDef_field; }
    function void SetInterfaceDef(InterfaceDef input_value) { interfaceDef_field = input_value; }
    function InterfaceDef GetInterfaceDef() { return interfaceDef_field; }

    LengthString length_string;
    ClassDef classDef_field;
    InterfaceDef interfaceDef_field;
}

class InterfaceDefParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, InterfaceDefResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        InterfaceDef instance = new InterfaceDef;
        ContentDeclarationListResult declarations_field = new ContentDeclarationListResult;
        NameResult name_field = new NameResult;
        CommentResult comment_field = new CommentResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "interface") && whitespace_parser_instance.ParseMany(index, 1, -1) && name_parser_instance.ParseSingleSave(index, name_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "{") && whitespace_parser_instance.ParseMany(index, 0, -1) && content_declaration_parser_instance.ParseManySave(index, declarations_field, 0, -1) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "}") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetDeclarations(declarations_field.GetValue());
            instance.SetName(name_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            declarations_field = new ContentDeclarationListResult;
            name_field = new NameResult;
            comment_field = new CommentResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        InterfaceDefResult result = new InterfaceDefResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, InterfaceDefResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        InterfaceDefResult result = new InterfaceDefResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, InterfaceDefListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        InterfaceDef[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            InterfaceDefResult result = new InterfaceDefResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        InterfaceDefListResult result = new InterfaceDefListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class InterfaceDefResult
{
    function void SetValue(InterfaceDef new_value) { value = new_value; }
    function InterfaceDef GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    InterfaceDef value;
    bool result;
}

class InterfaceDefListResult
{
    function void SetValue(InterfaceDef[] new_value) { value = new_value; }
    function InterfaceDef[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    InterfaceDef[] value;
    bool result;
}

class InterfaceDef
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetDeclarations(ContentDeclaration[] input_value) { declarations_field = input_value; }
    function ContentDeclaration[] GetDeclarations() { return declarations_field; }
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }
    function void SetComment(Comment input_value) { comment_field = input_value; }
    function Comment GetComment() { return comment_field; }

    LengthString length_string;
    ContentDeclaration[] declarations_field;
    Name name_field;
    Comment comment_field;
}

class ClassDefParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ClassDefResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        ClassDef instance = new ClassDef;
        ImplementationSpecResult implementing_field = new ImplementationSpecResult;
        NameResult name_field = new NameResult;
        ContentDefinitionListResult definitions_field = new ContentDefinitionListResult;
        CommentResult comment_field = new CommentResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "class") && whitespace_parser_instance.ParseMany(index, 1, -1) && name_parser_instance.ParseSingleSave(index, name_field) && implementation_spec_parser_instance.ParseOptionalSave(index, implementing_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "{") && whitespace_parser_instance.ParseMany(index, 0, -1) && content_definition_parser_instance.ParseManySave(index, definitions_field, 0, -1) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "}") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetImplementing(implementing_field.GetValue());
            instance.SetName(name_field.GetValue());
            instance.SetDefinitions(definitions_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            implementing_field = new ImplementationSpecResult;
            name_field = new NameResult;
            definitions_field = new ContentDefinitionListResult;
            comment_field = new CommentResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ClassDefResult result = new ClassDefResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ClassDefResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ClassDefResult result = new ClassDefResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ClassDefListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        ClassDef[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ClassDefResult result = new ClassDefResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ClassDefListResult result = new ClassDefListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ClassDefResult
{
    function void SetValue(ClassDef new_value) { value = new_value; }
    function ClassDef GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ClassDef value;
    bool result;
}

class ClassDefListResult
{
    function void SetValue(ClassDef[] new_value) { value = new_value; }
    function ClassDef[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ClassDef[] value;
    bool result;
}

class ClassDef
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetImplementing(ImplementationSpec input_value) { implementing_field = input_value; }
    function ImplementationSpec GetImplementing() { return implementing_field; }
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }
    function void SetDefinitions(ContentDefinition[] input_value) { definitions_field = input_value; }
    function ContentDefinition[] GetDefinitions() { return definitions_field; }
    function void SetComment(Comment input_value) { comment_field = input_value; }
    function Comment GetComment() { return comment_field; }

    LengthString length_string;
    ImplementationSpec implementing_field;
    Name name_field;
    ContentDefinition[] definitions_field;
    Comment comment_field;
}

class ImplementationSpecParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ImplementationSpecResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        ImplementationSpec instance = new ImplementationSpec;
        QualfiedNameResult interface_field = new QualfiedNameResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 1, -1) && string_parser_instance.ParseSingle(index, "implements") && whitespace_parser_instance.ParseMany(index, 1, -1) && qualfied_name_parser_instance.ParseSingleSave(index, interface_field) && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetInterface(interface_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            interface_field = new QualfiedNameResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ImplementationSpecResult result = new ImplementationSpecResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ImplementationSpecResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ImplementationSpecResult result = new ImplementationSpecResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ImplementationSpecListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        ImplementationSpec[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ImplementationSpecResult result = new ImplementationSpecResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ImplementationSpecListResult result = new ImplementationSpecListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ImplementationSpecResult
{
    function void SetValue(ImplementationSpec new_value) { value = new_value; }
    function ImplementationSpec GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ImplementationSpec value;
    bool result;
}

class ImplementationSpecListResult
{
    function void SetValue(ImplementationSpec[] new_value) { value = new_value; }
    function ImplementationSpec[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ImplementationSpec[] value;
    bool result;
}

class ImplementationSpec
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetInterface(QualfiedName input_value) { interface_field = input_value; }
    function QualfiedName GetInterface() { return interface_field; }

    LengthString length_string;
    QualfiedName interface_field;
}

class ContentDeclarationParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ContentDeclarationResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        ContentDeclaration instance = new ContentDeclaration;
        ParameterListDefResult parameters_field = new ParameterListDefResult;
        NameResult name_field = new NameResult;
        ValueTypeResult type_field = new ValueTypeResult;
        CommentResult comment_field = new CommentResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "function") && whitespace_parser_instance.ParseMany(index, 1, -1) && value_type_parser_instance.ParseSingleSave(index, type_field) && whitespace_parser_instance.ParseMany(index, 1, -1) && name_parser_instance.ParseSingleSave(index, name_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "(") && whitespace_parser_instance.ParseMany(index, 0, -1) && parameter_list_def_parser_instance.ParseOptionalSave(index, parameters_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ")") && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ";") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetParameters(parameters_field.GetValue());
            instance.SetName(name_field.GetValue());
            instance.SetType(type_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            parameters_field = new ParameterListDefResult;
            name_field = new NameResult;
            type_field = new ValueTypeResult;
            comment_field = new CommentResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ContentDeclarationResult result = new ContentDeclarationResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ContentDeclarationResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ContentDeclarationResult result = new ContentDeclarationResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ContentDeclarationListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        ContentDeclaration[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ContentDeclarationResult result = new ContentDeclarationResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ContentDeclarationListResult result = new ContentDeclarationListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ContentDeclarationResult
{
    function void SetValue(ContentDeclaration new_value) { value = new_value; }
    function ContentDeclaration GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ContentDeclaration value;
    bool result;
}

class ContentDeclarationListResult
{
    function void SetValue(ContentDeclaration[] new_value) { value = new_value; }
    function ContentDeclaration[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ContentDeclaration[] value;
    bool result;
}

class ContentDeclaration
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetParameters(ParameterListDef input_value) { parameters_field = input_value; }
    function ParameterListDef GetParameters() { return parameters_field; }
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }
    function void SetType(ValueType input_value) { type_field = input_value; }
    function ValueType GetType() { return type_field; }
    function void SetComment(Comment input_value) { comment_field = input_value; }
    function Comment GetComment() { return comment_field; }

    LengthString length_string;
    ParameterListDef parameters_field;
    Name name_field;
    ValueType type_field;
    Comment comment_field;
}

class ContentDefinitionParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ContentDefinitionResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        ContentDefinition instance = new ContentDefinition;
        CodeBlockResult functionBody_field = new CodeBlockResult;
        ParameterListDefResult parameters_field = new ParameterListDefResult;
        NameResult name_field = new NameResult;
        ValueTypeResult type_field = new ValueTypeResult;
        CommentResult comment_field = new CommentResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "function") && whitespace_parser_instance.ParseMany(index, 1, -1) && value_type_parser_instance.ParseSingleSave(index, type_field) && whitespace_parser_instance.ParseMany(index, 1, -1) && name_parser_instance.ParseSingleSave(index, name_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "(") && whitespace_parser_instance.ParseMany(index, 0, -1) && parameter_list_def_parser_instance.ParseOptionalSave(index, parameters_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ")") && whitespace_parser_instance.ParseMany(index, 0, -1) && code_block_parser_instance.ParseSingleSave(index, functionBody_field) && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetFunctionBody(functionBody_field.GetValue());
            instance.SetParameters(parameters_field.GetValue());
            instance.SetName(name_field.GetValue());
            instance.SetType(type_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            functionBody_field = new CodeBlockResult;
            parameters_field = new ParameterListDefResult;
            name_field = new NameResult;
            type_field = new ValueTypeResult;
            comment_field = new CommentResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && value_type_parser_instance.ParseSingleSave(index, type_field) && whitespace_parser_instance.ParseMany(index, 1, -1) && name_parser_instance.ParseSingleSave(index, name_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ";") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetFunctionBody(functionBody_field.GetValue());
            instance.SetParameters(parameters_field.GetValue());
            instance.SetName(name_field.GetValue());
            instance.SetType(type_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            functionBody_field = new CodeBlockResult;
            parameters_field = new ParameterListDefResult;
            name_field = new NameResult;
            type_field = new ValueTypeResult;
            comment_field = new CommentResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ContentDefinitionResult result = new ContentDefinitionResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ContentDefinitionResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ContentDefinitionResult result = new ContentDefinitionResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ContentDefinitionListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        ContentDefinition[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ContentDefinitionResult result = new ContentDefinitionResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ContentDefinitionListResult result = new ContentDefinitionListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ContentDefinitionResult
{
    function void SetValue(ContentDefinition new_value) { value = new_value; }
    function ContentDefinition GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ContentDefinition value;
    bool result;
}

class ContentDefinitionListResult
{
    function void SetValue(ContentDefinition[] new_value) { value = new_value; }
    function ContentDefinition[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ContentDefinition[] value;
    bool result;
}

class ContentDefinition
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetFunctionBody(CodeBlock input_value) { functionBody_field = input_value; }
    function CodeBlock GetFunctionBody() { return functionBody_field; }
    function void SetParameters(ParameterListDef input_value) { parameters_field = input_value; }
    function ParameterListDef GetParameters() { return parameters_field; }
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }
    function void SetType(ValueType input_value) { type_field = input_value; }
    function ValueType GetType() { return type_field; }
    function void SetComment(Comment input_value) { comment_field = input_value; }
    function Comment GetComment() { return comment_field; }

    LengthString length_string;
    CodeBlock functionBody_field;
    ParameterListDef parameters_field;
    Name name_field;
    ValueType type_field;
    Comment comment_field;
}

class PrimativeTypeParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, PrimativeTypeResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        PrimativeType instance = new PrimativeType;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingle(index, "int")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "string")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "bool")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "float")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "void")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        PrimativeTypeResult result = new PrimativeTypeResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, PrimativeTypeResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        PrimativeTypeResult result = new PrimativeTypeResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, PrimativeTypeListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        PrimativeType[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            PrimativeTypeResult result = new PrimativeTypeResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        PrimativeTypeListResult result = new PrimativeTypeListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class PrimativeTypeResult
{
    function void SetValue(PrimativeType new_value) { value = new_value; }
    function PrimativeType GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    PrimativeType value;
    bool result;
}

class PrimativeTypeListResult
{
    function void SetValue(PrimativeType[] new_value) { value = new_value; }
    function PrimativeType[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    PrimativeType[] value;
    bool result;
}

class PrimativeType
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class DefinedTypeParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, DefinedTypeResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        DefinedType instance = new DefinedType;
        QualfiedNameResult name_field = new QualfiedNameResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && qualfied_name_parser_instance.ParseSingleSave(index, name_field)) {
            instance.SetName(name_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            name_field = new QualfiedNameResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        DefinedTypeResult result = new DefinedTypeResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, DefinedTypeResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        DefinedTypeResult result = new DefinedTypeResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, DefinedTypeListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        DefinedType[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            DefinedTypeResult result = new DefinedTypeResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        DefinedTypeListResult result = new DefinedTypeListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class DefinedTypeResult
{
    function void SetValue(DefinedType new_value) { value = new_value; }
    function DefinedType GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    DefinedType value;
    bool result;
}

class DefinedTypeListResult
{
    function void SetValue(DefinedType[] new_value) { value = new_value; }
    function DefinedType[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    DefinedType[] value;
    bool result;
}

class DefinedType
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetName(QualfiedName input_value) { name_field = input_value; }
    function QualfiedName GetName() { return name_field; }

    LengthString length_string;
    QualfiedName name_field;
}

class SingletonTypeParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, SingletonTypeResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        SingletonType instance = new SingletonType;
        DefinedTypeResult definedType_field = new DefinedTypeResult;
        PrimativeTypeResult primativeType_field = new PrimativeTypeResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && primative_type_parser_instance.ParseSingleSave(index, primativeType_field)) {
            instance.SetDefinedType(definedType_field.GetValue());
            instance.SetPrimativeType(primativeType_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            definedType_field = new DefinedTypeResult;
            primativeType_field = new PrimativeTypeResult;
        }

        if (true && defined_type_parser_instance.ParseSingleSave(index, definedType_field)) {
            instance.SetDefinedType(definedType_field.GetValue());
            instance.SetPrimativeType(primativeType_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            definedType_field = new DefinedTypeResult;
            primativeType_field = new PrimativeTypeResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        SingletonTypeResult result = new SingletonTypeResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, SingletonTypeResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        SingletonTypeResult result = new SingletonTypeResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, SingletonTypeListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        SingletonType[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            SingletonTypeResult result = new SingletonTypeResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        SingletonTypeListResult result = new SingletonTypeListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class SingletonTypeResult
{
    function void SetValue(SingletonType new_value) { value = new_value; }
    function SingletonType GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    SingletonType value;
    bool result;
}

class SingletonTypeListResult
{
    function void SetValue(SingletonType[] new_value) { value = new_value; }
    function SingletonType[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    SingletonType[] value;
    bool result;
}

class SingletonType
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetDefinedType(DefinedType input_value) { definedType_field = input_value; }
    function DefinedType GetDefinedType() { return definedType_field; }
    function void SetPrimativeType(PrimativeType input_value) { primativeType_field = input_value; }
    function PrimativeType GetPrimativeType() { return primativeType_field; }

    LengthString length_string;
    DefinedType definedType_field;
    PrimativeType primativeType_field;
}

class DimensionalNoteParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, DimensionalNoteResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        DimensionalNote instance = new DimensionalNote;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "[") && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "]")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        DimensionalNoteResult result = new DimensionalNoteResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, DimensionalNoteResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        DimensionalNoteResult result = new DimensionalNoteResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, DimensionalNoteListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        DimensionalNote[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            DimensionalNoteResult result = new DimensionalNoteResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        DimensionalNoteListResult result = new DimensionalNoteListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class DimensionalNoteResult
{
    function void SetValue(DimensionalNote new_value) { value = new_value; }
    function DimensionalNote GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    DimensionalNote value;
    bool result;
}

class DimensionalNoteListResult
{
    function void SetValue(DimensionalNote[] new_value) { value = new_value; }
    function DimensionalNote[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    DimensionalNote[] value;
    bool result;
}

class DimensionalNote
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class DimensionalTypeParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, DimensionalTypeResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        DimensionalType instance = new DimensionalType;
        DimensionalNoteListResult dimensionalNote_field = new DimensionalNoteListResult;
        SingletonTypeResult singletonType_field = new SingletonTypeResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && singleton_type_parser_instance.ParseSingleSave(index, singletonType_field) && dimensional_note_parser_instance.ParseManySave(index, dimensionalNote_field, 1, -1)) {
            instance.SetDimensionalNote(dimensionalNote_field.GetValue());
            instance.SetSingletonType(singletonType_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            dimensionalNote_field = new DimensionalNoteListResult;
            singletonType_field = new SingletonTypeResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        DimensionalTypeResult result = new DimensionalTypeResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, DimensionalTypeResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        DimensionalTypeResult result = new DimensionalTypeResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, DimensionalTypeListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        DimensionalType[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            DimensionalTypeResult result = new DimensionalTypeResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        DimensionalTypeListResult result = new DimensionalTypeListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class DimensionalTypeResult
{
    function void SetValue(DimensionalType new_value) { value = new_value; }
    function DimensionalType GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    DimensionalType value;
    bool result;
}

class DimensionalTypeListResult
{
    function void SetValue(DimensionalType[] new_value) { value = new_value; }
    function DimensionalType[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    DimensionalType[] value;
    bool result;
}

class DimensionalType
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetDimensionalNote(DimensionalNote[] input_value) { dimensionalNote_field = input_value; }
    function DimensionalNote[] GetDimensionalNote() { return dimensionalNote_field; }
    function void SetSingletonType(SingletonType input_value) { singletonType_field = input_value; }
    function SingletonType GetSingletonType() { return singletonType_field; }

    LengthString length_string;
    DimensionalNote[] dimensionalNote_field;
    SingletonType singletonType_field;
}

class MapNoteParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, MapNoteResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        MapNote instance = new MapNote;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "{") && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "}")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        MapNoteResult result = new MapNoteResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, MapNoteResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        MapNoteResult result = new MapNoteResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, MapNoteListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        MapNote[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            MapNoteResult result = new MapNoteResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        MapNoteListResult result = new MapNoteListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class MapNoteResult
{
    function void SetValue(MapNote new_value) { value = new_value; }
    function MapNote GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    MapNote value;
    bool result;
}

class MapNoteListResult
{
    function void SetValue(MapNote[] new_value) { value = new_value; }
    function MapNote[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    MapNote[] value;
    bool result;
}

class MapNote
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class MapTypeParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, MapTypeResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        MapType instance = new MapType;
        MapNoteResult mapNote_field = new MapNoteResult;
        SingletonTypeResult singletonType_field = new SingletonTypeResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && singleton_type_parser_instance.ParseSingleSave(index, singletonType_field) && map_note_parser_instance.ParseSingleSave(index, mapNote_field)) {
            instance.SetMapNote(mapNote_field.GetValue());
            instance.SetSingletonType(singletonType_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            mapNote_field = new MapNoteResult;
            singletonType_field = new SingletonTypeResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        MapTypeResult result = new MapTypeResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, MapTypeResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        MapTypeResult result = new MapTypeResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, MapTypeListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        MapType[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            MapTypeResult result = new MapTypeResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        MapTypeListResult result = new MapTypeListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class MapTypeResult
{
    function void SetValue(MapType new_value) { value = new_value; }
    function MapType GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    MapType value;
    bool result;
}

class MapTypeListResult
{
    function void SetValue(MapType[] new_value) { value = new_value; }
    function MapType[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    MapType[] value;
    bool result;
}

class MapType
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetMapNote(MapNote input_value) { mapNote_field = input_value; }
    function MapNote GetMapNote() { return mapNote_field; }
    function void SetSingletonType(SingletonType input_value) { singletonType_field = input_value; }
    function SingletonType GetSingletonType() { return singletonType_field; }

    LengthString length_string;
    MapNote mapNote_field;
    SingletonType singletonType_field;
}

class ValueTypeParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ValueTypeResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        ValueType instance = new ValueType;
        SingletonTypeResult singletonType_field = new SingletonTypeResult;
        MapTypeResult mapType_field = new MapTypeResult;
        DimensionalTypeResult dimensionalType_field = new DimensionalTypeResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && dimensional_type_parser_instance.ParseSingleSave(index, dimensionalType_field)) {
            instance.SetSingletonType(singletonType_field.GetValue());
            instance.SetMapType(mapType_field.GetValue());
            instance.SetDimensionalType(dimensionalType_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            singletonType_field = new SingletonTypeResult;
            mapType_field = new MapTypeResult;
            dimensionalType_field = new DimensionalTypeResult;
        }

        if (true && map_type_parser_instance.ParseSingleSave(index, mapType_field)) {
            instance.SetSingletonType(singletonType_field.GetValue());
            instance.SetMapType(mapType_field.GetValue());
            instance.SetDimensionalType(dimensionalType_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            singletonType_field = new SingletonTypeResult;
            mapType_field = new MapTypeResult;
            dimensionalType_field = new DimensionalTypeResult;
        }

        if (true && singleton_type_parser_instance.ParseSingleSave(index, singletonType_field)) {
            instance.SetSingletonType(singletonType_field.GetValue());
            instance.SetMapType(mapType_field.GetValue());
            instance.SetDimensionalType(dimensionalType_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            singletonType_field = new SingletonTypeResult;
            mapType_field = new MapTypeResult;
            dimensionalType_field = new DimensionalTypeResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ValueTypeResult result = new ValueTypeResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ValueTypeResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ValueTypeResult result = new ValueTypeResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ValueTypeListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        ValueType[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ValueTypeResult result = new ValueTypeResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ValueTypeListResult result = new ValueTypeListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ValueTypeResult
{
    function void SetValue(ValueType new_value) { value = new_value; }
    function ValueType GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ValueType value;
    bool result;
}

class ValueTypeListResult
{
    function void SetValue(ValueType[] new_value) { value = new_value; }
    function ValueType[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ValueType[] value;
    bool result;
}

class ValueType
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetSingletonType(SingletonType input_value) { singletonType_field = input_value; }
    function SingletonType GetSingletonType() { return singletonType_field; }
    function void SetMapType(MapType input_value) { mapType_field = input_value; }
    function MapType GetMapType() { return mapType_field; }
    function void SetDimensionalType(DimensionalType input_value) { dimensionalType_field = input_value; }
    function DimensionalType GetDimensionalType() { return dimensionalType_field; }

    LengthString length_string;
    SingletonType singletonType_field;
    MapType mapType_field;
    DimensionalType dimensionalType_field;
}

class ParameterListDefParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ParameterListDefResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        ParameterListDef instance = new ParameterListDef;
        ParameterListDefResult parameterTail_field = new ParameterListDefResult;
        NameResult name_field = new NameResult;
        ValueTypeResult type_field = new ValueTypeResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && value_type_parser_instance.ParseSingleSave(index, type_field) && whitespace_parser_instance.ParseMany(index, 1, -1) && name_parser_instance.ParseSingleSave(index, name_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ",") && whitespace_parser_instance.ParseMany(index, 0, -1) && parameter_list_def_parser_instance.ParseSingleSave(index, parameterTail_field)) {
            instance.SetParameterTail(parameterTail_field.GetValue());
            instance.SetName(name_field.GetValue());
            instance.SetType(type_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            parameterTail_field = new ParameterListDefResult;
            name_field = new NameResult;
            type_field = new ValueTypeResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && value_type_parser_instance.ParseSingleSave(index, type_field) && whitespace_parser_instance.ParseMany(index, 1, -1) && name_parser_instance.ParseSingleSave(index, name_field) && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetParameterTail(parameterTail_field.GetValue());
            instance.SetName(name_field.GetValue());
            instance.SetType(type_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            parameterTail_field = new ParameterListDefResult;
            name_field = new NameResult;
            type_field = new ValueTypeResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ParameterListDefResult result = new ParameterListDefResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ParameterListDefResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ParameterListDefResult result = new ParameterListDefResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ParameterListDefListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        ParameterListDef[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ParameterListDefResult result = new ParameterListDefResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ParameterListDefListResult result = new ParameterListDefListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ParameterListDefResult
{
    function void SetValue(ParameterListDef new_value) { value = new_value; }
    function ParameterListDef GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ParameterListDef value;
    bool result;
}

class ParameterListDefListResult
{
    function void SetValue(ParameterListDef[] new_value) { value = new_value; }
    function ParameterListDef[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ParameterListDef[] value;
    bool result;
}

class ParameterListDef
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetParameterTail(ParameterListDef input_value) { parameterTail_field = input_value; }
    function ParameterListDef GetParameterTail() { return parameterTail_field; }
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }
    function void SetType(ValueType input_value) { type_field = input_value; }
    function ValueType GetType() { return type_field; }

    LengthString length_string;
    ParameterListDef parameterTail_field;
    Name name_field;
    ValueType type_field;
}

class ParameterListParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ParameterListResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        ParameterList instance = new ParameterList;
        ParameterListResult parameterTail_field = new ParameterListResult;
        RValueResult rvalue_field = new RValueResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && r_value_parser_instance.ParseSingleSave(index, rvalue_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ",") && whitespace_parser_instance.ParseMany(index, 0, -1) && parameter_list_parser_instance.ParseSingleSave(index, parameterTail_field)) {
            instance.SetParameterTail(parameterTail_field.GetValue());
            instance.SetRvalue(rvalue_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            parameterTail_field = new ParameterListResult;
            rvalue_field = new RValueResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && r_value_parser_instance.ParseSingleSave(index, rvalue_field) && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetParameterTail(parameterTail_field.GetValue());
            instance.SetRvalue(rvalue_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            parameterTail_field = new ParameterListResult;
            rvalue_field = new RValueResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ParameterListResult result = new ParameterListResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ParameterListResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ParameterListResult result = new ParameterListResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ParameterListListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        ParameterList[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ParameterListResult result = new ParameterListResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ParameterListListResult result = new ParameterListListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ParameterListResult
{
    function void SetValue(ParameterList new_value) { value = new_value; }
    function ParameterList GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ParameterList value;
    bool result;
}

class ParameterListListResult
{
    function void SetValue(ParameterList[] new_value) { value = new_value; }
    function ParameterList[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ParameterList[] value;
    bool result;
}

class ParameterList
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetParameterTail(ParameterList input_value) { parameterTail_field = input_value; }
    function ParameterList GetParameterTail() { return parameterTail_field; }
    function void SetRvalue(RValue input_value) { rvalue_field = input_value; }
    function RValue GetRvalue() { return rvalue_field; }

    LengthString length_string;
    ParameterList parameterTail_field;
    RValue rvalue_field;
}

class CodeBlockParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, CodeBlockResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        CodeBlock instance = new CodeBlock;
        InstructionListResult instructions_field = new InstructionListResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "{") && whitespace_parser_instance.ParseMany(index, 0, -1) && instruction_parser_instance.ParseManySave(index, instructions_field, 0, -1) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "}") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetInstructions(instructions_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            instructions_field = new InstructionListResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        CodeBlockResult result = new CodeBlockResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, CodeBlockResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        CodeBlockResult result = new CodeBlockResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, CodeBlockListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        CodeBlock[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            CodeBlockResult result = new CodeBlockResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        CodeBlockListResult result = new CodeBlockListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class CodeBlockResult
{
    function void SetValue(CodeBlock new_value) { value = new_value; }
    function CodeBlock GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CodeBlock value;
    bool result;
}

class CodeBlockListResult
{
    function void SetValue(CodeBlock[] new_value) { value = new_value; }
    function CodeBlock[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CodeBlock[] value;
    bool result;
}

class CodeBlock
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetInstructions(Instruction[] input_value) { instructions_field = input_value; }
    function Instruction[] GetInstructions() { return instructions_field; }

    LengthString length_string;
    Instruction[] instructions_field;
}

class DeclarationAssignParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, DeclarationAssignResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        DeclarationAssign instance = new DeclarationAssign;
        RValueResult rvalue_field = new RValueResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "=") && whitespace_parser_instance.ParseMany(index, 0, -1) && r_value_parser_instance.ParseSingleSave(index, rvalue_field) && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetRvalue(rvalue_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            rvalue_field = new RValueResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        DeclarationAssignResult result = new DeclarationAssignResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, DeclarationAssignResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        DeclarationAssignResult result = new DeclarationAssignResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, DeclarationAssignListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        DeclarationAssign[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            DeclarationAssignResult result = new DeclarationAssignResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        DeclarationAssignListResult result = new DeclarationAssignListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class DeclarationAssignResult
{
    function void SetValue(DeclarationAssign new_value) { value = new_value; }
    function DeclarationAssign GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    DeclarationAssign value;
    bool result;
}

class DeclarationAssignListResult
{
    function void SetValue(DeclarationAssign[] new_value) { value = new_value; }
    function DeclarationAssign[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    DeclarationAssign[] value;
    bool result;
}

class DeclarationAssign
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetRvalue(RValue input_value) { rvalue_field = input_value; }
    function RValue GetRvalue() { return rvalue_field; }

    LengthString length_string;
    RValue rvalue_field;
}

class DeclarationParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, DeclarationResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Declaration instance = new Declaration;
        NameResult name_field = new NameResult;
        DeclarationAssignResult assignment_field = new DeclarationAssignResult;
        ValueTypeResult type_field = new ValueTypeResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && value_type_parser_instance.ParseSingleSave(index, type_field) && whitespace_parser_instance.ParseMany(index, 1, -1) && name_parser_instance.ParseSingleSave(index, name_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && declaration_assign_parser_instance.ParseOptionalSave(index, assignment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ";") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetName(name_field.GetValue());
            instance.SetAssignment(assignment_field.GetValue());
            instance.SetType(type_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            name_field = new NameResult;
            assignment_field = new DeclarationAssignResult;
            type_field = new ValueTypeResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        DeclarationResult result = new DeclarationResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, DeclarationResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        DeclarationResult result = new DeclarationResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, DeclarationListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Declaration[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            DeclarationResult result = new DeclarationResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        DeclarationListResult result = new DeclarationListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class DeclarationResult
{
    function void SetValue(Declaration new_value) { value = new_value; }
    function Declaration GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Declaration value;
    bool result;
}

class DeclarationListResult
{
    function void SetValue(Declaration[] new_value) { value = new_value; }
    function Declaration[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Declaration[] value;
    bool result;
}

class Declaration
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }
    function void SetAssignment(DeclarationAssign input_value) { assignment_field = input_value; }
    function DeclarationAssign GetAssignment() { return assignment_field; }
    function void SetType(ValueType input_value) { type_field = input_value; }
    function ValueType GetType() { return type_field; }

    LengthString length_string;
    Name name_field;
    DeclarationAssign assignment_field;
    ValueType type_field;
}

class AssignmentParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, AssignmentResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Assignment instance = new Assignment;
        RValueResult rvalue_field = new RValueResult;
        NameResult lvalue_field = new NameResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && name_parser_instance.ParseSingleSave(index, lvalue_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "=") && whitespace_parser_instance.ParseMany(index, 0, -1) && r_value_parser_instance.ParseSingleSave(index, rvalue_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ";") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetRvalue(rvalue_field.GetValue());
            instance.SetLvalue(lvalue_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            rvalue_field = new RValueResult;
            lvalue_field = new NameResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        AssignmentResult result = new AssignmentResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, AssignmentResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        AssignmentResult result = new AssignmentResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, AssignmentListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Assignment[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            AssignmentResult result = new AssignmentResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        AssignmentListResult result = new AssignmentListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class AssignmentResult
{
    function void SetValue(Assignment new_value) { value = new_value; }
    function Assignment GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Assignment value;
    bool result;
}

class AssignmentListResult
{
    function void SetValue(Assignment[] new_value) { value = new_value; }
    function Assignment[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Assignment[] value;
    bool result;
}

class Assignment
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetRvalue(RValue input_value) { rvalue_field = input_value; }
    function RValue GetRvalue() { return rvalue_field; }
    function void SetLvalue(Name input_value) { lvalue_field = input_value; }
    function Name GetLvalue() { return lvalue_field; }

    LengthString length_string;
    RValue rvalue_field;
    Name lvalue_field;
}

class ReturnParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ReturnResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Return instance = new Return;
        RValueResult rvalue_field = new RValueResult;
        StringResult rtn_field = new StringResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingleSave(index, "return", rtn_field) && whitespace_parser_instance.ParseMany(index, 1, -1) && r_value_parser_instance.ParseSingleSave(index, rvalue_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ";") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetRvalue(rvalue_field.GetValue());
            instance.SetRtn(rtn_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            rvalue_field = new RValueResult;
            rtn_field = new StringResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ReturnResult result = new ReturnResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ReturnResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ReturnResult result = new ReturnResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ReturnListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Return[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ReturnResult result = new ReturnResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ReturnListResult result = new ReturnListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ReturnResult
{
    function void SetValue(Return new_value) { value = new_value; }
    function Return GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Return value;
    bool result;
}

class ReturnListResult
{
    function void SetValue(Return[] new_value) { value = new_value; }
    function Return[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Return[] value;
    bool result;
}

class Return
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetRvalue(RValue input_value) { rvalue_field = input_value; }
    function RValue GetRvalue() { return rvalue_field; }
    function void SetRtn(String input_value) { rtn_field = input_value; }
    function String GetRtn() { return rtn_field; }

    LengthString length_string;
    RValue rvalue_field;
    String rtn_field;
}

class ElseTailParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ElseTailResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        ElseTail instance = new ElseTail;
        CodeBlockResult codeBlock_field = new CodeBlockResult;
        StringResult elseKey_field = new StringResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingleSave(index, "else", elseKey_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && code_block_parser_instance.ParseSingleSave(index, codeBlock_field) && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetCodeBlock(codeBlock_field.GetValue());
            instance.SetElseKey(elseKey_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            codeBlock_field = new CodeBlockResult;
            elseKey_field = new StringResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ElseTailResult result = new ElseTailResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ElseTailResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ElseTailResult result = new ElseTailResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ElseTailListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        ElseTail[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ElseTailResult result = new ElseTailResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ElseTailListResult result = new ElseTailListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ElseTailResult
{
    function void SetValue(ElseTail new_value) { value = new_value; }
    function ElseTail GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ElseTail value;
    bool result;
}

class ElseTailListResult
{
    function void SetValue(ElseTail[] new_value) { value = new_value; }
    function ElseTail[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ElseTail[] value;
    bool result;
}

class ElseTail
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetCodeBlock(CodeBlock input_value) { codeBlock_field = input_value; }
    function CodeBlock GetCodeBlock() { return codeBlock_field; }
    function void SetElseKey(String input_value) { elseKey_field = input_value; }
    function String GetElseKey() { return elseKey_field; }

    LengthString length_string;
    CodeBlock codeBlock_field;
    String elseKey_field;
}

class ConditionalParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ConditionalResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Conditional instance = new Conditional;
        ElseTailResult elseTail_field = new ElseTailResult;
        CodeBlockResult codeBlock_field = new CodeBlockResult;
        RValueResult rvalue_field = new RValueResult;
        StringResult conditionalKey_field = new StringResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingleSave(index, "if", conditionalKey_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "(") && whitespace_parser_instance.ParseMany(index, 0, -1) && r_value_parser_instance.ParseSingleSave(index, rvalue_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ")") && whitespace_parser_instance.ParseMany(index, 0, -1) && code_block_parser_instance.ParseSingleSave(index, codeBlock_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && else_tail_parser_instance.ParseOptionalSave(index, elseTail_field)) {
            instance.SetElseTail(elseTail_field.GetValue());
            instance.SetCodeBlock(codeBlock_field.GetValue());
            instance.SetRvalue(rvalue_field.GetValue());
            instance.SetConditionalKey(conditionalKey_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            elseTail_field = new ElseTailResult;
            codeBlock_field = new CodeBlockResult;
            rvalue_field = new RValueResult;
            conditionalKey_field = new StringResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ConditionalResult result = new ConditionalResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ConditionalResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ConditionalResult result = new ConditionalResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ConditionalListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Conditional[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ConditionalResult result = new ConditionalResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ConditionalListResult result = new ConditionalListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ConditionalResult
{
    function void SetValue(Conditional new_value) { value = new_value; }
    function Conditional GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Conditional value;
    bool result;
}

class ConditionalListResult
{
    function void SetValue(Conditional[] new_value) { value = new_value; }
    function Conditional[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Conditional[] value;
    bool result;
}

class Conditional
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetElseTail(ElseTail input_value) { elseTail_field = input_value; }
    function ElseTail GetElseTail() { return elseTail_field; }
    function void SetCodeBlock(CodeBlock input_value) { codeBlock_field = input_value; }
    function CodeBlock GetCodeBlock() { return codeBlock_field; }
    function void SetRvalue(RValue input_value) { rvalue_field = input_value; }
    function RValue GetRvalue() { return rvalue_field; }
    function void SetConditionalKey(String input_value) { conditionalKey_field = input_value; }
    function String GetConditionalKey() { return conditionalKey_field; }

    LengthString length_string;
    ElseTail elseTail_field;
    CodeBlock codeBlock_field;
    RValue rvalue_field;
    String conditionalKey_field;
}

class LoopParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, LoopResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Loop instance = new Loop;
        CodeBlockResult codeBlock_field = new CodeBlockResult;
        RValueResult rvalue_field = new RValueResult;
        StringResult loopKey_field = new StringResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingleSave(index, "while", loopKey_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "(") && whitespace_parser_instance.ParseMany(index, 0, -1) && r_value_parser_instance.ParseSingleSave(index, rvalue_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ")") && whitespace_parser_instance.ParseMany(index, 0, -1) && code_block_parser_instance.ParseSingleSave(index, codeBlock_field) && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetCodeBlock(codeBlock_field.GetValue());
            instance.SetRvalue(rvalue_field.GetValue());
            instance.SetLoopKey(loopKey_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            codeBlock_field = new CodeBlockResult;
            rvalue_field = new RValueResult;
            loopKey_field = new StringResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        LoopResult result = new LoopResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, LoopResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        LoopResult result = new LoopResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, LoopListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Loop[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            LoopResult result = new LoopResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        LoopListResult result = new LoopListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class LoopResult
{
    function void SetValue(Loop new_value) { value = new_value; }
    function Loop GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Loop value;
    bool result;
}

class LoopListResult
{
    function void SetValue(Loop[] new_value) { value = new_value; }
    function Loop[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Loop[] value;
    bool result;
}

class Loop
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetCodeBlock(CodeBlock input_value) { codeBlock_field = input_value; }
    function CodeBlock GetCodeBlock() { return codeBlock_field; }
    function void SetRvalue(RValue input_value) { rvalue_field = input_value; }
    function RValue GetRvalue() { return rvalue_field; }
    function void SetLoopKey(String input_value) { loopKey_field = input_value; }
    function String GetLoopKey() { return loopKey_field; }

    LengthString length_string;
    CodeBlock codeBlock_field;
    RValue rvalue_field;
    String loopKey_field;
}

class CallParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, CallResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Call instance = new Call;
        ParameterListResult parameters_field = new ParameterListResult;
        NameResult function_field = new NameResult;
        NameResult variable_field = new NameResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && name_parser_instance.ParseSingleSave(index, variable_field) && string_parser_instance.ParseSingle(index, ".") && name_parser_instance.ParseSingleSave(index, function_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "(") && whitespace_parser_instance.ParseMany(index, 0, -1) && parameter_list_parser_instance.ParseOptionalSave(index, parameters_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ")") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetParameters(parameters_field.GetValue());
            instance.SetFunction(function_field.GetValue());
            instance.SetVariable(variable_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            parameters_field = new ParameterListResult;
            function_field = new NameResult;
            variable_field = new NameResult;
        }

        if (true && name_parser_instance.ParseSingleSave(index, function_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "(") && whitespace_parser_instance.ParseMany(index, 0, -1) && parameter_list_parser_instance.ParseOptionalSave(index, parameters_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ")") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetParameters(parameters_field.GetValue());
            instance.SetFunction(function_field.GetValue());
            instance.SetVariable(variable_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            parameters_field = new ParameterListResult;
            function_field = new NameResult;
            variable_field = new NameResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        CallResult result = new CallResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, CallResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        CallResult result = new CallResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, CallListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Call[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            CallResult result = new CallResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        CallListResult result = new CallListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class CallResult
{
    function void SetValue(Call new_value) { value = new_value; }
    function Call GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Call value;
    bool result;
}

class CallListResult
{
    function void SetValue(Call[] new_value) { value = new_value; }
    function Call[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Call[] value;
    bool result;
}

class Call
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetParameters(ParameterList input_value) { parameters_field = input_value; }
    function ParameterList GetParameters() { return parameters_field; }
    function void SetFunction(Name input_value) { function_field = input_value; }
    function Name GetFunction() { return function_field; }
    function void SetVariable(Name input_value) { variable_field = input_value; }
    function Name GetVariable() { return variable_field; }

    LengthString length_string;
    ParameterList parameters_field;
    Name function_field;
    Name variable_field;
}

class AllocateParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, AllocateResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Allocate instance = new Allocate;
        QualfiedNameResult managed_type_field = new QualfiedNameResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "new") && whitespace_parser_instance.ParseMany(index, 1, -1) && qualfied_name_parser_instance.ParseSingleSave(index, managed_type_field) && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetManagedType(managed_type_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            managed_type_field = new QualfiedNameResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        AllocateResult result = new AllocateResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, AllocateResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        AllocateResult result = new AllocateResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, AllocateListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Allocate[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            AllocateResult result = new AllocateResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        AllocateListResult result = new AllocateListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class AllocateResult
{
    function void SetValue(Allocate new_value) { value = new_value; }
    function Allocate GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Allocate value;
    bool result;
}

class AllocateListResult
{
    function void SetValue(Allocate[] new_value) { value = new_value; }
    function Allocate[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Allocate[] value;
    bool result;
}

class Allocate
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetManagedType(QualfiedName input_value) { managed_type_field = input_value; }
    function QualfiedName GetManagedType() { return managed_type_field; }

    LengthString length_string;
    QualfiedName managed_type_field;
}

class InstructionParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, InstructionResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Instruction instance = new Instruction;
        LoopResult loop_field = new LoopResult;
        ConditionalResult conditional_field = new ConditionalResult;
        CallResult call_field = new CallResult;
        ReturnResult rtn_field = new ReturnResult;
        CodeBlockResult codeBlock_field = new CodeBlockResult;
        AssignmentResult assignment_field = new AssignmentResult;
        DeclarationResult declaration_field = new DeclarationResult;
        CommentResult comment_field = new CommentResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && code_block_parser_instance.ParseSingleSave(index, codeBlock_field)) {
            instance.SetLoop(loop_field.GetValue());
            instance.SetConditional(conditional_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetRtn(rtn_field.GetValue());
            instance.SetCodeBlock(codeBlock_field.GetValue());
            instance.SetAssignment(assignment_field.GetValue());
            instance.SetDeclaration(declaration_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            loop_field = new LoopResult;
            conditional_field = new ConditionalResult;
            call_field = new CallResult;
            rtn_field = new ReturnResult;
            codeBlock_field = new CodeBlockResult;
            assignment_field = new AssignmentResult;
            declaration_field = new DeclarationResult;
            comment_field = new CommentResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && return_parser_instance.ParseSingleSave(index, rtn_field)) {
            instance.SetLoop(loop_field.GetValue());
            instance.SetConditional(conditional_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetRtn(rtn_field.GetValue());
            instance.SetCodeBlock(codeBlock_field.GetValue());
            instance.SetAssignment(assignment_field.GetValue());
            instance.SetDeclaration(declaration_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            loop_field = new LoopResult;
            conditional_field = new ConditionalResult;
            call_field = new CallResult;
            rtn_field = new ReturnResult;
            codeBlock_field = new CodeBlockResult;
            assignment_field = new AssignmentResult;
            declaration_field = new DeclarationResult;
            comment_field = new CommentResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && declaration_parser_instance.ParseSingleSave(index, declaration_field)) {
            instance.SetLoop(loop_field.GetValue());
            instance.SetConditional(conditional_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetRtn(rtn_field.GetValue());
            instance.SetCodeBlock(codeBlock_field.GetValue());
            instance.SetAssignment(assignment_field.GetValue());
            instance.SetDeclaration(declaration_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            loop_field = new LoopResult;
            conditional_field = new ConditionalResult;
            call_field = new CallResult;
            rtn_field = new ReturnResult;
            codeBlock_field = new CodeBlockResult;
            assignment_field = new AssignmentResult;
            declaration_field = new DeclarationResult;
            comment_field = new CommentResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && assignment_parser_instance.ParseSingleSave(index, assignment_field)) {
            instance.SetLoop(loop_field.GetValue());
            instance.SetConditional(conditional_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetRtn(rtn_field.GetValue());
            instance.SetCodeBlock(codeBlock_field.GetValue());
            instance.SetAssignment(assignment_field.GetValue());
            instance.SetDeclaration(declaration_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            loop_field = new LoopResult;
            conditional_field = new ConditionalResult;
            call_field = new CallResult;
            rtn_field = new ReturnResult;
            codeBlock_field = new CodeBlockResult;
            assignment_field = new AssignmentResult;
            declaration_field = new DeclarationResult;
            comment_field = new CommentResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && call_parser_instance.ParseSingleSave(index, call_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, ";") && whitespace_parser_instance.ParseMany(index, 0, -1)) {
            instance.SetLoop(loop_field.GetValue());
            instance.SetConditional(conditional_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetRtn(rtn_field.GetValue());
            instance.SetCodeBlock(codeBlock_field.GetValue());
            instance.SetAssignment(assignment_field.GetValue());
            instance.SetDeclaration(declaration_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            loop_field = new LoopResult;
            conditional_field = new ConditionalResult;
            call_field = new CallResult;
            rtn_field = new ReturnResult;
            codeBlock_field = new CodeBlockResult;
            assignment_field = new AssignmentResult;
            declaration_field = new DeclarationResult;
            comment_field = new CommentResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && conditional_parser_instance.ParseSingleSave(index, conditional_field)) {
            instance.SetLoop(loop_field.GetValue());
            instance.SetConditional(conditional_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetRtn(rtn_field.GetValue());
            instance.SetCodeBlock(codeBlock_field.GetValue());
            instance.SetAssignment(assignment_field.GetValue());
            instance.SetDeclaration(declaration_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            loop_field = new LoopResult;
            conditional_field = new ConditionalResult;
            call_field = new CallResult;
            rtn_field = new ReturnResult;
            codeBlock_field = new CodeBlockResult;
            assignment_field = new AssignmentResult;
            declaration_field = new DeclarationResult;
            comment_field = new CommentResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && comment_parser_instance.ParseOptionalSave(index, comment_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && loop_parser_instance.ParseSingleSave(index, loop_field)) {
            instance.SetLoop(loop_field.GetValue());
            instance.SetConditional(conditional_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetRtn(rtn_field.GetValue());
            instance.SetCodeBlock(codeBlock_field.GetValue());
            instance.SetAssignment(assignment_field.GetValue());
            instance.SetDeclaration(declaration_field.GetValue());
            instance.SetComment(comment_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            loop_field = new LoopResult;
            conditional_field = new ConditionalResult;
            call_field = new CallResult;
            rtn_field = new ReturnResult;
            codeBlock_field = new CodeBlockResult;
            assignment_field = new AssignmentResult;
            declaration_field = new DeclarationResult;
            comment_field = new CommentResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        InstructionResult result = new InstructionResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, InstructionResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        InstructionResult result = new InstructionResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, InstructionListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Instruction[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            InstructionResult result = new InstructionResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        InstructionListResult result = new InstructionListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class InstructionResult
{
    function void SetValue(Instruction new_value) { value = new_value; }
    function Instruction GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Instruction value;
    bool result;
}

class InstructionListResult
{
    function void SetValue(Instruction[] new_value) { value = new_value; }
    function Instruction[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Instruction[] value;
    bool result;
}

class Instruction
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetLoop(Loop input_value) { loop_field = input_value; }
    function Loop GetLoop() { return loop_field; }
    function void SetConditional(Conditional input_value) { conditional_field = input_value; }
    function Conditional GetConditional() { return conditional_field; }
    function void SetCall(Call input_value) { call_field = input_value; }
    function Call GetCall() { return call_field; }
    function void SetRtn(Return input_value) { rtn_field = input_value; }
    function Return GetRtn() { return rtn_field; }
    function void SetCodeBlock(CodeBlock input_value) { codeBlock_field = input_value; }
    function CodeBlock GetCodeBlock() { return codeBlock_field; }
    function void SetAssignment(Assignment input_value) { assignment_field = input_value; }
    function Assignment GetAssignment() { return assignment_field; }
    function void SetDeclaration(Declaration input_value) { declaration_field = input_value; }
    function Declaration GetDeclaration() { return declaration_field; }
    function void SetComment(Comment input_value) { comment_field = input_value; }
    function Comment GetComment() { return comment_field; }

    LengthString length_string;
    Loop loop_field;
    Conditional conditional_field;
    Call call_field;
    Return rtn_field;
    CodeBlock codeBlock_field;
    Assignment assignment_field;
    Declaration declaration_field;
    Comment comment_field;
}

class RValueSingleParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, RValueSingleResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        RValueSingle instance = new RValueSingle;
        LiteralResult stringLiteral_field = new LiteralResult;
        NameResult variable_field = new NameResult;
        BooleanResult booleanLiteral_field = new BooleanResult;
        NumberResult integerLiteral_field = new NumberResult;
        DecimalResult decimalLiteral_field = new DecimalResult;
        ByteResult byteLiteral_field = new ByteResult;
        AllocateResult allocate_field = new AllocateResult;
        CallResult call_field = new CallResult;
        UnaryOperatorResult unary_operator_field = new UnaryOperatorResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && unary_operator_parser_instance.ParseOptionalSave(index, unary_operator_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && call_parser_instance.ParseSingleSave(index, call_field)) {
            instance.SetStringLiteral(stringLiteral_field.GetValue());
            instance.SetVariable(variable_field.GetValue());
            instance.SetBooleanLiteral(booleanLiteral_field.GetValue());
            instance.SetIntegerLiteral(integerLiteral_field.GetValue());
            instance.SetDecimalLiteral(decimalLiteral_field.GetValue());
            instance.SetByteLiteral(byteLiteral_field.GetValue());
            instance.SetAllocate(allocate_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetUnaryOperator(unary_operator_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            stringLiteral_field = new LiteralResult;
            variable_field = new NameResult;
            booleanLiteral_field = new BooleanResult;
            integerLiteral_field = new NumberResult;
            decimalLiteral_field = new DecimalResult;
            byteLiteral_field = new ByteResult;
            allocate_field = new AllocateResult;
            call_field = new CallResult;
            unary_operator_field = new UnaryOperatorResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && unary_operator_parser_instance.ParseOptionalSave(index, unary_operator_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && allocate_parser_instance.ParseSingleSave(index, allocate_field)) {
            instance.SetStringLiteral(stringLiteral_field.GetValue());
            instance.SetVariable(variable_field.GetValue());
            instance.SetBooleanLiteral(booleanLiteral_field.GetValue());
            instance.SetIntegerLiteral(integerLiteral_field.GetValue());
            instance.SetDecimalLiteral(decimalLiteral_field.GetValue());
            instance.SetByteLiteral(byteLiteral_field.GetValue());
            instance.SetAllocate(allocate_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetUnaryOperator(unary_operator_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            stringLiteral_field = new LiteralResult;
            variable_field = new NameResult;
            booleanLiteral_field = new BooleanResult;
            integerLiteral_field = new NumberResult;
            decimalLiteral_field = new DecimalResult;
            byteLiteral_field = new ByteResult;
            allocate_field = new AllocateResult;
            call_field = new CallResult;
            unary_operator_field = new UnaryOperatorResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && unary_operator_parser_instance.ParseOptionalSave(index, unary_operator_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && byte_parser_instance.ParseSingleSave(index, byteLiteral_field)) {
            instance.SetStringLiteral(stringLiteral_field.GetValue());
            instance.SetVariable(variable_field.GetValue());
            instance.SetBooleanLiteral(booleanLiteral_field.GetValue());
            instance.SetIntegerLiteral(integerLiteral_field.GetValue());
            instance.SetDecimalLiteral(decimalLiteral_field.GetValue());
            instance.SetByteLiteral(byteLiteral_field.GetValue());
            instance.SetAllocate(allocate_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetUnaryOperator(unary_operator_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            stringLiteral_field = new LiteralResult;
            variable_field = new NameResult;
            booleanLiteral_field = new BooleanResult;
            integerLiteral_field = new NumberResult;
            decimalLiteral_field = new DecimalResult;
            byteLiteral_field = new ByteResult;
            allocate_field = new AllocateResult;
            call_field = new CallResult;
            unary_operator_field = new UnaryOperatorResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && unary_operator_parser_instance.ParseOptionalSave(index, unary_operator_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && decimal_parser_instance.ParseSingleSave(index, decimalLiteral_field)) {
            instance.SetStringLiteral(stringLiteral_field.GetValue());
            instance.SetVariable(variable_field.GetValue());
            instance.SetBooleanLiteral(booleanLiteral_field.GetValue());
            instance.SetIntegerLiteral(integerLiteral_field.GetValue());
            instance.SetDecimalLiteral(decimalLiteral_field.GetValue());
            instance.SetByteLiteral(byteLiteral_field.GetValue());
            instance.SetAllocate(allocate_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetUnaryOperator(unary_operator_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            stringLiteral_field = new LiteralResult;
            variable_field = new NameResult;
            booleanLiteral_field = new BooleanResult;
            integerLiteral_field = new NumberResult;
            decimalLiteral_field = new DecimalResult;
            byteLiteral_field = new ByteResult;
            allocate_field = new AllocateResult;
            call_field = new CallResult;
            unary_operator_field = new UnaryOperatorResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && unary_operator_parser_instance.ParseOptionalSave(index, unary_operator_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && number_parser_instance.ParseSingleSave(index, integerLiteral_field)) {
            instance.SetStringLiteral(stringLiteral_field.GetValue());
            instance.SetVariable(variable_field.GetValue());
            instance.SetBooleanLiteral(booleanLiteral_field.GetValue());
            instance.SetIntegerLiteral(integerLiteral_field.GetValue());
            instance.SetDecimalLiteral(decimalLiteral_field.GetValue());
            instance.SetByteLiteral(byteLiteral_field.GetValue());
            instance.SetAllocate(allocate_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetUnaryOperator(unary_operator_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            stringLiteral_field = new LiteralResult;
            variable_field = new NameResult;
            booleanLiteral_field = new BooleanResult;
            integerLiteral_field = new NumberResult;
            decimalLiteral_field = new DecimalResult;
            byteLiteral_field = new ByteResult;
            allocate_field = new AllocateResult;
            call_field = new CallResult;
            unary_operator_field = new UnaryOperatorResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && unary_operator_parser_instance.ParseOptionalSave(index, unary_operator_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && boolean_parser_instance.ParseSingleSave(index, booleanLiteral_field)) {
            instance.SetStringLiteral(stringLiteral_field.GetValue());
            instance.SetVariable(variable_field.GetValue());
            instance.SetBooleanLiteral(booleanLiteral_field.GetValue());
            instance.SetIntegerLiteral(integerLiteral_field.GetValue());
            instance.SetDecimalLiteral(decimalLiteral_field.GetValue());
            instance.SetByteLiteral(byteLiteral_field.GetValue());
            instance.SetAllocate(allocate_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetUnaryOperator(unary_operator_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            stringLiteral_field = new LiteralResult;
            variable_field = new NameResult;
            booleanLiteral_field = new BooleanResult;
            integerLiteral_field = new NumberResult;
            decimalLiteral_field = new DecimalResult;
            byteLiteral_field = new ByteResult;
            allocate_field = new AllocateResult;
            call_field = new CallResult;
            unary_operator_field = new UnaryOperatorResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && unary_operator_parser_instance.ParseOptionalSave(index, unary_operator_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && name_parser_instance.ParseSingleSave(index, variable_field)) {
            instance.SetStringLiteral(stringLiteral_field.GetValue());
            instance.SetVariable(variable_field.GetValue());
            instance.SetBooleanLiteral(booleanLiteral_field.GetValue());
            instance.SetIntegerLiteral(integerLiteral_field.GetValue());
            instance.SetDecimalLiteral(decimalLiteral_field.GetValue());
            instance.SetByteLiteral(byteLiteral_field.GetValue());
            instance.SetAllocate(allocate_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetUnaryOperator(unary_operator_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            stringLiteral_field = new LiteralResult;
            variable_field = new NameResult;
            booleanLiteral_field = new BooleanResult;
            integerLiteral_field = new NumberResult;
            decimalLiteral_field = new DecimalResult;
            byteLiteral_field = new ByteResult;
            allocate_field = new AllocateResult;
            call_field = new CallResult;
            unary_operator_field = new UnaryOperatorResult;
        }

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && unary_operator_parser_instance.ParseOptionalSave(index, unary_operator_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && string_parser_instance.ParseSingle(index, "\"") && literal_parser_instance.ParseSingleSave(index, stringLiteral_field) && string_parser_instance.ParseSingle(index, "\"")) {
            instance.SetStringLiteral(stringLiteral_field.GetValue());
            instance.SetVariable(variable_field.GetValue());
            instance.SetBooleanLiteral(booleanLiteral_field.GetValue());
            instance.SetIntegerLiteral(integerLiteral_field.GetValue());
            instance.SetDecimalLiteral(decimalLiteral_field.GetValue());
            instance.SetByteLiteral(byteLiteral_field.GetValue());
            instance.SetAllocate(allocate_field.GetValue());
            instance.SetCall(call_field.GetValue());
            instance.SetUnaryOperator(unary_operator_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            stringLiteral_field = new LiteralResult;
            variable_field = new NameResult;
            booleanLiteral_field = new BooleanResult;
            integerLiteral_field = new NumberResult;
            decimalLiteral_field = new DecimalResult;
            byteLiteral_field = new ByteResult;
            allocate_field = new AllocateResult;
            call_field = new CallResult;
            unary_operator_field = new UnaryOperatorResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        RValueSingleResult result = new RValueSingleResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, RValueSingleResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        RValueSingleResult result = new RValueSingleResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, RValueSingleListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        RValueSingle[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            RValueSingleResult result = new RValueSingleResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        RValueSingleListResult result = new RValueSingleListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class RValueSingleResult
{
    function void SetValue(RValueSingle new_value) { value = new_value; }
    function RValueSingle GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    RValueSingle value;
    bool result;
}

class RValueSingleListResult
{
    function void SetValue(RValueSingle[] new_value) { value = new_value; }
    function RValueSingle[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    RValueSingle[] value;
    bool result;
}

class RValueSingle
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetStringLiteral(Literal input_value) { stringLiteral_field = input_value; }
    function Literal GetStringLiteral() { return stringLiteral_field; }
    function void SetVariable(Name input_value) { variable_field = input_value; }
    function Name GetVariable() { return variable_field; }
    function void SetBooleanLiteral(Boolean input_value) { booleanLiteral_field = input_value; }
    function Boolean GetBooleanLiteral() { return booleanLiteral_field; }
    function void SetIntegerLiteral(Number input_value) { integerLiteral_field = input_value; }
    function Number GetIntegerLiteral() { return integerLiteral_field; }
    function void SetDecimalLiteral(Decimal input_value) { decimalLiteral_field = input_value; }
    function Decimal GetDecimalLiteral() { return decimalLiteral_field; }
    function void SetByteLiteral(Byte input_value) { byteLiteral_field = input_value; }
    function Byte GetByteLiteral() { return byteLiteral_field; }
    function void SetAllocate(Allocate input_value) { allocate_field = input_value; }
    function Allocate GetAllocate() { return allocate_field; }
    function void SetCall(Call input_value) { call_field = input_value; }
    function Call GetCall() { return call_field; }
    function void SetUnaryOperator(UnaryOperator input_value) { unary_operator_field = input_value; }
    function UnaryOperator GetUnaryOperator() { return unary_operator_field; }

    LengthString length_string;
    Literal stringLiteral_field;
    Name variable_field;
    Boolean booleanLiteral_field;
    Number integerLiteral_field;
    Decimal decimalLiteral_field;
    Byte byteLiteral_field;
    Allocate allocate_field;
    Call call_field;
    UnaryOperator unary_operator_field;
}

class RValueTailParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, RValueTailResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        RValueTail instance = new RValueTail;
        RValueTailResult tail_field = new RValueTailResult;
        RValueSingleResult value_field = new RValueSingleResult;
        BinaryOperatorResult binary_operator_field = new BinaryOperatorResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseMany(index, 0, -1) && binary_operator_parser_instance.ParseSingleSave(index, binary_operator_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && r_value_single_parser_instance.ParseSingleSave(index, value_field) && whitespace_parser_instance.ParseMany(index, 0, -1) && r_value_tail_parser_instance.ParseOptionalSave(index, tail_field)) {
            instance.SetTail(tail_field.GetValue());
            instance.SetValue(value_field.GetValue());
            instance.SetBinaryOperator(binary_operator_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            tail_field = new RValueTailResult;
            value_field = new RValueSingleResult;
            binary_operator_field = new BinaryOperatorResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        RValueTailResult result = new RValueTailResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, RValueTailResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        RValueTailResult result = new RValueTailResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, RValueTailListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        RValueTail[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            RValueTailResult result = new RValueTailResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        RValueTailListResult result = new RValueTailListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class RValueTailResult
{
    function void SetValue(RValueTail new_value) { value = new_value; }
    function RValueTail GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    RValueTail value;
    bool result;
}

class RValueTailListResult
{
    function void SetValue(RValueTail[] new_value) { value = new_value; }
    function RValueTail[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    RValueTail[] value;
    bool result;
}

class RValueTail
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetTail(RValueTail input_value) { tail_field = input_value; }
    function RValueTail GetTail() { return tail_field; }
    function void SetValue(RValueSingle input_value) { value_field = input_value; }
    function RValueSingle GetValue() { return value_field; }
    function void SetBinaryOperator(BinaryOperator input_value) { binary_operator_field = input_value; }
    function BinaryOperator GetBinaryOperator() { return binary_operator_field; }

    LengthString length_string;
    RValueTail tail_field;
    RValueSingle value_field;
    BinaryOperator binary_operator_field;
}

class RValueParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, RValueResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        RValue instance = new RValue;
        RValueTailResult tail_field = new RValueTailResult;
        RValueSingleResult value_field = new RValueSingleResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && r_value_single_parser_instance.ParseSingleSave(index, value_field) && r_value_tail_parser_instance.ParseOptionalSave(index, tail_field)) {
            instance.SetTail(tail_field.GetValue());
            instance.SetValue(value_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            tail_field = new RValueTailResult;
            value_field = new RValueSingleResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        RValueResult result = new RValueResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, RValueResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        RValueResult result = new RValueResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, RValueListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        RValue[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            RValueResult result = new RValueResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        RValueListResult result = new RValueListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class RValueResult
{
    function void SetValue(RValue new_value) { value = new_value; }
    function RValue GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    RValue value;
    bool result;
}

class RValueListResult
{
    function void SetValue(RValue[] new_value) { value = new_value; }
    function RValue[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    RValue[] value;
    bool result;
}

class RValue
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetTail(RValueTail input_value) { tail_field = input_value; }
    function RValueTail GetTail() { return tail_field; }
    function void SetValue(RValueSingle input_value) { value_field = input_value; }
    function RValueSingle GetValue() { return value_field; }

    LengthString length_string;
    RValueTail tail_field;
    RValueSingle value_field;
}

class BinaryOperatorParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, BinaryOperatorResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        BinaryOperator instance = new BinaryOperator;
        StringResult andOp_field = new StringResult;
        StringResult orOp_field = new StringResult;
        StringResult greaterThan_field = new StringResult;
        StringResult lessThan_field = new StringResult;
        StringResult notEquality_field = new StringResult;
        StringResult equality_field = new StringResult;
        StringResult greaterThanEq_field = new StringResult;
        StringResult lessThanEq_field = new StringResult;
        StringResult subtraction_field = new StringResult;
        StringResult addition_field = new StringResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingleSave(index, "+", addition_field)) {
            instance.SetAndOp(andOp_field.GetValue());
            instance.SetOrOp(orOp_field.GetValue());
            instance.SetGreaterThan(greaterThan_field.GetValue());
            instance.SetLessThan(lessThan_field.GetValue());
            instance.SetNotEquality(notEquality_field.GetValue());
            instance.SetEquality(equality_field.GetValue());
            instance.SetGreaterThanEq(greaterThanEq_field.GetValue());
            instance.SetLessThanEq(lessThanEq_field.GetValue());
            instance.SetSubtraction(subtraction_field.GetValue());
            instance.SetAddition(addition_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            andOp_field = new StringResult;
            orOp_field = new StringResult;
            greaterThan_field = new StringResult;
            lessThan_field = new StringResult;
            notEquality_field = new StringResult;
            equality_field = new StringResult;
            greaterThanEq_field = new StringResult;
            lessThanEq_field = new StringResult;
            subtraction_field = new StringResult;
            addition_field = new StringResult;
        }

        if (true && string_parser_instance.ParseSingleSave(index, "-", subtraction_field)) {
            instance.SetAndOp(andOp_field.GetValue());
            instance.SetOrOp(orOp_field.GetValue());
            instance.SetGreaterThan(greaterThan_field.GetValue());
            instance.SetLessThan(lessThan_field.GetValue());
            instance.SetNotEquality(notEquality_field.GetValue());
            instance.SetEquality(equality_field.GetValue());
            instance.SetGreaterThanEq(greaterThanEq_field.GetValue());
            instance.SetLessThanEq(lessThanEq_field.GetValue());
            instance.SetSubtraction(subtraction_field.GetValue());
            instance.SetAddition(addition_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            andOp_field = new StringResult;
            orOp_field = new StringResult;
            greaterThan_field = new StringResult;
            lessThan_field = new StringResult;
            notEquality_field = new StringResult;
            equality_field = new StringResult;
            greaterThanEq_field = new StringResult;
            lessThanEq_field = new StringResult;
            subtraction_field = new StringResult;
            addition_field = new StringResult;
        }

        if (true && string_parser_instance.ParseSingleSave(index, "<=", lessThanEq_field)) {
            instance.SetAndOp(andOp_field.GetValue());
            instance.SetOrOp(orOp_field.GetValue());
            instance.SetGreaterThan(greaterThan_field.GetValue());
            instance.SetLessThan(lessThan_field.GetValue());
            instance.SetNotEquality(notEquality_field.GetValue());
            instance.SetEquality(equality_field.GetValue());
            instance.SetGreaterThanEq(greaterThanEq_field.GetValue());
            instance.SetLessThanEq(lessThanEq_field.GetValue());
            instance.SetSubtraction(subtraction_field.GetValue());
            instance.SetAddition(addition_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            andOp_field = new StringResult;
            orOp_field = new StringResult;
            greaterThan_field = new StringResult;
            lessThan_field = new StringResult;
            notEquality_field = new StringResult;
            equality_field = new StringResult;
            greaterThanEq_field = new StringResult;
            lessThanEq_field = new StringResult;
            subtraction_field = new StringResult;
            addition_field = new StringResult;
        }

        if (true && string_parser_instance.ParseSingleSave(index, ">=", greaterThanEq_field)) {
            instance.SetAndOp(andOp_field.GetValue());
            instance.SetOrOp(orOp_field.GetValue());
            instance.SetGreaterThan(greaterThan_field.GetValue());
            instance.SetLessThan(lessThan_field.GetValue());
            instance.SetNotEquality(notEquality_field.GetValue());
            instance.SetEquality(equality_field.GetValue());
            instance.SetGreaterThanEq(greaterThanEq_field.GetValue());
            instance.SetLessThanEq(lessThanEq_field.GetValue());
            instance.SetSubtraction(subtraction_field.GetValue());
            instance.SetAddition(addition_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            andOp_field = new StringResult;
            orOp_field = new StringResult;
            greaterThan_field = new StringResult;
            lessThan_field = new StringResult;
            notEquality_field = new StringResult;
            equality_field = new StringResult;
            greaterThanEq_field = new StringResult;
            lessThanEq_field = new StringResult;
            subtraction_field = new StringResult;
            addition_field = new StringResult;
        }

        if (true && string_parser_instance.ParseSingleSave(index, "==", equality_field)) {
            instance.SetAndOp(andOp_field.GetValue());
            instance.SetOrOp(orOp_field.GetValue());
            instance.SetGreaterThan(greaterThan_field.GetValue());
            instance.SetLessThan(lessThan_field.GetValue());
            instance.SetNotEquality(notEquality_field.GetValue());
            instance.SetEquality(equality_field.GetValue());
            instance.SetGreaterThanEq(greaterThanEq_field.GetValue());
            instance.SetLessThanEq(lessThanEq_field.GetValue());
            instance.SetSubtraction(subtraction_field.GetValue());
            instance.SetAddition(addition_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            andOp_field = new StringResult;
            orOp_field = new StringResult;
            greaterThan_field = new StringResult;
            lessThan_field = new StringResult;
            notEquality_field = new StringResult;
            equality_field = new StringResult;
            greaterThanEq_field = new StringResult;
            lessThanEq_field = new StringResult;
            subtraction_field = new StringResult;
            addition_field = new StringResult;
        }

        if (true && string_parser_instance.ParseSingleSave(index, "!=", notEquality_field)) {
            instance.SetAndOp(andOp_field.GetValue());
            instance.SetOrOp(orOp_field.GetValue());
            instance.SetGreaterThan(greaterThan_field.GetValue());
            instance.SetLessThan(lessThan_field.GetValue());
            instance.SetNotEquality(notEquality_field.GetValue());
            instance.SetEquality(equality_field.GetValue());
            instance.SetGreaterThanEq(greaterThanEq_field.GetValue());
            instance.SetLessThanEq(lessThanEq_field.GetValue());
            instance.SetSubtraction(subtraction_field.GetValue());
            instance.SetAddition(addition_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            andOp_field = new StringResult;
            orOp_field = new StringResult;
            greaterThan_field = new StringResult;
            lessThan_field = new StringResult;
            notEquality_field = new StringResult;
            equality_field = new StringResult;
            greaterThanEq_field = new StringResult;
            lessThanEq_field = new StringResult;
            subtraction_field = new StringResult;
            addition_field = new StringResult;
        }

        if (true && string_parser_instance.ParseSingleSave(index, "<", lessThan_field)) {
            instance.SetAndOp(andOp_field.GetValue());
            instance.SetOrOp(orOp_field.GetValue());
            instance.SetGreaterThan(greaterThan_field.GetValue());
            instance.SetLessThan(lessThan_field.GetValue());
            instance.SetNotEquality(notEquality_field.GetValue());
            instance.SetEquality(equality_field.GetValue());
            instance.SetGreaterThanEq(greaterThanEq_field.GetValue());
            instance.SetLessThanEq(lessThanEq_field.GetValue());
            instance.SetSubtraction(subtraction_field.GetValue());
            instance.SetAddition(addition_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            andOp_field = new StringResult;
            orOp_field = new StringResult;
            greaterThan_field = new StringResult;
            lessThan_field = new StringResult;
            notEquality_field = new StringResult;
            equality_field = new StringResult;
            greaterThanEq_field = new StringResult;
            lessThanEq_field = new StringResult;
            subtraction_field = new StringResult;
            addition_field = new StringResult;
        }

        if (true && string_parser_instance.ParseSingleSave(index, ">", greaterThan_field)) {
            instance.SetAndOp(andOp_field.GetValue());
            instance.SetOrOp(orOp_field.GetValue());
            instance.SetGreaterThan(greaterThan_field.GetValue());
            instance.SetLessThan(lessThan_field.GetValue());
            instance.SetNotEquality(notEquality_field.GetValue());
            instance.SetEquality(equality_field.GetValue());
            instance.SetGreaterThanEq(greaterThanEq_field.GetValue());
            instance.SetLessThanEq(lessThanEq_field.GetValue());
            instance.SetSubtraction(subtraction_field.GetValue());
            instance.SetAddition(addition_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            andOp_field = new StringResult;
            orOp_field = new StringResult;
            greaterThan_field = new StringResult;
            lessThan_field = new StringResult;
            notEquality_field = new StringResult;
            equality_field = new StringResult;
            greaterThanEq_field = new StringResult;
            lessThanEq_field = new StringResult;
            subtraction_field = new StringResult;
            addition_field = new StringResult;
        }

        if (true && string_parser_instance.ParseSingleSave(index, "||", orOp_field)) {
            instance.SetAndOp(andOp_field.GetValue());
            instance.SetOrOp(orOp_field.GetValue());
            instance.SetGreaterThan(greaterThan_field.GetValue());
            instance.SetLessThan(lessThan_field.GetValue());
            instance.SetNotEquality(notEquality_field.GetValue());
            instance.SetEquality(equality_field.GetValue());
            instance.SetGreaterThanEq(greaterThanEq_field.GetValue());
            instance.SetLessThanEq(lessThanEq_field.GetValue());
            instance.SetSubtraction(subtraction_field.GetValue());
            instance.SetAddition(addition_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            andOp_field = new StringResult;
            orOp_field = new StringResult;
            greaterThan_field = new StringResult;
            lessThan_field = new StringResult;
            notEquality_field = new StringResult;
            equality_field = new StringResult;
            greaterThanEq_field = new StringResult;
            lessThanEq_field = new StringResult;
            subtraction_field = new StringResult;
            addition_field = new StringResult;
        }

        if (true && string_parser_instance.ParseSingleSave(index, "&&", andOp_field)) {
            instance.SetAndOp(andOp_field.GetValue());
            instance.SetOrOp(orOp_field.GetValue());
            instance.SetGreaterThan(greaterThan_field.GetValue());
            instance.SetLessThan(lessThan_field.GetValue());
            instance.SetNotEquality(notEquality_field.GetValue());
            instance.SetEquality(equality_field.GetValue());
            instance.SetGreaterThanEq(greaterThanEq_field.GetValue());
            instance.SetLessThanEq(lessThanEq_field.GetValue());
            instance.SetSubtraction(subtraction_field.GetValue());
            instance.SetAddition(addition_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            andOp_field = new StringResult;
            orOp_field = new StringResult;
            greaterThan_field = new StringResult;
            lessThan_field = new StringResult;
            notEquality_field = new StringResult;
            equality_field = new StringResult;
            greaterThanEq_field = new StringResult;
            lessThanEq_field = new StringResult;
            subtraction_field = new StringResult;
            addition_field = new StringResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        BinaryOperatorResult result = new BinaryOperatorResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, BinaryOperatorResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        BinaryOperatorResult result = new BinaryOperatorResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, BinaryOperatorListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        BinaryOperator[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            BinaryOperatorResult result = new BinaryOperatorResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        BinaryOperatorListResult result = new BinaryOperatorListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class BinaryOperatorResult
{
    function void SetValue(BinaryOperator new_value) { value = new_value; }
    function BinaryOperator GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    BinaryOperator value;
    bool result;
}

class BinaryOperatorListResult
{
    function void SetValue(BinaryOperator[] new_value) { value = new_value; }
    function BinaryOperator[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    BinaryOperator[] value;
    bool result;
}

class BinaryOperator
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetAndOp(String input_value) { andOp_field = input_value; }
    function String GetAndOp() { return andOp_field; }
    function void SetOrOp(String input_value) { orOp_field = input_value; }
    function String GetOrOp() { return orOp_field; }
    function void SetGreaterThan(String input_value) { greaterThan_field = input_value; }
    function String GetGreaterThan() { return greaterThan_field; }
    function void SetLessThan(String input_value) { lessThan_field = input_value; }
    function String GetLessThan() { return lessThan_field; }
    function void SetNotEquality(String input_value) { notEquality_field = input_value; }
    function String GetNotEquality() { return notEquality_field; }
    function void SetEquality(String input_value) { equality_field = input_value; }
    function String GetEquality() { return equality_field; }
    function void SetGreaterThanEq(String input_value) { greaterThanEq_field = input_value; }
    function String GetGreaterThanEq() { return greaterThanEq_field; }
    function void SetLessThanEq(String input_value) { lessThanEq_field = input_value; }
    function String GetLessThanEq() { return lessThanEq_field; }
    function void SetSubtraction(String input_value) { subtraction_field = input_value; }
    function String GetSubtraction() { return subtraction_field; }
    function void SetAddition(String input_value) { addition_field = input_value; }
    function String GetAddition() { return addition_field; }

    LengthString length_string;
    String andOp_field;
    String orOp_field;
    String greaterThan_field;
    String lessThan_field;
    String notEquality_field;
    String equality_field;
    String greaterThanEq_field;
    String lessThanEq_field;
    String subtraction_field;
    String addition_field;
}

class UnaryOperatorParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, UnaryOperatorResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        UnaryOperator instance = new UnaryOperator;
        StringResult negation_field = new StringResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingleSave(index, "!", negation_field)) {
            instance.SetNegation(negation_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            negation_field = new StringResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        UnaryOperatorResult result = new UnaryOperatorResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, UnaryOperatorResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        UnaryOperatorResult result = new UnaryOperatorResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, UnaryOperatorListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        UnaryOperator[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            UnaryOperatorResult result = new UnaryOperatorResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        UnaryOperatorListResult result = new UnaryOperatorListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class UnaryOperatorResult
{
    function void SetValue(UnaryOperator new_value) { value = new_value; }
    function UnaryOperator GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    UnaryOperator value;
    bool result;
}

class UnaryOperatorListResult
{
    function void SetValue(UnaryOperator[] new_value) { value = new_value; }
    function UnaryOperator[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    UnaryOperator[] value;
    bool result;
}

class UnaryOperator
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetNegation(String input_value) { negation_field = input_value; }
    function String GetNegation() { return negation_field; }

    LengthString length_string;
    String negation_field;
}

class CommentParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, CommentResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Comment instance = new Comment;
        CommentCharacterListResult content_field = new CommentCharacterListResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingle(index, "/*") && comment_character_parser_instance.ParseManySave(index, content_field, 0, -1) && string_parser_instance.ParseSingle(index, "*/")) {
            instance.SetContent(content_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            content_field = new CommentCharacterListResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        CommentResult result = new CommentResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, CommentResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        CommentResult result = new CommentResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, CommentListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Comment[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            CommentResult result = new CommentResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        CommentListResult result = new CommentListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class CommentResult
{
    function void SetValue(Comment new_value) { value = new_value; }
    function Comment GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Comment value;
    bool result;
}

class CommentListResult
{
    function void SetValue(Comment[] new_value) { value = new_value; }
    function Comment[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Comment[] value;
    bool result;
}

class Comment
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetContent(CommentCharacter[] input_value) { content_field = input_value; }
    function CommentCharacter[] GetContent() { return content_field; }

    LengthString length_string;
    CommentCharacter[] content_field;
}

class CommentCharacterParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, CommentCharacterResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        CommentCharacter instance = new CommentCharacter;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && whitespace_parser_instance.ParseSingle(index)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && name_character_parser_instance.ParseSingle(index)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "!")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "\\\"")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "#")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "$")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "%")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "&")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "'")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "(")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, ")")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "+")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, ",")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "-")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, ".")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "/")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, ":")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, ";")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "<")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "=")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, ">")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "?")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "@")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "[")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "]")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "^")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "_")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "{")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "|")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "}")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "~")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        CommentCharacterResult result = new CommentCharacterResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, CommentCharacterResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        CommentCharacterResult result = new CommentCharacterResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, CommentCharacterListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        CommentCharacter[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            CommentCharacterResult result = new CommentCharacterResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        CommentCharacterListResult result = new CommentCharacterListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class CommentCharacterResult
{
    function void SetValue(CommentCharacter new_value) { value = new_value; }
    function CommentCharacter GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CommentCharacter value;
    bool result;
}

class CommentCharacterListResult
{
    function void SetValue(CommentCharacter[] new_value) { value = new_value; }
    function CommentCharacter[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    CommentCharacter[] value;
    bool result;
}

class CommentCharacter
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class QualfiedNameParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, QualfiedNameResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        QualfiedName instance = new QualfiedName;
        NameTailResult tail_field = new NameTailResult;
        NameResult name_field = new NameResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && name_parser_instance.ParseSingleSave(index, name_field) && name_tail_parser_instance.ParseOptionalSave(index, tail_field)) {
            instance.SetTail(tail_field.GetValue());
            instance.SetName(name_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            tail_field = new NameTailResult;
            name_field = new NameResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        QualfiedNameResult result = new QualfiedNameResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, QualfiedNameResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        QualfiedNameResult result = new QualfiedNameResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, QualfiedNameListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        QualfiedName[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            QualfiedNameResult result = new QualfiedNameResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        QualfiedNameListResult result = new QualfiedNameListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class QualfiedNameResult
{
    function void SetValue(QualfiedName new_value) { value = new_value; }
    function QualfiedName GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    QualfiedName value;
    bool result;
}

class QualfiedNameListResult
{
    function void SetValue(QualfiedName[] new_value) { value = new_value; }
    function QualfiedName[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    QualfiedName[] value;
    bool result;
}

class QualfiedName
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetTail(NameTail input_value) { tail_field = input_value; }
    function NameTail GetTail() { return tail_field; }
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }

    LengthString length_string;
    NameTail tail_field;
    Name name_field;
}

class NameTailParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, NameTailResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        NameTail instance = new NameTail;
        NameTailResult tail_field = new NameTailResult;
        NameResult name_field = new NameResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingle(index, ".") && name_parser_instance.ParseSingleSave(index, name_field) && name_tail_parser_instance.ParseOptionalSave(index, tail_field)) {
            instance.SetTail(tail_field.GetValue());
            instance.SetName(name_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            tail_field = new NameTailResult;
            name_field = new NameResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        NameTailResult result = new NameTailResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, NameTailResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        NameTailResult result = new NameTailResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, NameTailListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        NameTail[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            NameTailResult result = new NameTailResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        NameTailListResult result = new NameTailListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class NameTailResult
{
    function void SetValue(NameTail new_value) { value = new_value; }
    function NameTail GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    NameTail value;
    bool result;
}

class NameTailListResult
{
    function void SetValue(NameTail[] new_value) { value = new_value; }
    function NameTail[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    NameTail[] value;
    bool result;
}

class NameTail
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetTail(NameTail input_value) { tail_field = input_value; }
    function NameTail GetTail() { return tail_field; }
    function void SetName(Name input_value) { name_field = input_value; }
    function Name GetName() { return name_field; }

    LengthString length_string;
    NameTail tail_field;
    Name name_field;
}

class NameParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, NameResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Name instance = new Name;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && name_character_parser_instance.ParseMany(index, 1, -1)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        NameResult result = new NameResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, NameResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        NameResult result = new NameResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, NameListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Name[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            NameResult result = new NameResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        NameListResult result = new NameListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class NameResult
{
    function void SetValue(Name new_value) { value = new_value; }
    function Name GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Name value;
    bool result;
}

class NameListResult
{
    function void SetValue(Name[] new_value) { value = new_value; }
    function Name[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Name[] value;
    bool result;
}

class Name
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class NameCharacterParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, NameCharacterResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        NameCharacter instance = new NameCharacter;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && character_range_parser_instance.ParseSingle(index, 0x30, 0x39)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x41, 0x5A)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "_")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x61, 0x7A)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        NameCharacterResult result = new NameCharacterResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, NameCharacterResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        NameCharacterResult result = new NameCharacterResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, NameCharacterListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        NameCharacter[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            NameCharacterResult result = new NameCharacterResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        NameCharacterListResult result = new NameCharacterListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class NameCharacterResult
{
    function void SetValue(NameCharacter new_value) { value = new_value; }
    function NameCharacter GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    NameCharacter value;
    bool result;
}

class NameCharacterListResult
{
    function void SetValue(NameCharacter[] new_value) { value = new_value; }
    function NameCharacter[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    NameCharacter[] value;
    bool result;
}

class NameCharacter
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class BooleanParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, BooleanResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Boolean instance = new Boolean;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingle(index, "true")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "false")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        BooleanResult result = new BooleanResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, BooleanResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        BooleanResult result = new BooleanResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, BooleanListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Boolean[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            BooleanResult result = new BooleanResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        BooleanListResult result = new BooleanListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class BooleanResult
{
    function void SetValue(Boolean new_value) { value = new_value; }
    function Boolean GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Boolean value;
    bool result;
}

class BooleanListResult
{
    function void SetValue(Boolean[] new_value) { value = new_value; }
    function Boolean[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Boolean[] value;
    bool result;
}

class Boolean
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class ByteParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ByteResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Byte instance = new Byte;
        ByteDigitResult low_field = new ByteDigitResult;
        ByteDigitResult high_field = new ByteDigitResult;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingle(index, "0x") && byte_digit_parser_instance.ParseSingleSave(index, high_field) && byte_digit_parser_instance.ParseSingleSave(index, low_field)) {
            instance.SetLow(low_field.GetValue());
            instance.SetHigh(high_field.GetValue());
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            low_field = new ByteDigitResult;
            high_field = new ByteDigitResult;
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ByteResult result = new ByteResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ByteResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ByteResult result = new ByteResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ByteListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Byte[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ByteResult result = new ByteResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ByteListResult result = new ByteListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ByteResult
{
    function void SetValue(Byte new_value) { value = new_value; }
    function Byte GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Byte value;
    bool result;
}

class ByteListResult
{
    function void SetValue(Byte[] new_value) { value = new_value; }
    function Byte[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Byte[] value;
    bool result;
}

class Byte
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }
    function void SetLow(ByteDigit input_value) { low_field = input_value; }
    function ByteDigit GetLow() { return low_field; }
    function void SetHigh(ByteDigit input_value) { high_field = input_value; }
    function ByteDigit GetHigh() { return high_field; }

    LengthString length_string;
    ByteDigit low_field;
    ByteDigit high_field;
}

class ByteDigitParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, ByteDigitResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        ByteDigit instance = new ByteDigit;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && character_range_parser_instance.ParseSingle(index, 0x30, 0x39)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x41, 0x46)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        ByteDigitResult result = new ByteDigitResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, ByteDigitResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        ByteDigitResult result = new ByteDigitResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, ByteDigitListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        ByteDigit[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            ByteDigitResult result = new ByteDigitResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        ByteDigitListResult result = new ByteDigitListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class ByteDigitResult
{
    function void SetValue(ByteDigit new_value) { value = new_value; }
    function ByteDigit GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ByteDigit value;
    bool result;
}

class ByteDigitListResult
{
    function void SetValue(ByteDigit[] new_value) { value = new_value; }
    function ByteDigit[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    ByteDigit[] value;
    bool result;
}

class ByteDigit
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class NegativeParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, NegativeResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Negative instance = new Negative;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && string_parser_instance.ParseSingle(index, "-")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        NegativeResult result = new NegativeResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, NegativeResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        NegativeResult result = new NegativeResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, NegativeListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Negative[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            NegativeResult result = new NegativeResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        NegativeListResult result = new NegativeListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class NegativeResult
{
    function void SetValue(Negative new_value) { value = new_value; }
    function Negative GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Negative value;
    bool result;
}

class NegativeListResult
{
    function void SetValue(Negative[] new_value) { value = new_value; }
    function Negative[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Negative[] value;
    bool result;
}

class Negative
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class DecimalParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, DecimalResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Decimal instance = new Decimal;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && negative_parser_instance.ParseOptional(index) && number_parser_instance.ParseSingle(index) && string_parser_instance.ParseSingle(index, ".") && number_parser_instance.ParseSingle(index)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        DecimalResult result = new DecimalResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, DecimalResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        DecimalResult result = new DecimalResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, DecimalListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Decimal[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            DecimalResult result = new DecimalResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        DecimalListResult result = new DecimalListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class DecimalResult
{
    function void SetValue(Decimal new_value) { value = new_value; }
    function Decimal GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Decimal value;
    bool result;
}

class DecimalListResult
{
    function void SetValue(Decimal[] new_value) { value = new_value; }
    function Decimal[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Decimal[] value;
    bool result;
}

class Decimal
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class NumberParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, NumberResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Number instance = new Number;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && negative_parser_instance.ParseOptional(index) && digit_parser_instance.ParseMany(index, 1, -1)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        NumberResult result = new NumberResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, NumberResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        NumberResult result = new NumberResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, NumberListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Number[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            NumberResult result = new NumberResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        NumberListResult result = new NumberListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class NumberResult
{
    function void SetValue(Number new_value) { value = new_value; }
    function Number GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Number value;
    bool result;
}

class NumberListResult
{
    function void SetValue(Number[] new_value) { value = new_value; }
    function Number[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Number[] value;
    bool result;
}

class Number
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class DigitParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, DigitResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Digit instance = new Digit;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && character_range_parser_instance.ParseSingle(index, 0x30, 0x39)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        DigitResult result = new DigitResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, DigitResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        DigitResult result = new DigitResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, DigitListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Digit[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            DigitResult result = new DigitResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        DigitListResult result = new DigitListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class DigitResult
{
    function void SetValue(Digit new_value) { value = new_value; }
    function Digit GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Digit value;
    bool result;
}

class DigitListResult
{
    function void SetValue(Digit[] new_value) { value = new_value; }
    function Digit[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Digit[] value;
    bool result;
}

class Digit
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class LiteralParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, LiteralResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Literal instance = new Literal;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && literal_character_parser_instance.ParseMany(index, 0, -1)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        LiteralResult result = new LiteralResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, LiteralResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        LiteralResult result = new LiteralResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, LiteralListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Literal[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            LiteralResult result = new LiteralResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        LiteralListResult result = new LiteralListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class LiteralResult
{
    function void SetValue(Literal new_value) { value = new_value; }
    function Literal GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Literal value;
    bool result;
}

class LiteralListResult
{
    function void SetValue(Literal[] new_value) { value = new_value; }
    function Literal[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Literal[] value;
    bool result;
}

class Literal
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class LiteralCharacterParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, LiteralCharacterResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        LiteralCharacter instance = new LiteralCharacter;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && character_range_parser_instance.ParseSingle(index, 0x00, 0x21)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "\\\"")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x23, 0x5B)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && string_parser_instance.ParseSingle(index, "\\\\")) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        if (true && character_range_parser_instance.ParseSingle(index, 0x5D, 0xFF)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        LiteralCharacterResult result = new LiteralCharacterResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, LiteralCharacterResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        LiteralCharacterResult result = new LiteralCharacterResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, LiteralCharacterListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LiteralCharacter[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            LiteralCharacterResult result = new LiteralCharacterResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        LiteralCharacterListResult result = new LiteralCharacterListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class LiteralCharacterResult
{
    function void SetValue(LiteralCharacter new_value) { value = new_value; }
    function LiteralCharacter GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    LiteralCharacter value;
    bool result;
}

class LiteralCharacterListResult
{
    function void SetValue(LiteralCharacter[] new_value) { value = new_value; }
    function LiteralCharacter[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    LiteralCharacter[] value;
    bool result;
}

class LiteralCharacter
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}

class WhitespaceParser
{
    ParserNetwork parser_network;
    function void SetParserNetwork(ParserNetwork input) { parser_network = input; }
    function bool ParseSingleSave(LengthString index, WhitespaceResult result)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        LengthString consumed_string = new LengthString;
        consumed_string.SetData(index.GetData());
        consumed_string.SetStart(index.GetStart());
        consumed_string.SetLength(0);
        Whitespace instance = new Whitespace;

        CTCodeFileParser c_t_code_file_parser_instance = parser_network.GetCTCodeFileParser();
        ExternalDefinitionParser external_definition_parser_instance = parser_network.GetExternalDefinitionParser();
        UnmanagedTypeParser unmanaged_type_parser_instance = parser_network.GetUnmanagedTypeParser();
        DefinitionParser definition_parser_instance = parser_network.GetDefinitionParser();
        InterfaceDefParser interface_def_parser_instance = parser_network.GetInterfaceDefParser();
        ClassDefParser class_def_parser_instance = parser_network.GetClassDefParser();
        ImplementationSpecParser implementation_spec_parser_instance = parser_network.GetImplementationSpecParser();
        ContentDeclarationParser content_declaration_parser_instance = parser_network.GetContentDeclarationParser();
        ContentDefinitionParser content_definition_parser_instance = parser_network.GetContentDefinitionParser();
        PrimativeTypeParser primative_type_parser_instance = parser_network.GetPrimativeTypeParser();
        DefinedTypeParser defined_type_parser_instance = parser_network.GetDefinedTypeParser();
        SingletonTypeParser singleton_type_parser_instance = parser_network.GetSingletonTypeParser();
        DimensionalNoteParser dimensional_note_parser_instance = parser_network.GetDimensionalNoteParser();
        DimensionalTypeParser dimensional_type_parser_instance = parser_network.GetDimensionalTypeParser();
        MapNoteParser map_note_parser_instance = parser_network.GetMapNoteParser();
        MapTypeParser map_type_parser_instance = parser_network.GetMapTypeParser();
        ValueTypeParser value_type_parser_instance = parser_network.GetValueTypeParser();
        ParameterListDefParser parameter_list_def_parser_instance = parser_network.GetParameterListDefParser();
        ParameterListParser parameter_list_parser_instance = parser_network.GetParameterListParser();
        CodeBlockParser code_block_parser_instance = parser_network.GetCodeBlockParser();
        DeclarationAssignParser declaration_assign_parser_instance = parser_network.GetDeclarationAssignParser();
        DeclarationParser declaration_parser_instance = parser_network.GetDeclarationParser();
        AssignmentParser assignment_parser_instance = parser_network.GetAssignmentParser();
        ReturnParser return_parser_instance = parser_network.GetReturnParser();
        ElseTailParser else_tail_parser_instance = parser_network.GetElseTailParser();
        ConditionalParser conditional_parser_instance = parser_network.GetConditionalParser();
        LoopParser loop_parser_instance = parser_network.GetLoopParser();
        CallParser call_parser_instance = parser_network.GetCallParser();
        AllocateParser allocate_parser_instance = parser_network.GetAllocateParser();
        InstructionParser instruction_parser_instance = parser_network.GetInstructionParser();
        RValueSingleParser r_value_single_parser_instance = parser_network.GetRValueSingleParser();
        RValueTailParser r_value_tail_parser_instance = parser_network.GetRValueTailParser();
        RValueParser r_value_parser_instance = parser_network.GetRValueParser();
        BinaryOperatorParser binary_operator_parser_instance = parser_network.GetBinaryOperatorParser();
        UnaryOperatorParser unary_operator_parser_instance = parser_network.GetUnaryOperatorParser();
        CommentParser comment_parser_instance = parser_network.GetCommentParser();
        CommentCharacterParser comment_character_parser_instance = parser_network.GetCommentCharacterParser();
        QualfiedNameParser qualfied_name_parser_instance = parser_network.GetQualfiedNameParser();
        NameTailParser name_tail_parser_instance = parser_network.GetNameTailParser();
        NameParser name_parser_instance = parser_network.GetNameParser();
        NameCharacterParser name_character_parser_instance = parser_network.GetNameCharacterParser();
        BooleanParser boolean_parser_instance = parser_network.GetBooleanParser();
        ByteParser byte_parser_instance = parser_network.GetByteParser();
        ByteDigitParser byte_digit_parser_instance = parser_network.GetByteDigitParser();
        NegativeParser negative_parser_instance = parser_network.GetNegativeParser();
        DecimalParser decimal_parser_instance = parser_network.GetDecimalParser();
        NumberParser number_parser_instance = parser_network.GetNumberParser();
        DigitParser digit_parser_instance = parser_network.GetDigitParser();
        LiteralParser literal_parser_instance = parser_network.GetLiteralParser();
        LiteralCharacterParser literal_character_parser_instance = parser_network.GetLiteralCharacterParser();
        WhitespaceParser whitespace_parser_instance = parser_network.GetWhitespaceParser();
        StringParser string_parser_instance = parser_network.GetStringParser();
        CharacterParser character_parser_instance = parser_network.GetCharacterParser();
        CharacterRangeParser character_range_parser_instance = parser_network.GetCharacterRangeParser();

        if (true && character_range_parser_instance.ParseSingle(index, 0x00, 0x20)) {
            consumed_string.SetLength(index.GetStart() - index_start);
            instance.SetLengthString(consumed_string);
            result.SetValue(instance);
            result.SetResult(true);
            return result.GetResult();
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
        }

        result.SetResult(false);
        return result.GetResult();
    }

    function bool ParseSingle(LengthString index)
    {
        WhitespaceResult result = new WhitespaceResult;
        return ParseSingleSave(index, result);
    }

    function bool ParseOptionalSave(LengthString index, WhitespaceResult result)
    {
        ParseSingleSave(index, result);
        result.SetResult(true);
        return true;
    }

    function bool ParseOptional(LengthString index)
    {
        WhitespaceResult result = new WhitespaceResult;
        return ParseOptionalSave(index, result);
    }

    function bool ParseManySave(LengthString index, WhitespaceListResult list_result, int minimum, int maximum)
    {
        int index_start = index.GetStart();
        int index_length = index.GetLength();
        Whitespace[] results;
        int count = 0;
        int max_check = maximum;
        bool check_next = true;

        if (maximum < 0)
        {
            max_check = count + 1;
        }

        while (check_next && count < max_check)
        {
            WhitespaceResult result = new WhitespaceResult;
            ParseSingleSave(index, result);
            check_next = result.GetResult();

            if (result.GetResult())
            {
                count = count + 1;
                Append(results, result.GetValue());
            }

            if (maximum < 0)
            {
                max_check = count + 1;
            }
        }

        if (count >= minimum && count <= max_check)
        {
            list_result.SetValue(results);
            list_result.SetResult(true);
        } else {
            index.SetStart(index_start);
            index.SetLength(index_length);
            list_result.SetResult(false);
        }

        return list_result.GetResult();
    }

    function bool ParseMany(LengthString index, int minimum, int maximum)
    {
        WhitespaceListResult result = new WhitespaceListResult;
        return ParseManySave(index, result, minimum, maximum);
    }
}

class WhitespaceResult
{
    function void SetValue(Whitespace new_value) { value = new_value; }
    function Whitespace GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Whitespace value;
    bool result;
}

class WhitespaceListResult
{
    function void SetValue(Whitespace[] new_value) { value = new_value; }
    function Whitespace[] GetValue() { return value; }
    function void SetResult(bool new_result) { result = new_result; }
    function bool GetResult() { return result; }

    Whitespace[] value;
    bool result;
}

class Whitespace
{
    function void SetLengthString(LengthString new_value)
    {
        length_string = new LengthString;
        length_string.SetData(new_value.GetData());
        length_string.SetStart(new_value.GetStart());
        length_string.SetLength(new_value.GetLength());
    }

    function string UnParse() { return length_string.GetString(); }

    LengthString length_string;
}
