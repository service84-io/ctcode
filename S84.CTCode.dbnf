################################
#Global Structure###############
################################
<CTCodeFile>        ::= attribute(declarations <ExternalDefinition>*) attribute(unmanaged_types <UnmanagedType>*) attribute(definitions <Definition>*)
<ExternalDefinition>::= "exdef" <Whitespace>* attribute(exdef <QualfiedName>) <Whitespace>* ";" <Whitespace>*
<UnmanagedType>     ::= "unmanaged" <Whitespace>* attribute(unmanaged_type <QualfiedName>) <Whitespace>* ";" <Whitespace>*
<Definition>        ::= attribute(interface_def <InterfaceDef>)
                    ::= attribute(class_def <ClassDef>)
<InterfaceDef>      ::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* "interface" <Whitespace>+ attribute(name <Name>) <Whitespace>* "{" <Whitespace>* attribute(declarations <ContentDeclaration>*) <Whitespace>* "}" <Whitespace>*
<ClassDef>          ::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* "class" <Whitespace>+ attribute(name <Name>) attribute(implementing <ImplementationSpec>?) <Whitespace>* "{" <Whitespace>* attribute(definitions <ContentDefinition>*) <Whitespace>* "}" <Whitespace>*
<ImplementationSpec>::= <Whitespace>+ "implements" <Whitespace>+ attribute(interface <QualfiedName>) <Whitespace>*
<ContentDeclaration>::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* "function" <Whitespace>+ attribute(type <ValueType>) <Whitespace>+ attribute(name <Name>) <Whitespace>* "(" <Whitespace>* attribute(parameters <ParameterListDef>?) <Whitespace>* ")" <Whitespace>* ";" <Whitespace>*
<ContentDefinition> ::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* "function" <Whitespace>+ attribute(type <ValueType>) <Whitespace>+ attribute(name <Name>) <Whitespace>* "(" <Whitespace>* attribute(parameters <ParameterListDef>?) <Whitespace>* ")" <Whitespace>* attribute(function_body <CodeBlock>) <Whitespace>*
                    ::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* attribute(type <ValueType>) <Whitespace>+ attribute(name <Name>) <Whitespace>* ";" <Whitespace>*
################################
#Types##########################
################################
<PrimativeType>     ::= "int"
                    ::= "string"
                    ::= "bool"
                    ::= "float"
                    ::= "void"
<DefinedType>       ::= attribute(name <QualfiedName>)
<SingletonType>     ::= attribute(primative_type <PrimativeType>)
                    ::= attribute(defined_type <DefinedType>)
<DimensionalNote>   ::= <Whitespace>* "[" <Whitespace>* "]"
<DimensionalType>   ::= attribute(singleton_type <SingletonType>) attribute(dimensional_note <DimensionalNote>+)
<MapNote>           ::= <Whitespace>* "{" <Whitespace>* "}"
<MapType>           ::= attribute(singleton_type <SingletonType>) attribute(map_note <MapNote>)
<ValueType>         ::= attribute(dimensional_type <DimensionalType>)
                    ::= attribute(map_type <MapType>)
                    ::= attribute(singleton_type <SingletonType>)
################################
################################
################################
<ParameterListDef>  ::= <Whitespace>* attribute(type <ValueType>) <Whitespace>+ attribute(name <Name>) <Whitespace>* "," <Whitespace>* attribute(parameter_tail <ParameterListDef>)
                    ::= <Whitespace>* attribute(type <ValueType>) <Whitespace>+ attribute(name <Name>) <Whitespace>*
<ParameterList>     ::= <Whitespace>* attribute(r_value <RValue>) <Whitespace>* "," <Whitespace>* attribute(parameter_tail <ParameterList>)
                    ::= <Whitespace>* attribute(r_value <RValue>) <Whitespace>*
<CodeBlock>         ::= <Whitespace>* "{" <Whitespace>* attribute(instructions <Instruction>*) <Whitespace>* "}" <Whitespace>*
<DeclarationAssign> ::= <Whitespace>* "=" <Whitespace>* attribute(r_value <RValue>) <Whitespace>*
<Declaration>       ::= <Whitespace>* attribute(type <ValueType>) <Whitespace>+ attribute(name <Name>) <Whitespace>* attribute(assignment <DeclarationAssign>?) <Whitespace>* ";" <Whitespace>*
<Assignment>        ::= <Whitespace>* attribute(l_value <QualfiedName>) <Whitespace>* "=" <Whitespace>* attribute(r_value <RValue>) <Whitespace>* ";" <Whitespace>*
<Return>            ::= <Whitespace>* attribute(rtn "return") <Whitespace>+ attribute(r_value <RValue>) <Whitespace>* ";" <Whitespace>*
<ElseTail>          ::= <Whitespace>* attribute(else_key "else") <Whitespace>* attribute(code_block <CodeBlock>) <Whitespace>*
<Conditional>       ::= <Whitespace>* attribute(conditional_key "if") <Whitespace>* "(" <Whitespace>* attribute(r_value <RValue>) <Whitespace>* ")" <Whitespace>* attribute(code_block <CodeBlock>) <Whitespace>* attribute(else_tail <ElseTail>?)
<Loop>              ::= <Whitespace>* attribute(loop_key "while") <Whitespace>* "(" <Whitespace>* attribute(r_value <RValue>) <Whitespace>* ")" <Whitespace>* attribute(code_block <CodeBlock>) <Whitespace>*
<Call>              ::= attribute(variable <Name>) "." attribute(function <Name>) <Whitespace>* "(" <Whitespace>* attribute(parameters <ParameterList>?) <Whitespace>* ")" <Whitespace>*
                    ::= attribute(function <Name>) <Whitespace>* "(" <Whitespace>* attribute(parameters <ParameterList>?) <Whitespace>* ")" <Whitespace>*
                    ::= attribute(function_chain <QualfiedName>) <Whitespace>* "(" <Whitespace>* attribute(parameters <ParameterList>?) <Whitespace>* ")" <Whitespace>*
<Allocate>          ::= <Whitespace>* "new" <Whitespace>+ attribute(managed_type <QualfiedName>) <Whitespace>*
<Instruction>       ::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* attribute(code_block <CodeBlock>)
                    ::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* attribute(rtn <Return>)
                    ::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* attribute(declaration <Declaration>)
                    ::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* attribute(assignment <Assignment>)
                    ::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* attribute(call <Call>) <Whitespace>* ";" <Whitespace>*
                    ::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* attribute(conditional <Conditional>)
                    ::= <Whitespace>* attribute(comment <Comment>?) <Whitespace>* attribute(loop <Loop>)
<RValueSingle>      ::= <Whitespace>* attribute(unary_operator <UnaryOperator>?) <Whitespace>* attribute(call <Call>)
                    ::= <Whitespace>* attribute(unary_operator <UnaryOperator>?) <Whitespace>* attribute(allocate <Allocate>)
                    ::= <Whitespace>* attribute(unary_operator <UnaryOperator>?) <Whitespace>* attribute(byte_literal <Byte>)
                    ::= <Whitespace>* attribute(unary_operator <UnaryOperator>?) <Whitespace>* attribute(decimal_literal <Decimal>)
                    ::= <Whitespace>* attribute(unary_operator <UnaryOperator>?) <Whitespace>* attribute(integer_literal <Number>)
                    ::= <Whitespace>* attribute(unary_operator <UnaryOperator>?) <Whitespace>* attribute(boolean_literal <Boolean>)
                    ::= <Whitespace>* attribute(unary_operator <UnaryOperator>?) <Whitespace>* attribute(variable <QualfiedName>)
                    ::= <Whitespace>* attribute(unary_operator <UnaryOperator>?) <Whitespace>* "\"" attribute(string_literal <Literal>) "\""
<RValueTail>        ::= <Whitespace>* attribute(binary_operator <BinaryOperator>) <Whitespace>* attribute(value <RValueSingle>) <Whitespace>* attribute(tail <RValueTail>?)
<RValue>            ::= attribute(value <RValueSingle>) attribute(tail <RValueTail>?)
<BinaryOperator>    ::= attribute(addition "+")
                    ::= attribute(subtraction "-")
                    ::= attribute(less_than_eq "<=")
                    ::= attribute(greater_than_eq ">=")
                    ::= attribute(equality "==")
                    ::= attribute(not_equality "!=")
                    ::= attribute(less_than "<")
                    ::= attribute(greater_than ">")
                    ::= attribute(or_op "||")
                    ::= attribute(and_op "&&")
<UnaryOperator>     ::= attribute(negation "!")
<Comment>           ::= "/*" attribute(content <CommentContent>*) "*/"
<NonStarCharacter>  ::= [0x00-0x29]
                    ::= [0x2B-0xFF]
<NonSlashCharacter> ::= [0x00-0x2E]
                    ::= [0x30-0xFF]
<CommentContent>    ::= <NonStarCharacter>
                    ::= "*" <NonSlashCharacter>
<QualfiedName>      ::= attribute(name <Name>) attribute(tail <NameTail>?)
<NameTail>          ::= "." attribute(name <Name>) attribute(tail <NameTail>?)
<Name>              ::= <NameCharacter>+
<NameCharacter>     ::= [0x30-0x39]
                    ::= [0x41-0x5A]
                    ::= "_"
                    ::= [0x61-0x7A]
<Boolean>           ::= "true"
                    ::= "false"
<Byte>              ::= "0x" attribute(high <ByteDigit>) attribute(low <ByteDigit>)
<ByteDigit>         ::= [0x30-0x39]
                    ::= [0x41-0x46]
<Negative>          ::= "-"
<Decimal>           ::= <Negative>? <Number> "." <Number>
<Number>            ::= <Negative>? <Digit>+
<Digit>             ::= [0x30-0x39]
<Literal>           ::= <LiteralCharacter>*
<LiteralCharacter>  ::= [0x00-0x21]
                    ::= "\\\""
                    ::= [0x23-0x5B]
                    ::= "\\\\"
                    ::= [0x5D-0xFF]
<Whitespace>        ::= [0x00-0x20]