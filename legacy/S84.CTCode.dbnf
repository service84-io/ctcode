################################
#Global Structure###############
################################
<CTCodeFile>        ::= attribute(declarations <ExternalDefinition>*) attribute(unmanaged_types <UnmanagedType>*) attribute(definitions <Definition>*)
<ExternalDefinition>::= "exdef" <whitespace>* attribute(exdef <qualfied_name>) <whitespace>* ";" <whitespace>*
<UnmanagedType>     ::= "unmanaged" <whitespace>* attribute(unmanaged_type <qualfied_name>) <whitespace>* ";" <whitespace>*
<Definition>        ::= attribute(interfaceDef <InterfaceDef>)
                    ::= attribute(classDef <ClassDef>)
<InterfaceDef>      ::= <whitespace>* attribute(comment <Comment>?) <whitespace>* "interface" <whitespace>+ attribute(name <name>) <whitespace>* "{" <whitespace>* attribute(declarations <ContentDeclaration>*) <whitespace>* "}" <whitespace>*
<ClassDef>          ::= <whitespace>* attribute(comment <Comment>?) <whitespace>* "class" <whitespace>+ attribute(name <name>) attribute(implementing <ImplementationSpec>?) <whitespace>* "{" <whitespace>* attribute(definitions <ContentDefinition>*) <whitespace>* "}" <whitespace>*
<ImplementationSpec>::= <whitespace>+ "implements" <whitespace>+ attribute(interface <qualfied_name>) <whitespace>*
<ContentDeclaration>::= <whitespace>* attribute(comment <Comment>?) <whitespace>* "function" <whitespace>+ attribute(type <ValueType>) <whitespace>+ attribute(name <name>) <whitespace>* "(" <whitespace>* attribute(parameters <ParameterListDef>?) <whitespace>* ")" <whitespace>* ";" <whitespace>*
<ContentDefinition> ::= <whitespace>* attribute(comment <Comment>?) <whitespace>* "function" <whitespace>+ attribute(type <ValueType>) <whitespace>+ attribute(name <name>) <whitespace>* "(" <whitespace>* attribute(parameters <ParameterListDef>?) <whitespace>* ")" <whitespace>* attribute(functionBody <CodeBlock>) <whitespace>*
                    ::= <whitespace>* attribute(comment <Comment>?) <whitespace>* attribute(type <ValueType>) <whitespace>+ attribute(name <name>) <whitespace>* ";" <whitespace>*
################################
#Types##########################
################################
<PrimativeType>     ::= "int"
                    ::= "string"
                    ::= "bool"
                    ::= "float"
                    ::= "void"
<DefinedType>       ::= attribute(name <qualfied_name>)
<SingletonType>     ::= attribute(primativeType <PrimativeType>)
                    ::= attribute(definedType <DefinedType>)
<DimensionalNote>   ::= <whitespace>* "[" <whitespace>* "]"
<DimensionalType>   ::= attribute(singletonType <SingletonType>) attribute(dimensionalNote <DimensionalNote>+)
<MapNote>           ::= <whitespace>* "{" <whitespace>* "}"
<MapType>           ::= attribute(singletonType <SingletonType>) attribute(mapNote <MapNote>)
<ValueType>         ::= attribute(dimensionalType <DimensionalType>)
                    ::= attribute(mapType <MapType>)
                    ::= attribute(singletonType <SingletonType>)
################################
################################
################################
<ParameterListDef>  ::= <whitespace>* attribute(type <ValueType>) <whitespace>+ attribute(name <name>) <whitespace>* "," <whitespace>* attribute(parameterTail <ParameterListDef>)
                    ::= <whitespace>* attribute(type <ValueType>) <whitespace>+ attribute(name <name>) <whitespace>*
<ParameterList>     ::= <whitespace>* attribute(rvalue <RValue>) <whitespace>* "," <whitespace>* attribute(parameterTail <ParameterList>)
                    ::= <whitespace>* attribute(rvalue <RValue>) <whitespace>*
<CodeBlock>         ::= <whitespace>* "{" <whitespace>* attribute(instructions <Instruction>*) <whitespace>* "}" <whitespace>*
<DeclarationAssign> ::= <whitespace>* "=" <whitespace>* attribute(rvalue <RValue>) <whitespace>*
<Declaration>       ::= <whitespace>* attribute(type <ValueType>) <whitespace>+ attribute(name <name>) <whitespace>* attribute(assignment <DeclarationAssign>?) <whitespace>* ";" <whitespace>*
<Assignment>        ::= <whitespace>* attribute(lvalue <name>) <whitespace>* "=" <whitespace>* attribute(rvalue <RValue>) <whitespace>* ";" <whitespace>*
<Return>            ::= <whitespace>* attribute(rtn "return") <whitespace>+ attribute(rvalue <RValue>) <whitespace>* ";" <whitespace>*
<ElseTail>          ::= <whitespace>* attribute(elseKey "else") <whitespace>* attribute(codeBlock <CodeBlock>) <whitespace>*
<Conditional>       ::= <whitespace>* attribute(conditionalKey "if") <whitespace>* "(" <whitespace>* attribute(rvalue <RValue>) <whitespace>* ")" <whitespace>* attribute(codeBlock <CodeBlock>) <whitespace>* attribute(elseTail <ElseTail>?)
<Loop>              ::= <whitespace>* attribute(loopKey "while") <whitespace>* "(" <whitespace>* attribute(rvalue <RValue>) <whitespace>* ")" <whitespace>* attribute(codeBlock <CodeBlock>) <whitespace>*
<Call>              ::= attribute(variable <name>) "." attribute(function <name>) <whitespace>* "(" <whitespace>* attribute(parameters <ParameterList>?) <whitespace>* ")" <whitespace>*
                    ::= attribute(function <name>) <whitespace>* "(" <whitespace>* attribute(parameters <ParameterList>?) <whitespace>* ")" <whitespace>*
<Allocate>          ::= <whitespace>* "new" <whitespace>+ attribute(managed_type <qualfied_name>) <whitespace>*
<Instruction>       ::= <whitespace>* attribute(comment <Comment>?) <whitespace>* attribute(codeBlock <CodeBlock>)
                    ::= <whitespace>* attribute(comment <Comment>?) <whitespace>* attribute(rtn <Return>)
                    ::= <whitespace>* attribute(comment <Comment>?) <whitespace>* attribute(declaration <Declaration>)
                    ::= <whitespace>* attribute(comment <Comment>?) <whitespace>* attribute(assignment <Assignment>)
                    ::= <whitespace>* attribute(comment <Comment>?) <whitespace>* attribute(call <Call>) <whitespace>* ";" <whitespace>*
                    ::= <whitespace>* attribute(comment <Comment>?) <whitespace>* attribute(conditional <Conditional>)
                    ::= <whitespace>* attribute(comment <Comment>?) <whitespace>* attribute(loop <Loop>)
<RValueSingle>      ::= <whitespace>* attribute(unary_operator <UnaryOperator>?) <whitespace>* attribute(call <Call>)
                    ::= <whitespace>* attribute(unary_operator <UnaryOperator>?) <whitespace>* attribute(allocate <Allocate>)
                    ::= <whitespace>* attribute(unary_operator <UnaryOperator>?) <whitespace>* attribute(byteLiteral <byte>)
                    ::= <whitespace>* attribute(unary_operator <UnaryOperator>?) <whitespace>* attribute(decimalLiteral <decimal>)
                    ::= <whitespace>* attribute(unary_operator <UnaryOperator>?) <whitespace>* attribute(integerLiteral <number>)
                    ::= <whitespace>* attribute(unary_operator <UnaryOperator>?) <whitespace>* attribute(booleanLiteral <boolean>)
                    ::= <whitespace>* attribute(unary_operator <UnaryOperator>?) <whitespace>* attribute(variable <name>)
                    ::= <whitespace>* attribute(unary_operator <UnaryOperator>?) <whitespace>* "\"" attribute(stringLiteral <literal>) "\""
<RValueTail>        ::= <whitespace>* attribute(binary_operator <BinaryOperator>) <whitespace>* attribute(value <RValueSingle>) <whitespace>* attribute(tail <RValueTail>?)
<RValue>            ::= attribute(value <RValueSingle>) attribute(tail <RValueTail>?)
<BinaryOperator>    ::= attribute(addition "+")
                    ::= attribute(subtraction "-")
                    ::= attribute(lessThanEq "<=")
                    ::= attribute(greaterThanEq ">=")
                    ::= attribute(equality "==")
                    ::= attribute(notEquality "!=")
                    ::= attribute(lessThan "<")
                    ::= attribute(greaterThan ">")
                    ::= attribute(orOp "||")
                    ::= attribute(andOp "&&")
<UnaryOperator>     ::= attribute(negation "!")
<Comment>           ::= "/*" attribute(content <comment_character>*) "*/"
<comment_character> ::= <whitespace>
                    ::= <name_character>
                    ::= "!"
                    ::= "\\\""
                    ::= "#"
                    ::= "$"
                    ::= "%"
                    ::= "&"
                    ::= "'"
                    ::= "("
                    ::= ")"
                    ::= "+"
                    ::= ","
                    ::= "-"
                    ::= "."
                    ::= "/"
                    ::= ":"
                    ::= ";"
                    ::= "<"
                    ::= "="
                    ::= ">"
                    ::= "?"
                    ::= "@"
                    ::= "["
                    ::= "]"
                    ::= "^"
                    ::= "_"
                    ::= "{"
                    ::= "|"
                    ::= "}"
                    ::= "~"
<qualfied_name>     ::= attribute(name <name>) attribute(tail <name_tail>?)
<name_tail>         ::= "." attribute(name <name>) attribute(tail <name_tail>?)
<name>              ::= <name_character>+
<name_character>    ::= [0x30-0x39]
                    ::= [0x41-0x5A]
                    ::= "_"
                    ::= [0x61-0x7A]
<boolean>           ::= "true"
                    ::= "false"
<byte>              ::= "0x" attribute(high <byte_digit>) attribute(low <byte_digit>)
<byte_digit>        ::= [0x30-0x39]
                    ::= [0x41-0x46]
<negative>          ::= "-"
<decimal>           ::= <negative>? <number> "." <number>
<number>            ::= <negative>? <digit>+
<digit>             ::= [0x30-0x39]
<literal>           ::= <literal_character>*
<literal_character> ::= [0x00-0x21]
                    ::= "\\\""
                    ::= [0x23-0x5B]
                    ::= "\\\\"
                    ::= [0x5D-0xFF]
<whitespace>        ::= [0x00-0x20]